cscope 15 $HOME/Learnin/APUE/apue.2e               0000466221
	@advio/catgetmsg.c

1 
	~"≠ue.h
"

2 
	~<°r›ts.h
>

4 
	#BUFFSIZE
 4096

	)

7 
	$maö
()

9 
n
, 
Êag
;

10 
˘lbuf
[
BUFFSIZE
], 
d©buf
[BUFFSIZE];

11 
°rbuf
 
˘l
, 
d©
;

13 
˘l
.
buf
 = 
˘lbuf
;

14 
˘l
.
maxÀn
 = 
BUFFSIZE
;

15 
d©
.
buf
 = 
d©buf
;

16 
d©
.
maxÀn
 = 
BUFFSIZE
;

18 
Êag
 = 0;

19 i‡((
n
 = 
	`gëmsg
(
STDIN_FILENO
, &
˘l
, &
d©
, &
Êag
)) < 0)

20 
	`îr_sys
("getmsgÉrror");

21 
	`Ârötf
(
°dîr
, "flag = %d, ctl.len = %d, dat.len = %d\n",

22 
Êag
, 
˘l
.
Àn
, 
d©
.len);

23 i‡(
d©
.
Àn
 == 0)

24 
	`exô
(0);

25 i‡(
d©
.
Àn
 > 0)

26 i‡(
	`wrôe
(
STDOUT_FILENO
, 
d©
.
buf
, d©.
Àn
) != dat.len)

27 
	`îr_sys
("writeÉrror");

29 
	}
}

	@advio/devzero.c

1 
	~"≠ue.h
"

2 
	~<f˙é.h
>

3 
	~<sys/mm™.h
>

5 
	#NLOOPS
 1000

	)

6 
	#SIZE
 (Ë

	)

9 
	$upd©e
(*
±r
)

11 ((*
±r
)++);

12 
	}
}

15 
	$maö
()

17 
fd
, 
i
, 
cou¡î
;

18 
pid_t
 
pid
;

19 *
¨ó
;

21 i‡((
fd
 = 
	`›í
("/dev/zîo", 
O_RDWR
)) < 0)

22 
	`îr_sys
("openÉrror");

23 i‡((
¨ó
 = 
	`mm≠
(0, 
SIZE
, 
PROT_READ
 | 
PROT_WRITE
, 
MAP_SHARED
,

24 
fd
, 0)Ë=
MAP_FAILED
)

25 
	`îr_sys
("mmapÉrror");

26 
	`˛o£
(
fd
);

28 
	`TELL_WAIT
();

30 i‡((
pid
 = 
	`f‹k
()) < 0) {

31 
	`îr_sys
("forkÉrror");

32 } i‡(
pid
 > 0) {

33 
i
 = 0; i < 
NLOOPS
; i += 2) {

34 i‡((
cou¡î
 = 
	`upd©e
((*)
¨ó
)Ë!
i
)

35 
	`îr_quô
("∑ª¡:Éx≥˘ed %d, gŸ %d", 
i
, 
cou¡î
);

37 
	`TELL_CHILD
(
pid
);

38 
	`WAIT_CHILD
();

41 
i
 = 1; i < 
NLOOPS
 + 1; i += 2) {

42 
	`WAIT_PARENT
();

44 i‡((
cou¡î
 = 
	`upd©e
((*)
¨ó
)Ë!
i
)

45 
	`îr_quô
("chûd:Éx≥˘ed %d, gŸ %d", 
i
, 
cou¡î
);

47 
	`TELL_PARENT
(
	`gëµid
());

51 
	`exô
(0);

52 
	}
}

	@advio/mcopy.c

1 
	~"≠ue.h
"

2 
	~<f˙é.h
>

3 
	~<sys/mm™.h
>

6 
	$maö
(
¨gc
, *
¨gv
[])

8 
fdö
, 
fdout
;

9 *
§c
, *
d°
;

10 
°©
 
°©buf
;

12 i‡(
¨gc
 != 3)

13 
	`îr_quô
("ußge: %†<‰omfûe> <tofûe>", 
¨gv
[0]);

15 i‡((
fdö
 = 
	`›í
(
¨gv
[1], 
O_RDONLY
)) < 0)

16 
	`îr_sys
("ˇn'à›í %†f‹Ñódög", 
¨gv
[1]);

18 i‡((
fdout
 = 
	`›í
(
¨gv
[2], 
O_RDWR
 | 
O_CREAT
 | 
O_TRUNC
,

19 
FILE_MODE
)) < 0)

20 
	`îr_sys
("ˇn'à¸óà%†f‹ wrôög", 
¨gv
[2]);

22 i‡(
	`f°©
(
fdö
, &
°©buf
) < 0)

23 
	`îr_sys
("fstatÉrror");

26 i‡(
	`l£ek
(
fdout
, 
°©buf
.
°_size
 - 1, 
SEEK_SET
) == -1)

27 
	`îr_sys
("lseekÉrror");

28 i‡(
	`wrôe
(
fdout
, "", 1) != 1)

29 
	`îr_sys
("writeÉrror");

31 i‡((
§c
 = 
	`mm≠
(0, 
°©buf
.
°_size
, 
PROT_READ
, 
MAP_SHARED
,

32 
fdö
, 0)Ë=
MAP_FAILED
)

33 
	`îr_sys
("mmapÉrror for input");

35 i‡((
d°
 = 
	`mm≠
(0, 
°©buf
.
°_size
, 
PROT_READ
 | 
PROT_WRITE
,

36 
MAP_SHARED
, 
fdout
, 0)Ë=
MAP_FAILED
)

37 
	`îr_sys
("mmapÉrror for output");

39 
	`mem˝y
(
d°
, 
§c
, 
°©buf
.
°_size
);

40 
	`exô
(0);

41 
	}
}

	@advio/nonblockw.c

1 
	~"≠ue.h
"

2 
	~<î∫o.h
>

3 
	~<f˙é.h
>

5 
	gbuf
[500000];

8 
	$maö
()

10 
¡owrôe
, 
nwrôe
;

11 *
±r
;

13 
¡owrôe
 = 
	`ªad
(
STDIN_FILENO
, 
buf
, (buf));

14 
	`Ârötf
(
°dîr
, "ªad %d byãs\n", 
¡owrôe
);

16 
	`£t_Ê
(
STDOUT_FILENO
, 
O_NONBLOCK
);

18 
±r
 = 
buf
;

19 
¡owrôe
 > 0) {

20 
î∫o
 = 0;

21 
nwrôe
 = 
	`wrôe
(
STDOUT_FILENO
, 
±r
, 
¡owrôe
);

22 
	`Ârötf
(
°dîr
, "nwrôê%d,Éºnÿ%d\n", 
nwrôe
, 
î∫o
);

24 i‡(
nwrôe
 > 0) {

25 
±r
 +
nwrôe
;

26 
¡owrôe
 -
nwrôe
;

30 
	`˛r_Ê
(
STDOUT_FILENO
, 
O_NONBLOCK
);

32 
	`exô
(0);

33 
	}
}

	@advio/pendlock.c

1 
	~"≠ue.h
"

2 
	~<f˙é.h
>

3 
	~<î∫o.h
>

6 
	$sigöt
(
signo
)

8 
	}
}

11 
	$maö
()

13 
pid_t
 
pid1
, 
pid2
, 
pid3
;

14 
fd
;

16 
	`£tbuf
(
°dout
, 
NULL
);

17 
	`sig«l_öå
(
SIGINT
, 
sigöt
);

22 i‡((
fd
 = 
	`›í
("lockfûe", 
O_RDWR
|
O_CREAT
, 0666)) < 0)

23 
	`îr_sys
("can't open/createÜockfile");

28 i‡((
pid1
 = 
	`f‹k
()) < 0) {

29 
	`îr_sys
("fork failed");

30 } i‡(
pid1
 == 0) {

31 i‡(
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_RDLCK
, 0, 
SEEK_SET
, 0) < 0)

32 
	`îr_sys
("child 1: can'tÑead-lock file");

33 
	`¥ötf
("child 1: obtainedÑeadÜock on file\n");

34 
	`∑u£
();

35 
	`¥ötf
("child 1:ÉxitáfterÖause\n");

36 
	`exô
(0);

38 
	`¶ìp
(2);

44 i‡((
pid2
 = 
	`f‹k
()) < 0) {

45 
	`îr_sys
("fork failed");

46 } i‡(
pid2
 == 0) {

47 i‡(
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_RDLCK
, 0, 
SEEK_SET
, 0) < 0)

48 
	`îr_sys
("child 2: can'tÑead-lock file");

49 
	`¥ötf
("child 2: obtainedÑeadÜock on file\n");

50 
	`∑u£
();

51 
	`¥ötf
("child 2:ÉxitáfterÖause\n");

52 
	`exô
(0);

54 
	`¶ìp
(2);

61 i‡((
pid3
 = 
	`f‹k
()) < 0) {

62 
	`îr_sys
("fork failed");

63 } i‡(
pid3
 == 0) {

64 i‡(
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_WRLCK
, 0, 
SEEK_SET
, 0) < 0)

65 
	`¥ötf
("child 3: can't set writeÜock: %s\n",

66 
	`°ªº‹
(
î∫o
));

67 
	`¥ötf
("child 3áboutÅo block in write-lock...\n");

68 i‡(
	`lock_ªg
(
fd
, 
F_SETLKW
, 
F_WRLCK
, 0, 
SEEK_SET
, 0) < 0)

69 
	`îr_sys
("child 3: can't write-lock file");

70 
	`¥ötf
("child 3Ñeturnedánd got writeÜock????\n");

71 
	`∑u£
();

72 
	`¥ötf
("child 3:ÉxitáfterÖause\n");

73 
	`exô
(0);

75 
	`¶ìp
(2);

82 i‡(
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_RDLCK
, 0, 
SEEK_SET
, 0) < 0)

83 
	`¥ötf
("parent: can't setÑeadÜock: %s\n",

84 
	`°ªº‹
(
î∫o
));

86 
	`¥ötf
("parent: obtainedádditionalÑeadÜock while"

88 
	`¥ötf
("killing child 1...\n");

89 
	`kûl
(
pid1
, 
SIGINT
);

90 
	`¥ötf
("killing child 2...\n");

91 
	`kûl
(
pid2
, 
SIGINT
);

92 
	`¥ötf
("killing child 3...\n");

93 
	`kûl
(
pid3
, 
SIGINT
);

94 
	`exô
(0);

95 
	}
}

	@call/call.c

1 
	~"ˇŒ.h
"

2 
	~<sys/uio.h
>

9 
	$ˇŒ
(c⁄° *
¨gs
)

11 
csfd
, 
Àn
;

12 
iovec
 
iov
[2];

17 i‡((
csfd
 = 
	`˛i_c⁄n
(
CS_CALL
)) < 0)

18 
	`îr_sys
("cli_connÉrror");

20 
iov
[0].
iov_ba£
 = 
CL_CALL
 " ";

21 
iov
[0].
iov_Àn
 = 
	`°æí
(
CL_CALL
) + 1;

22 
iov
[1].
iov_ba£
 = (*Ë
¨gs
;

24 
iov
[1].
iov_Àn
 = 
	`°æí
(
¨gs
) + 1;

25 
Àn
 = 
iov
[0].
iov_Àn
 + iov[1].iov_len;

26 i‡(
	`wrôev
(
csfd
, &
iov
[0], 2Ë!
Àn
)

27 
	`îr_sys
("writevÉrror");

33 (
	`ªcv_fd
(
csfd
, 
wrôe
));

34 
	}
}

	@call/call.h

1 
	~"≠ue.h
"

2 
	~<î∫o.h
>

3 
	~<sys/time.h
>

5 
	#CS_CALL
 "/home/ßr/ˇŒd"

	)

6 
	#CL_CALL
 "ˇŒ"

	)

8 
esˇ≥c
;

9 *
§c
;

10 *
d°
;

12 
ˇŒ
(const *);

13 
d€sˇ≥
();

14 
lo›
();

15 
¥om±_ªad
(*, (*)(, **));

16 
	`put
();

17 
	`èke
();

18 
	`èke_put_¨gs
(, **);

	@call/escape.c

1 
	~"ˇŒ.h
"

11 
	$d€sˇ≥
(
ªmfd
)

13 
c
;

15 i‡(
	`ªad
(
STDIN_FILENO
, &
c
, 1) != 1)

16 
	`îr_sys
("readÉrror from stdin");

18 i‡(
c
 =
esˇ≥c
) {

19 (
esˇ≥c
);

20 } i‡(
c
 == '.') {

21 
	`wrôe
(
STDOUT_FILENO
, "~.\n\r", 4);

24 #ifdef 
VSUSP


25 } i‡(
c
 =
	`ây_ãrmios
()->
c_cc
[
VSUSP
]) {

26 
	`ây_ª£t
(
STDIN_FILENO
);

27 
	`kûl
(
	`gëpid
(), 
SIGTSTP
);

28 
	`ây_øw
(
STDIN_FILENO
);

32 } i‡(
c
 == '#') {

33 
	`tc£ndbªak
(
ªmfd
, 0);

35 } i‡(
c
 == 't') {

36 
	`èke
(
ªmfd
);

38 } i‡(
c
 == 'p') {

39 
	`put
(
ªmfd
);

43 (
c
);

44 
	}
}

	@call/loop.poll.c

1 
	~"ˇŒ.h
"

2 
	~<pﬁl.h
>

4 
	#BUFFSIZE
 512

	)

11 
	$lo›
(
ªmfd
)

13 
bﬁ
, 
n
, 
ƒód
;

14 
c
;

15 
buff
[
BUFFSIZE
];

16 
pﬁlfd
 
fds
[2];

21 
	`£tbuf
(
°dout
, 
NULL
);

22 
fds
[0].
fd
 = 
STDIN_FILENO
;

23 
fds
[0].
evíts
 = 
POLLIN
;

24 
fds
[1].
fd
 = 
ªmfd
;

25 
fds
[1].
evíts
 = 
POLLIN
;

28 i‡(
	`pﬁl
(
fds
, 2, -1) <= 0)

29 
	`îr_sys
("pollÉrror");

30 i‡(
fds
[0].
ªvíts
 & 
POLLIN
) {

31 i‡(
	`ªad
(
STDIN_FILENO
, &
c
, 1) != 1)

32 
	`îr_sys
("readÉrror from stdin");

33 i‡(
c
 =
esˇ≥c
 && 
bﬁ
) {

34 i‡((
n
 = 
	`d€sˇ≥
(
ªmfd
)) < 0)

36 i‡(
n
 == 0)

41 
c
 = 
n
;

43 i‡(
c
 == '\r' || c == '\n')

44 
bﬁ
 = 1;

46 
bﬁ
 = 0;

47 i‡(
	`wrôe
(
ªmfd
, &
c
, 1) != 1)

48 
	`îr_sys
("writeÉrror");

50 i‡(
fds
[0].
ªvíts
 & 
POLLHUP
)

52 i‡(
fds
[1].
ªvíts
 & 
POLLIN
) {

53 i‡((
ƒód
 = 
	`ªad
(
ªmfd
, 
buff
, 
BUFFSIZE
)) <= 0)

55 i‡(
	`wrôí
(
STDOUT_FILENO
, 
buff
, 
ƒód
) !=Çread)

56 
	`îr_sys
("writenÉrrorÅo stdout");

58 i‡(
fds
[1].
ªvíts
 & 
POLLHUP
)

61 
	}
}

	@call/main.c

1 
	~"ˇŒ.h
"

3 
	gesˇ≥c
 = '~';

4 *
	g§c
;

5 *
	gd°
;

7 
ußge
(*);

10 
	$maö
(
¨gc
, *
¨gv
[])

12 
c
, 
ªmfd
, 
debug
;

13 
¨gs
[
MAXLINE
];

15 
¨gs
[0] = 0;

16 
›ãº
 = 0;

17 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "des:o")Ë!
EOF
) {

18 
c
) {

20 
debug
 = 1;

21 
	`°rˇt
(
¨gs
, "-d ");

25 
	`°rˇt
(
¨gs
, "-e ");

29 
	`°rˇt
(
¨gs
, "-o ");

33 
	`°rˇt
(
¨gs
, "-s ");

34 
	`°rˇt
(
¨gs
, 
›èrg
);

35 
	`°rˇt
(
¨gs
, " ");

39 
	`ußge
("unrecognized option");

42 i‡(
›töd
 < 
¨gc
)

43 
	`°rˇt
(
¨gs
, 
¨gv
[
›töd
]);

45 
	`ußge
("missing <hostname>Åo call");

47 i‡((
ªmfd
 = 
	`ˇŒ
(
¨gs
)) < 0)

48 
	`exô
(1);

49 
	`¥ötf
("Connected\n");

50 i‡(
	`ây_øw
(
STDIN_FILENO
) < 0)

51 
	`îr_sys
("tty_rawÉrror");

52 i‡(
	`©exô
(
ây_©exô
) < 0)

53 
	`îr_sys
("atexitÉrror");

55 
	`lo›
(
ªmfd
);

57 
	`¥ötf
("Disconnected\n\r");

58 
	`exô
(0);

59 
	}
}

62 
	$ußge
(*
msg
)

64 
	`îr_quô
("%s\nußge: cÆ»-d -ê-ÿ-s<•ìd> <ho°«me>", 
msg
);

65 
	}
}

	@call/put.c

1 
	~"ˇŒ.h
"

7 
	$put
(
ªmfd
)

9 
i
, 
n
, 
löe˙t
;

10 
c
, 
cmd
[
MAXLINE
];

11 
FILE
 *
Âö
;

13 i‡(
	`¥om±_ªad
("~[put] ", 
èke_put_¨gs
) < 0) {

14 
	`¥ötf
("usage: [put] <sourcefile> <destfile>\n\r");

21 i‡((
Âö
 = 
	`f›í
(
§c
, "r")Ë=
NULL
) {

22 
	`îr_ªt
("ˇn'à›í %†f‹Ñódög", 
§c
);

23 
	`putc
('\r', 
°dîr
);

24 
	`fÊush
(
°dîr
);

31 
	`•rötf
(
cmd
, "°ty -echo; c© >%s; sâyÉcho\r", 
d°
);

32 
n
 = 
	`°æí
(
cmd
);

33 i‡(
	`wrôe
(
ªmfd
, 
cmd
, 
n
) !=Ç)

34 
	`îr_sys
("writeÉrror");

35 
	`tcdøö
(
ªmfd
);

36 
	`¶ìp
(4);

41 
löe˙t
 = 0;

43 i‡((
i
 = 
	`gëc
(
Âö
)Ë=
EOF
)

45 
c
 = 
i
;

46 i‡(
	`wrôe
(
ªmfd
, &
c
, 1) != 1)

48 i‡(
c
 == '\n')

49 
	`¥ötf
("\r%d", ++
löe˙t
);

55 
c
 = 
	`ây_ãrmios
()->
c_cc
[
VEOF
];

56 
	`wrôe
(
ªmfd
, &
c
, 1);

57 
	`tcdøö
(
ªmfd
);

58 
	`¶ìp
(2);

59 
	`tcÊush
(
ªmfd
, 
TCIOFLUSH
);

60 
c
 = '\n';

61 
	`wrôe
(
ªmfd
, &
c
, 1);

63 i‡(
	`„º‹
(
Âö
)) {

64 
	`îr_msg
("readÉrror ofÜocal file");

65 
	`putc
('\r', 
°dîr
);

66 
	`fÊush
(
°dîr
);

68 
	`f˛o£
(
Âö
);

69 
	}
}

	@call/take.c

1 
	~"ˇŒ.h
"

3 
	#CTRLA
 001

	)

5 
ªm_ªad
();

6 
	gªm_buf
[
MAXLINE
];

7 *
	gªm_±r
;

8 
	gªm_˙t
 = 0;

14 
	$èke
(
ªmfd
)

16 
n
, 
löe˙t
;

17 
c
;

18 
cmd
[
MAXLINE
];

19 
FILE
 *
Âout
;

21 i‡(
	`¥om±_ªad
("~[èke] ", 
èke_put_¨gs
) < 0) {

22 
	`¥ötf
("usage: [take] <sourcefile> <destfile>\n\r");

29 i‡((
Âout
 = 
	`f›í
(
d°
, "w")Ë=
NULL
) {

30 
	`îr_ªt
("ˇn'à›í %†f‹ wrôög", 
d°
);

31 
	`putc
('\r', 
°dîr
);

32 
	`fÊush
(
°dîr
);

39 
	`•rötf
(
cmd
, "ˇà%s;Échÿ%c\r", 
§c
, 
CTRLA
);

40 
n
 = 
	`°æí
(
cmd
);

41 i‡(
	`wrôe
(
ªmfd
, 
cmd
, 
n
) !=Ç)

42 
	`îr_sys
("writeÉrror");

47 
ªm_˙t
 = 0;

49 i‡((
c
 = 
	`ªm_ªad
(
ªmfd
)) == 0)

51 i‡(
c
 == '\n')

58 
löe˙t
 = 0;

60 i‡((
c
 = 
	`ªm_ªad
(
ªmfd
)) == 0)

62 i‡(
c
 =
CTRLA
)

64 i‡(
c
 == '\r')

66 i‡(
c
 == '\n')

67 
	`¥ötf
("\r%d", ++
löe˙t
);

68 i‡(
	`putc
(
c
, 
Âout
Ë=
EOF
)

71 i‡(
	`„º‹
(
Âout
Ë|| 
	`f˛o£
(ÂoutË=
EOF
) {

72 
	`îr_msg
("outputÉrrorÅoÜocal file");

73 
	`putc
('\r', 
°dîr
);

74 
	`fÊush
(
°dîr
);

76 
c
 = '\n';

77 
	`wrôe
(
ªmfd
, &
c
, 1);

78 
	}
}

85 
	$ªm_ªad
(
ªmfd
)

87 i‡(
ªm_˙t
 <= 0) {

88 i‡((
ªm_˙t
 = 
	`ªad
(
ªmfd
, 
ªm_buf
, 
MAXLINE
)) < 0)

89 
	`îr_sys
("readÉrror");

90 i‡(
ªm_˙t
 == 0)

92 
ªm_±r
 = 
ªm_buf
;

94 
ªm_˙t
--;

95 (*
ªm_±r
++ & 0177);

96 
	}
}

	@call/takeput.c

1 
	~"ˇŒ.h
"

7 
	$èke_put_¨gs
(
¨gc
, **
¨gv
)

9 i‡(
¨gc
 == 1) {

10 
§c
 = 
d°
 = 
¨gv
[0];

12 } i‡(
¨gc
 == 2) {

13 
§c
 = 
¨gv
[0];

14 
d°
 = 
¨gv
[1];

18 
	}
}

23 
	gcmd¨gs
[
MAXLINE
];

31 
¥om±_ªad
(*
¥om±
, (*
u£rfunc
)(, **))

33 
n
;

34 
c
, *
±r
;

36 
	`ây_ª£t
(
STDIN_FILENO
);

38 
n
 = 
	`°æí
(
¥om±
);

39 i‡(
	`wrôe
(
STDOUT_FILENO
, 
¥om±
, 
n
) !=Ç)

40 
	`îr_sys
("writeÉrror");

42 
±r
 = 
cmd¨gs
;

44 i‡((
n
 = 
	`ªad
(
STDIN_FILENO
, &
c
, 1)) < 0)

45 
	`îr_sys
("readÉrror");

46 i‡(
n
 == 0)

48 i‡(
c
 == '\n')

50 i‡(
±r
 < &
cmd¨gs
[
MAXLINE
-2])

51 *
±r
++ = 
c
;

53 *
±r
 = 0;

55 
	`ây_øw
(
STDIN_FILENO
);

60 (
	`buf_¨gs
(
cmd¨gs
, 
u£rfunc
));

61 
	}
}

	@calld/calld.h

1 
	~"≠ue.h
"

2 
	~<î∫o.h
>

4 
	#CS_CALL
 "/home/ßr/ˇŒd"

	)

5 
	#CL_CALL
 "ˇŒ"

	)

6 
	#MAXSYSNAME
 256

	)

7 
	#MAXSPEEDSTR
 256

	)

13 
	#NALLOC
 10

	)

15 
	#WHITE
 " \t\n"

	)

16 
	#SYSTEMS
 "./Sy°ems"

	)

17 
	#DEVICES
 "./Devi˚s"

	)

18 
	#DIALERS
 "./DüÀrs"

	)

20 
˛ifd
;

21 
Debug
;

22 
îrmsg
[];

23 *
•ìd
;

24 *
sy¢ame
;

25 
uid_t
 
uid
;

26 vﬁ©ûê
sig_©omic_t
 
chld_Êag
;

27 
	e∑rôy
 { 
NONE
, 
EVEN
, 
ODD
 } 
∑rôy
;

30 
	mfd
;

31 
pid_t
 
	mpid
;

32 
uid_t
 
	muid
;

33 
	mchûdd⁄e
;

35 
	msys·ñl
;

36 
	mfound⁄e
;

37 
	mDebug
;

38 
∑rôy
 
	m∑rôy
;

39 
	m•ìd
[
MAXSPEEDSTR
];

40 
	msy¢ame
[
MAXSYSNAME
];

41 } 
	tClõ¡
;

44 
Clõ¡
 *
˛õ¡
;

45 
˛õ¡_size
;

48 *
	m«me
;

49 *
	mtime
;

50 *
	mty≥
;

51 *
	m˛ass
;

52 *
	mph⁄e
;

53 *
	mlogö
;

54 } 
	tSy°ems
;

57 *
	mty≥
;

58 *
	mlöe
;

59 *
	mlöe2
;

60 *
	m˛ass
;

61 *
	mdüÀr
;

62 } 
	tDevi˚s
;

65 *
	mdüÀr
;

66 *
	msub
;

67 *
	mexp£nd
;

68 } 
	tDüÀrs
;

70 
Sy°ems
 
sy°ems
;

71 
Devi˚s
 
devi˚s
;

72 
DüÀrs
 
düÀrs
;

74 
chûd_dül
(
Clõ¡
 *);

75 
˛i_¨gs
(, **);

76 
˛õ¡_add
(, 
uid_t
);

77 
˛õ¡_dñ
();

78 
˛õ¡_sigchld
(
pid_t
, );

79 
lo›
();

80 *
˘l_°r
();

81 
dev_föd
(
Devi˚s
 *, c⁄° 
Sy°ems
 *);

82 
dev_√xt
(
Devi˚s
 *);

83 
dev_ªw
();

84 
dül_föd
(
DüÀrs
 *, c⁄° 
Devi˚s
 *);

85 
dül_√xt
(
DüÀrs
 *);

86 
dül_ªw
();

87 
ex≥˘_°r
(, *);

88 
ªque°
(
Clõ¡
 *);

89 
£nd_°r
(, *, *, );

90 
sig_chld
();

91 
sys_√xt
(
Sy°ems
 *);

92 
sys_po¢
();

93 
sys_ªw
();

94 
ây_›í
(*, *, 
∑rôy
, );

95 
ây_dül
(, *, *, *, *);

96 
pid_t
 
is_locked
(*);

97 
lock_£t
(*, 
pid_t
);

98 
lock_ªl
(
pid_t
);

99 
DEBUG
(*, ...);

100 
DEBUG_NONL
(*, ...);

	@calld/childdial.c

1 
	~"ˇŒd.h
"

14 
	$chûd_dül
(
Clõ¡
 *
˛ùå
)

16 
fd
, 
n
;

18 
Debug
 = 
˛ùå
->Debug;

19 
	`DEBUG
("chûd,Öid %d", 
	`gëpid
());

21 i‡(
	`°rcmp
(
devi˚s
.
düÀr
, "direct") == 0) {

22 
fd
 = 
	`ây_›í
(
sy°ems
.
˛ass
, 
devi˚s
.
löe
, 
˛ùå
->
∑rôy
, 0);

23 i‡(
fd
 < 0)

24 
dõ
;

26 i‡(
	`dül_föd
(&
düÀrs
, &
devi˚s
) < 0)

27 
dõ
;

28 
fd
 = 
	`ây_›í
(
sy°ems
.
˛ass
, 
devi˚s
.
löe
, 
˛ùå
->
∑rôy
, 1);

29 i‡(
fd
 < 0)

30 
dõ
;

31 i‡(
	`ây_dül
(
fd
, 
sy°ems
.
ph⁄e
, 
düÀrs
.
düÀr
,

32 
düÀrs
.
sub
, düÀrs.
exp£nd
) < 0)

33 
dõ
;

35 
	`DEBUG
("done");

40 i‡(
	`£nd_fd
(
˛ùå
->
fd
, fd) < 0)

41 
	`log_sys
("send_fdÉrror");

42 
	`exô
(0);

44 
dõ
:

51 
n
 = 
	`°æí
(
îrmsg
);

52 i‡(
	`wrôí
(
˛ùå
->
fd
, 
îrmsg
, 
n
) !=Ç)

53 
	`log_sys
("writenÉrror");

54 
	`exô
(1);

55 
	}
}

	@calld/cliargs.c

1 
	~"ˇŒd.h
"

9 
	$˛i_¨gs
(
¨gc
, **
¨gv
)

11 
c
;

13 i‡(
¨gc
 < 2 || 
	`°rcmp
(
¨gv
[0], 
CL_CALL
) != 0) {

14 
	`°r˝y
(
îrmsg
, "usage: call <options> <hostname>");

17 
Debug
 = 0;

18 
∑rôy
 = 
NONE
;

19 
•ìd
 = 
NULL
;

20 
›ãº
 = 0;

21 
›töd
 = 1;

22 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "des:o")Ë!
EOF
) {

23 
c
) {

25 
Debug
 = 1;

29 
∑rôy
 = 
EVEN
;

33 
∑rôy
 = 
ODD
;

37 
•ìd
 = 
›èrg
;

41 
	`•rötf
(
îrmsg
, "uƒecognized o±i⁄: -%c\n", 
›t›t
);

45 i‡(
›töd
 >
¨gc
) {

46 
	`•rötf
(
îrmsg
, "missing <hostname>Åo call\n");

49 
sy¢ame
 = 
¨gv
[
›töd
];

51 
	}
}

	@calld/client.c

1 
	~"ˇŒd.h
"

4 
	$˛õ¡_Æloc
()

6 
i
;

8 i‡(
˛õ¡
 =
NULL
)

9 
˛õ¡
 = 
	`mÆloc
(
NALLOC
 * (
Clõ¡
));

11 
˛õ¡
 = 
	`ªÆloc
(client,

12 (
˛õ¡_size
 + 
NALLOC
Ë* (
Clõ¡
));

13 i‡(
˛õ¡
 =
NULL
)

14 
	`îr_sys
("can'tálloc for clientárray");

19 
i
 = 
˛õ¡_size
; i < clõ¡_sizê+ 
NALLOC
; i++)

20 
˛õ¡
[
i
].
fd
 = -1;

21 
˛õ¡_size
 +
NALLOC
;

22 
	}
}

28 
	$˛õ¡_add
(
fd
, 
uid_t
 
uid
)

30 
i
;

32 i‡(
˛õ¡
 =
NULL
)

33 
	`˛õ¡_Æloc
();

34 
agaö
:

35 
i
 = 0; i < 
˛õ¡_size
; i++) {

36 i‡(
˛õ¡
[
i
].
fd
 == -1) {

37 
˛õ¡
[
i
].
fd
 = fd;

38 
˛õ¡
[
i
].
uid
 = uid;

39 (
i
);

46 
	`˛õ¡_Æloc
();

47 
agaö
;

48 
	}
}

54 
	$˛õ¡_dñ
(
fd
)

56 
i
;

58 
i
 = 0; i < 
˛õ¡_size
; i++) {

59 i‡(
˛õ¡
[
i
].
fd
 == fd) {

60 
˛õ¡
[
i
].
fd
 = -1;

64 
	`log_quô
("ˇn'àföd clõ¡É¡ry f‹ fd %d", 
fd
);

65 
	}
}

73 
	$˛õ¡_sigchld
(
pid_t
 
pid
, 
°©
)

75 
i
;

77 
i
 = 0; i < 
˛õ¡_size
; i++) {

78 i‡(
˛õ¡
[
i
].
pid
 ==Öid) {

79 
˛õ¡
[
i
].
chûdd⁄e
 = 
°©
;

83 
	`log_quô
("ˇn'àföd clõ¡É¡ry f‹Öid %d", 
pid
);

84 
	}
}

	@calld/ctlstr.c

1 
	~"ˇŒd.h
"

8 
	$˘l_°r
(
c
)

10 
ãmp°r
[6];

12 
c
 &= 255;

13 i‡(
c
 == 0)

15 i‡(
c
 < 040)

16 
	`•rötf
(
ãmp°r
, "^%c", 
c
 + 'A' - 1);

17 i‡(
c
 == 0177)

19 i‡(
c
 > 0177)

20 
	`•rötf
(
ãmp°r
, "\\%03o", 
c
);

22 
	`•rötf
(
ãmp°r
, "%c", 
c
);

23 (
ãmp°r
);

24 
	}
}

	@calld/debug.c

1 
	~"ˇŒd.h
"

2 
	~<°d¨g.h
>

8 
	$DEBUG
(*
fmt
, ...)

10 
va_li°
 
¨gs
;

11 
löe
[
MAXLINE
];

12 
n
;

14 i‡(
Debug
 == 0)

16 
	`va_°¨t
(
¨gs
, 
fmt
);

17 
	`v•rötf
(
löe
, 
fmt
, 
¨gs
);

18 
	`°rˇt
(
löe
, "\n");

19 
	`va_íd
(
¨gs
);

20 
n
 = 
	`°æí
(
löe
);

21 i‡(
	`wrôí
(
˛ifd
, 
löe
, 
n
) !=Ç)

22 
	`log_sys
("writenÉrror");

23 
	}
}

26 
	$DEBUG_NONL
(*
fmt
, ...)

28 
va_li°
 
¨gs
;

29 
löe
[
MAXLINE
];

30 
n
;

32 i‡(
Debug
 == 0)

34 
	`va_°¨t
(
¨gs
, 
fmt
);

35 
	`v•rötf
(
löe
, 
fmt
, 
¨gs
);

36 
	`va_íd
(
¨gs
);

37 
n
 = 
	`°æí
(
löe
);

38 i‡(
	`wrôí
(
˛ifd
, 
löe
, 
n
) !=Ç)

39 
	`log_sys
("writenÉrror");

40 
	}
}

	@calld/devfile.c

1 
	~"ˇŒd.h
"

3 
FILE
 *
	gÂdev
 = 
NULL
;

4 
	gdevlöío
;

5 
	gdevlöe
[
MAXLINE
];

12 
	$dev_√xt
(
Devi˚s
 *
dev±r
)

14 i‡(
Âdev
 =
NULL
) {

15 i‡((
Âdev
 = 
	`f›í
(
DEVICES
, "r")Ë=
NULL
)

16 
	`log_sys
("ˇn'à›í %s", 
DEVICES
);

17 
devlöío
 = 0;

20 
agaö
:

21 i‡(
	`fgës
(
devlöe
, 
MAXLINE
, 
Âdev
Ë=
NULL
)

23 
devlöío
++;

24 i‡((
dev±r
->
ty≥
 = 
	`°πok
(
devlöe
, 
WHITE
)Ë=
NULL
) {

25 i‡(
devlöe
[0] == '\n')

26 
agaö
;

27 
	`log_quô
("missing `type' in Devices file,Üine %d",

28 
devlöío
);

30 i‡(
dev±r
->
ty≥
[0] == '#')

31 
agaö
;

32 i‡((
dev±r
->
löe
 = 
	`°πok
(
NULL
, 
WHITE
)) == NULL)

33 
	`log_quô
("missing `line' in Devices file,Üine %d",

34 
devlöío
);

35 i‡((
dev±r
->
löe2
 = 
	`°πok
(
NULL
, 
WHITE
)) == NULL)

36 
	`log_quô
("missing `line2' in Devices file,Üine %d",

37 
devlöío
);

38 i‡((
dev±r
->
˛ass
 = 
	`°πok
(
NULL
, 
WHITE
)) == NULL)

39 
	`log_quô
("missing `class' in Devices file,Üine %d",

40 
devlöío
);

41 i‡((
dev±r
->
düÀr
 = 
	`°πok
(
NULL
, 
WHITE
)) == NULL)

42 
	`log_quô
("missing `dialer' in Devices file,Üine %d",

43 
devlöío
);

46 
	}
}

49 
	$dev_ªw
()

51 i‡(
Âdev
 !
NULL
)

52 
	`ªwöd
(
Âdev
);

53 
devlöío
 = 0;

54 
	}
}

60 
	$dev_föd
(
Devi˚s
 *
dev±r
, c⁄° 
Sy°ems
 *
sy•å
)

62 
	`dev_ªw
();

63 
	`dev_√xt
(
dev±r
) >= 0) {

64 i‡(
	`°rcmp
(
sy•å
->
ty≥
, 
dev±r
->type) == 0 &&

65 
	`°rcmp
(
sy•å
->
˛ass
, 
dev±r
->class) == 0)

68 
	`•rötf
(
îrmsg
, "devi˚ `%s'/`%s'ÇŸ found\n", 
sy•å
->
ty≥
,

69 
sy•å
->
˛ass
);

71 
	}
}

	@calld/dialfile.c

1 
	~"ˇŒd.h
"

3 
FILE
 *
	gÂdül
 = 
NULL
;

4 
	gdüŒöío
;

5 
	gdüŒöe
[
MAXLINE
];

12 
	$dül_√xt
(
DüÀrs
 *
düÕå
)

14 i‡(
Âdül
 =
NULL
) {

15 i‡((
Âdül
 = 
	`f›í
(
DIALERS
, "r")Ë=
NULL
)

16 
	`log_sys
("ˇn'à›í %s", 
DIALERS
);

17 
düŒöío
 = 0;

20 
agaö
:

21 i‡(
	`fgës
(
düŒöe
, 
MAXLINE
, 
Âdül
Ë=
NULL
)

23 
düŒöío
++;

24 i‡((
düÕå
->
düÀr
 = 
	`°πok
(
düŒöe
, 
WHITE
)Ë=
NULL
) {

25 i‡(
düŒöe
[0] == '\n')

26 
agaö
;

27 
	`log_quô
("missing `dialer' in Dialers file,Üine %d",

28 
düŒöío
);

30 i‡(
düÕå
->
düÀr
[0] == '#')

31 
agaö
;

32 i‡((
düÕå
->
sub
 = 
	`°πok
(
NULL
, 
WHITE
)) == NULL)

33 
	`log_quô
("missing `sub' in Dialers file,Üine %d",

34 
düŒöío
);

35 i‡((
düÕå
->
exp£nd
 = 
	`°πok
(
NULL
, "\n")) == NULL)

36 
	`log_quô
("missing `expsend' in Dialers file,Üine %d",

37 
düŒöío
);

40 
	}
}

43 
	$dül_ªw
()

45 i‡(
Âdül
 !
NULL
)

46 
	`ªwöd
(
Âdül
);

47 
düŒöío
 = 0;

48 
	}
}

54 
	$dül_föd
(
DüÀrs
 *
düÕå
, c⁄° 
Devi˚s
 *
dev±r
)

56 
	`dül_ªw
();

57 
	`dül_√xt
(
düÕå
) >= 0) {

58 i‡(
	`°rcmp
(
düÕå
->
düÀr
, 
dev±r
->dialer) == 0)

61 
	`•rötf
(
îrmsg
, "düÀ∏`%s'ÇŸ found\n", 
düÕå
->
düÀr
);

63 
	}
}

	@calld/expectstr.c

1 
	~"ˇŒd.h
"

3 
	#EXPALRM
 45

	)

5 
	gex∑œrm
 = 
EXPALRM
;

6 vﬁ©ûê
sig_©omic_t
 
	gˇught_Ærm
;

8 
size_t


9 
	$exp_ªad
(
fd
, *
buf
)

11 i‡(
ˇught_Ærm
) {

12 
	`DEBUG
("\nreadÅimeout");

15 i‡(
	`ªad
(
fd
, 
buf
, 1) == 1) {

16 
	`DEBUG_NONL
("%s", 
	`˘l_°r
(*
buf
));

19 i‡(
î∫o
 =
EINTR
 && 
ˇught_Ærm
)

20 
	`DEBUG
("\nreadÅimeout");

22 
	`log_sys
("readÉrror");

24 
	}
}

27 
	$sig_Ærm
(
signo
)

29 
ˇught_Ærm
 = 1;

30 
	}
}

33 
	$ex≥˘_°r
(
fd
, *
±r
)

35 
exp°r
[
MAXLINE
], 
öbuf
[MAXLINE];

36 
c
;

37 *
§c
, *
d°
, *
ö±r
, *
cmµå
;

38 
i
, 
m©chÀn
;

40 i‡(
	`°rcmp
(
±r
, "\"\"") == 0)

41 
ªtu∫ok
;

46 
§c
 = 
±r
, 
d°
 = 
exp°r
; (
c
 = *src++) != 0; ) {

47 i‡(
c
 == '\\') {

48 i‡(*
§c
 == 0) {

49 
	`•rötf
(
îrmsg
, "övÆidÉx≥˘ såög: %s\n", 
±r
);

52 
c
 = *
§c
++;

53 
c
) {

55 
c
 = '\r';

59 
c
 = ' ';

64 
	`•rötf
(
îrmsg
, "unknownÉxpectÉscape char: \\%s\n",

65 
	`˘l_°r
(
c
));

69 *
d°
++ = 
c
;

71 *
d°
 = 0;

72 
m©chÀn
 = 
	`°æí
(
exp°r
);

73 i‡(
	`sig«l
(
SIGALRM
, 
sig_Ærm
Ë=
SIG_ERR
)

74 
	`log_quô
("signalÉrror");

75 
ˇught_Ærm
 = 0;

77 
	`Æ¨m
(
ex∑œrm
);

79 i‡(
	`exp_ªad
(
fd
, &
c
) < 0)

81 } 
c
 !
exp°r
[0]);

82 
cmµå
 = 
ö±r
 = 
öbuf
;

83 *
ö±r
 = 
c
;

84 
i
 = 1; i < 
m©chÀn
; i++) {

85 
ö±r
++;

86 i‡(
	`exp_ªad
(
fd
, 
ö±r
) < 0)

90 i‡(
	`°∫cmp
(
cmµå
, 
exp°r
, 
m©chÀn
) == 0)

92 
ö±r
++;

93 i‡(
	`exp_ªad
(
fd
, 
ö±r
) < 0)

95 
cmµå
++;

98 
ªtu∫ok
:

99 
	`Æ¨m
(0);

100 
	`DEBUG
("\nexpect: got it");

102 
	}
}

	@calld/lock.c

1 
	~"ˇŒd.h
"

4 *
	mlöe
;

6 
pid_t
 
	mpid
;

8 } 
	tLock
;

9 
Lock
 *
	glock
 = 
NULL
;

10 
	glock_size
;

11 
	g∆ocks
;

19 
Lock
 *

20 
	$föd_löe
(*
löe
)

22 
i
;

23 
Lock
 *
Õå
;

25 
i
 = 0; i < 
∆ocks
; i++) {

26 i‡(
	`°rcmp
(
löe
, 
lock
[
i
].line) == 0)

27 (&
lock
[
i
]);

34 i‡(
∆ocks
 >
lock_size
) {

35 i‡(
lock
 =
NULL
)

36 
lock
 = 
	`mÆloc
(
NALLOC
 * (
Lock
));

38 
lock
 = 
	`ªÆloc
÷ock, (
lock_size
 + 
NALLOC
Ë* (
Lock
));

39 i‡(
lock
 =
NULL
)

40 
	`îr_sys
("can'tálloc forÜockárray");

41 
lock_size
 +
NALLOC
;

44 
Õå
 = &
lock
[
∆ocks
++];

45 i‡((
Õå
->
löe
 = 
	`mÆloc
(
	`°æí
÷öeË+ 1)Ë=
NULL
)

46 
	`log_sys
("mallocÉrror");

47 
	`°r˝y
(
Õå
->
löe
,Üine);

48 
Õå
->
pid
 = 0;

49 (
Õå
);

50 
	}
}

53 
	$lock_£t
(*
löe
, 
pid_t
 
pid
)

55 
Lock
 *
Õå
;

57 
	`log_msg
("lockög %†f‹Öid %d", 
löe
, 
pid
);

58 
Õå
 = 
	`föd_löe
(
löe
);

59 
Õå
->
pid
 =Öid;

60 
	}
}

63 
	$lock_ªl
(
pid_t
 
pid
)

65 
Lock
 *
Õå
;

67 
Õå
 = &
lock
[0];Ü±∏< &lock[
∆ocks
];Üptr++) {

68 i‡(
Õå
->
pid
 ==Öid) {

69 
	`log_msg
("u∆ockög %†f‹Öid %d", 
Õå
->
löe
, 
pid
);

70 
Õå
->
pid
 = 0;

74 
	`log_msg
("ˇn'àfödÜock f‹Öid = %d", 
pid
);

75 
	}
}

77 
pid_t


78 
	$is_locked
(*
löe
)

80 (
	`föd_löe
(
löe
)->
pid
);

81 
	}
}

	@calld/loop.c

1 
	~"ˇŒd.h
"

2 
	~<î∫o.h
>

4 
˛i_d⁄e
();

5 
chûd_d⁄e
();

11 
fd_£t
 
	gÆl£t
;

14 
	$lo›
()

16 
i
, 
n
, 
maxfd
, 
maxi
, 
li°ífd
, 
ƒód
;

17 
buf
[
MAXLINE
];

18 
Clõ¡
 *
˛ùå
;

19 
uid_t
 
uid
;

20 
fd_£t
 
r£t
;

22 i‡(
	`sig«l_öå
(
SIGCHLD
, 
sig_chld
Ë=
SIG_ERR
)

23 
	`log_sys
("signalÉrror");

28 i‡((
li°ífd
 = 
	`£rv_li°í
(
CS_CALL
)) < 0)

29 
	`log_sys
("serv_listenÉrror");

31 
	`FD_ZERO
(&
Æl£t
);

32 
	`FD_SET
(
li°ífd
, &
Æl£t
);

33 
maxfd
 = 
li°ífd
;

34 
maxi
 = -1;

37 i‡(
chld_Êag
)

38 
	`chûd_d⁄e
(
maxi
);

39 
r£t
 = 
Æl£t
;

40 i‡((
n
 = 
	`£À˘
(
maxfd
 + 1, &
r£t
, 
NULL
, NULL, NULL)) < 0) {

41 i‡(
î∫o
 =
EINTR
) {

45 
	`chûd_d⁄e
(
maxi
);

48 
	`log_sys
("selectÉrror");

52 i‡(
	`FD_ISSET
(
li°ífd
, &
r£t
)) {

56 i‡((
˛ifd
 = 
	`£rv_ac˚±
(
li°ífd
, &
uid
)) < 0)

57 
	`log_sys
("£rv_ac˚±Éº‹: %d", 
˛ifd
);

58 
i
 = 
	`˛õ¡_add
(
˛ifd
, 
uid
);

59 
	`FD_SET
(
˛ifd
, &
Æl£t
);

60 i‡(
˛ifd
 > 
maxfd
)

61 
maxfd
 = 
˛ifd
;

62 i‡(
i
 > 
maxi
)

63 
maxi
 = 
i
;

64 
	`log_msg
("√w c⁄√˘i⁄: uid %d, fd %d", 
uid
, 
˛ifd
);

72 
˛ùå
 = &
˛õ¡
[0]; clùå <&˛õ¡[
maxi
]; cliptr++) {

73 i‡((
˛ifd
 = 
˛ùå
->
fd
) < 0)

75 i‡(
	`FD_ISSET
(
˛ifd
, &
r£t
)) {

79 i‡((
ƒód
 = 
	`ªad
(
˛ifd
, 
buf
, 
MAXLINE
)) < 0) {

80 
	`log_sys
("ªadÉº‹ o¿fd %d", 
˛ifd
);

81 } i‡(
ƒód
 == 0) {

87 
	`log_msg
("closed: uid %d, fd %d",

88 
˛ùå
->
uid
, 
˛ifd
);

89 
	`lock_ªl
(
˛ùå
->
pid
);

90 
	`˛i_d⁄e
(
˛ifd
);

98 i‡(
buf
[
ƒód
-1] != 0) {

99 
	`log_quô
("request from uid %dÇotÇullÅerminated:"

100 " %*.*s", 
uid
, 
ƒód
,Çªad, 
buf
);

101 
	`˛i_d⁄e
(
˛ifd
);

104 
	`log_msg
("°¨tög: %s, from uid %d", 
buf
, 
uid
);

111 i‡(
	`buf_¨gs
(
buf
, 
˛i_¨gs
) < 0)

112 
	`log_quô
("comm™dÜöêîr‹: %s", 
buf
);

113 
˛ùå
->
Debug
 = Debug;

114 
˛ùå
->
∑rôy
 =Öarity;

115 
	`°r˝y
(
˛ùå
->
sy¢ame
, sysname);

116 
	`°r˝y
(
˛ùå
->
•ìd
, (•ìd =
NULL
) ? "" : speed);

117 
˛ùå
->
chûdd⁄e
 = 0;

118 
˛ùå
->
sys·ñl
 = 0;

119 
˛ùå
->
found⁄e
 = 0;

121 i‡(
	`ªque°
(
˛ùå
) < 0) {

125 i‡(
	`£nd_îr
(
˛ùå
->
fd
, -1, 
îrmsg
) < 0)

126 
	`log_sys
("send_errÉrror");

127 
	`˛i_d⁄e
(
˛ifd
);

138 
	}
}

146 
	$chûd_d⁄e
(
maxi
)

148 
Clõ¡
 *
˛ùå
;

150 
agaö
:

151 
chld_Êag
 = 0;

152 
˛ùå
 = &
˛õ¡
[0]; clùå <&˛õ¡[
maxi
]; cliptr++) {

153 i‡((
˛ifd
 = 
˛ùå
->
fd
) < 0)

155 i‡(
˛ùå
->
chûdd⁄e
) {

156 
	`log_msg
("child done:Öid %d, status %d",

157 
˛ùå
->
pid
, clùå->
chûdd⁄e
-1);

164 i‡(
˛ùå
->
chûdd⁄e
 == 1) {

165 
˛ùå
->
chûdd⁄e
 = 0;

173 
˛ùå
->
chûdd⁄e
 = 0;

174 
	`lock_ªl
(
˛ùå
->
pid
);

175 i‡(
	`ªque°
(
˛ùå
) < 0) {

179 i‡(
	`£nd_îr
(
˛ùå
->
fd
, -1, 
îrmsg
) < 0)

180 
	`log_sys
("send_errÉrror");

181 
	`˛i_d⁄e
(
˛ifd
);

189 i‡(
chld_Êag
)

190 
agaö
;

191 
	}
}

197 
	$˛i_d⁄e
(
˛ifd
)

199 
	`˛õ¡_dñ
(
˛ifd
);

200 
	`FD_CLR
(
˛ifd
, &
Æl£t
);

201 
	`˛o£
(
˛ifd
);

202 
	}
}

	@calld/main.c

1 
	~"ˇŒd.h
"

2 
	~<sy¶og.h
>

4 
	g˛ifd
, 
	glog_to_°dîr
, 
	g˛õ¡_size
;

5 
	gDebug
;

6 
	gîrmsg
[
MAXLINE
];

7 *
	g•ìd
, *
	gsy¢ame
;

8 
uid_t
 
	guid
;

9 
Clõ¡
 *
	g˛õ¡
 = 
NULL
;

10 
Sy°ems
 
	gsy°ems
;

11 
Devi˚s
 
	gdevi˚s
;

12 
DüÀrs
 
	gdüÀrs
;

13 vﬁ©ûê
sig_©omic_t
 
	gchld_Êag
;

14 
∑rôy
 
	g∑rôy
 = 
NONE
;

17 
	$maö
(
¨gc
, *
¨gv
[])

19 
c
;

21 
	`log_›í
("ˇŒd", 
LOG_PID
, 
LOG_USER
);

23 
›ãº
 = 0;

24 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "d")Ë!
EOF
) {

25 
c
) {

27 
log_to_°dîr
 = 1;

31 
	`log_quô
("uƒecognized o±i⁄: -%c", 
›t›t
);

35 i‡(
log_to_°dîr
 == 0)

36 
	`d´m⁄ize
("calld");

38 
	`lo›
();

39 
	}
}

	@calld/request.c

1 
	~"ˇŒd.h
"

4 
	$ªque°
(
Clõ¡
 *
˛ùå
)

6 
pid_t
 
pid
;

11 
îrmsg
[0] = 0;

12 
	`sys_po¢
(
˛ùå
->
sys·ñl
);

13 (
˛ùå
->
sys·ñl
 = 
	`sys_√xt
(&
sy°ems
)) >= 0) {

14 i‡(
	`°rcmp
(
˛ùå
->
sy¢ame
, 
sy°ems
.
«me
) == 0) {

19 i‡(
˛ùå
->
•ìd
[0] != 0 &&

20 
	`°rcmp
(
˛ùå
->
•ìd
, 
sy°ems
.
˛ass
) != 0)

23 
	`DEBUG
("åyög sys: %s, %s, %s, %s", 
sy°ems
.
«me
,

24 
sy°ems
.
ty≥
, sy°ems.
˛ass
, sy°ems.
ph⁄e
);

25 
˛ùå
->
found⁄e
++;

26 i‡(
	`dev_föd
(&
devi˚s
, &
sy°ems
) < 0)

29 
	`DEBUG
("åyög dev: %s, %s, %s, %s", 
devi˚s
.
ty≥
,

30 
devi˚s
.
löe
, devi˚s.
˛ass
, devi˚s.
düÀr
);

31 i‡((
pid
 = 
	`is_locked
(
devi˚s
.
löe
)) != 0) {

32 
	`•rötf
(
îrmsg
, "device `%s'álreadyÜocked byÖid %d\n",

33 
devi˚s
.
löe
, 
pid
);

41 
	`TELL_WAIT
();

42 i‡((
˛ùå
->
pid
 = 
	`f‹k
()) < 0) {

43 
	`log_sys
("forkÉrror");

44 } i‡(
˛ùå
->
pid
 == 0) {

45 
	`WAIT_PARENT
();

46 
	`chûd_dül
(
˛ùå
);

50 
	`lock_£t
(
devi˚s
.
löe
, 
˛ùå
->
pid
);

55 
	`TELL_CHILD
(
˛ùå
->
pid
);

63 i‡(
˛ùå
->
found⁄e
 == 0)

64 
	`•rötf
(
îrmsg
, "sy°em `%s'ÇŸ found\n", 
˛ùå
->
sy¢ame
);

65 i‡(
îrmsg
[0] == 0)

66 
	`•rötf
(
îrmsg
, "unableÅo connectÅo system `%s'\n",

67 
˛ùå
->
sy¢ame
);

69 
	}
}

	@calld/sendstr.c

1 
	~"ˇŒd.h
"

4 
	$£nd_°r
(
fd
, *
±r
, *
ph⁄e
, 
echocheck
)

6 
c
, 
ãmpc
;

11 (
c
 = *
±r
++) != 0) {

12 i‡(
c
 == '\\') {

13 i‡(*
±r
 == 0) {

14 
	`•rötf
(
îrmsg
, "backslashátÉnd of send string\n");

17 
c
 = *
±r
++;

19 
c
) {

21 i‡(*
±r
 == 0)

22 
ªtu∫ok
;

26 
	`DEBUG_NONL
("<delay>");

27 
	`¶ìp
(2);

31 
	`DEBUG_NONL
("<pause>");

32 
	`¶ìp_us
(250000);

36 
	`DEBUG_NONL
("<echo check off>");

37 
echocheck
 = 0;

41 
	`DEBUG_NONL
("<echo check on>");

42 
echocheck
 = 1;

46 
	`£nd_°r
(
fd
, 
ph⁄e
,Öh⁄e, 
echocheck
);

50 
c
 = '\r';

54 
c
 = ' ';

59 
	`•rötf
(
îrmsg
, "unknown sendÉscape char: \\%s\n",

60 
	`˘l_°r
(
c
));

65 
	`DEBUG_NONL
("%s", 
	`˘l_°r
(
c
));

66 i‡(
	`wrôe
(
fd
, &
c
, 1) != 1)

67 
	`log_sys
("writeÉrror");

68 i‡(
echocheck
) {

70 i‡(
	`ªad
(
fd
, &
ãmpc
, 1) != 1)

71 
	`log_sys
("readÉrror");

72 
	`DEBUG_NONL
("{%s}", 
	`˘l_°r
(
ãmpc
));

73 } 
ãmpc
 !
c
);

76 
c
 = '\r';

77 
	`DEBUG_NONL
("%s", 
	`˘l_°r
(
c
));

78 i‡(
	`wrôe
(
fd
, &
c
, 1) != 1)

79 
	`log_sys
("writeÉrror");

81 
ªtu∫ok
:

82 
	`DEBUG
("");

84 
	}
}

	@calld/sigchld.c

1 
	~"ˇŒd.h
"

2 
	~<sys/waô.h
>

9 
	$sig_chld
(
signo
)

11 
°©
, 
î∫o_ßve
;

12 
pid_t
 
pid
;

14 
î∫o_ßve
 = 
î∫o
;

15 
chld_Êag
 = 1;

16 i‡((
pid
 = 
	`waôpid
(-1, &
°©
, 0)) <= 0)

17 
	`log_sys
("waitpidÉrror");

19 i‡(
	`WIFEXITED
(
°©
) != 0)

20 
	`˛õ¡_sigchld
(
pid
, 
	`WEXITSTATUS
(
°©
)+1);

22 
	`log_msg
("chûd %dÅîmö©edábn‹mÆly: %04x", 
pid
, 
°©
);

24 
î∫o
 = 
î∫o_ßve
;

25 
	}
}

	@calld/sysfile.c

1 
	~"ˇŒd.h
"

3 
FILE
 *
	gÂsys
 = 
NULL
;

4 
	gsy¶öío
;

5 
	gsy¶öe
[
MAXLINE
];

12 
	$sys_√xt
(
Sy°ems
 *
sy•å
)

14 i‡(
Âsys
 =
NULL
) {

15 i‡((
Âsys
 = 
	`f›í
(
SYSTEMS
, "r")Ë=
NULL
)

16 
	`log_sys
("ˇn'à›í %s", 
SYSTEMS
);

17 
sy¶öío
 = 0;

20 
agaö
:

21 i‡(
	`fgës
(
sy¶öe
, 
MAXLINE
, 
Âsys
Ë=
NULL
)

23 
sy¶öío
++;

24 i‡((
sy•å
->
«me
 = 
	`°πok
(
sy¶öe
, 
WHITE
)Ë=
NULL
) {

25 i‡(
sy¶öe
[0] == '\n')

26 
agaö
;

27 
	`log_quô
("missög `«me' i¿Sy°em†fûe,Üöê%d", 
sy¶öío
);

29 i‡(
sy•å
->
«me
[0] == '#')

30 
agaö
;

31 i‡((
sy•å
->
time
 = 
	`°πok
(
NULL
, 
WHITE
)) == NULL)

32 
	`log_quô
("missög `time' i¿Sy°em†fûe,Üöê%d", 
sy¶öío
);

33 i‡((
sy•å
->
ty≥
 = 
	`°πok
(
NULL
, 
WHITE
)) == NULL)

34 
	`log_quô
("missög `ty≥' i¿Sy°em†fûe,Üöê%d", 
sy¶öío
);

35 i‡((
sy•å
->
˛ass
 = 
	`°πok
(
NULL
, 
WHITE
)) == NULL)

36 
	`log_quô
("missög `˛ass' i¿Sy°em†fûe,Üöê%d", 
sy¶öío
);

37 i‡((
sy•å
->
ph⁄e
 = 
	`°πok
(
NULL
, 
WHITE
)) == NULL)

38 
	`log_quô
("missög `ph⁄e' i¿Sy°em†fûe,Üöê%d", 
sy¶öío
);

39 i‡((
sy•å
->
logö
 = 
	`°πok
(
NULL
, "\n")) == NULL)

40 
	`log_quô
("missög `logö' i¿Sy°em†fûe,Üöê%d", 
sy¶öío
);

42 (
	`·ñl
(
Âsys
));

43 
	}
}

46 
	$sys_ªw
()

48 i‡(
Âsys
 !
NULL
)

49 
	`ªwöd
(
Âsys
);

50 
sy¶öío
 = 0;

51 
	}
}

54 
	$sys_po¢
(
po¢
)

56 i‡(
po¢
 == 0)

57 
	`sys_ªw
();

58 i‡(
	`f£ek
(
Âsys
, 
po¢
, 
SEEK_SET
) != 0)

59 
	`log_sys
("fseekÉrror");

60 
	}
}

	@calld/ttydial.c

1 
	~"ˇŒd.h
"

4 
	$ây_dül
(
fd
, *
ph⁄e
, *
düÀr
, *
sub
, *
exp£nd
)

6 *
±r
;

8 
±r
 = 
	`°πok
(
exp£nd
, 
WHITE
);

10 
	`DEBUG_NONL
("ex≥˘ = %s\ƒód: ", 
±r
);

11 i‡(
	`ex≥˘_°r
(
fd
, 
±r
) < 0)

14 i‡((
±r
 = 
	`°πok
(
NULL
, 
WHITE
)) == NULL)

16 
	`DEBUG_NONL
("£nd = %s\nwrôe: ", 
±r
);

17 i‡(
	`£nd_°r
(
fd
, 
±r
, 
ph⁄e
, 0) < 0)

20 i‡((
±r
 = 
	`°πok
(
NULL
, 
WHITE
)) == NULL)

23 
	}
}

	@calld/ttyopen.c

1 
	~"ˇŒd.h
"

2 
	~<f˙é.h
>

8 
	$ây_›í
(*
˛ass
, *
löe
, 
∑rôy
Ö¨ôy, 
modem
)

10 
fd
, 
baud
;

11 
dev«me
[100];

12 
ãrmios
 
ãrm
;

17 
	`°r˝y
(
dev«me
, "/dev/");

18 
	`°rˇt
(
dev«me
, 
löe
);

19 i‡((
fd
 = 
	`›í
(
dev«me
, 
O_RDWR
 | 
O_NONBLOCK
)) < 0) {

20 
	`•rötf
(
îrmsg
, "can't open %s: %s\n",

21 
dev«me
, 
	`°ªº‹
(
î∫o
));

24 i‡(
	`ißây
(
fd
) == 0) {

25 
	`•rötf
(
îrmsg
, "%†i†nŸáÅty\n", 
dev«me
);

32 i‡(
	`tcgë©å
(
fd
, &
ãrm
) < 0)

33 
	`log_sys
("tcgetattrÉrror");

35 i‡(
∑rôy
 =
NONE
)

36 
ãrm
.
c_cÊag
 = 
CS8
;

37 i‡(
∑rôy
 =
EVEN
)

38 
ãrm
.
c_cÊag
 = 
CS7
 | 
PARENB
;

39 i‡(
∑rôy
 =
ODD
)

40 
ãrm
.
c_cÊag
 = 
CS7
 | 
PARENB
 | 
PARODD
;

42 
	`log_quô
("unknownÖarity");

43 
ãrm
.
c_cÊag
 |
CREAD
 |

44 
HUPCL
;

46 i‡(
modem
 == 0)

47 
ãrm
.
c_cÊag
 |
CLOCAL
;

49 
ãrm
.
c_oÊag
 = 0;

50 
ãrm
.
c_iÊag
 = 
IXON
 | 
IXOFF
 |

51 
IGNBRK
 |

52 
ISTRIP
 |

53 
IGNPAR
;

54 
ãrm
.
c_lÊag
 = 0;

57 
ãrm
.
c_cc
[
VMIN
] = 1;

58 
ãrm
.
c_cc
[
VTIME
] = 0;

60 i‡(
	`°rcmp
(
˛ass
, "38400") == 0) {

61 
baud
 = 
B38400
;

62 } i‡(
	`°rcmp
(
˛ass
, "19200") == 0) {

63 
baud
 = 
B19200
;

64 } i‡(
	`°rcmp
(
˛ass
, "9600") == 0) {

65 
baud
 = 
B9600
;

66 } i‡(
	`°rcmp
(
˛ass
, "4800") == 0) {

67 
baud
 = 
B4800
;

68 } i‡(
	`°rcmp
(
˛ass
, "2400") == 0) {

69 
baud
 = 
B2400
;

70 } i‡(
	`°rcmp
(
˛ass
, "1800") == 0) {

71 
baud
 = 
B1800
;

72 } i‡(
	`°rcmp
(
˛ass
, "1200") == 0) {

73 
baud
 = 
B1200
;

74 } i‡(
	`°rcmp
(
˛ass
, "600") == 0) {

75 
baud
 = 
B600
;

76 } i‡(
	`°rcmp
(
˛ass
, "300") == 0) {

77 
baud
 = 
B300
;

78 } i‡(
	`°rcmp
(
˛ass
, "200") == 0) {

79 
baud
 = 
B200
;

80 } i‡(
	`°rcmp
(
˛ass
, "150") == 0) {

81 
baud
 = 
B150
;

82 } i‡(
	`°rcmp
(
˛ass
, "134") == 0) {

83 
baud
 = 
B134
;

84 } i‡(
	`°rcmp
(
˛ass
, "110") == 0) {

85 
baud
 = 
B110
;

86 } i‡(
	`°rcmp
(
˛ass
, "75") == 0) {

87 
baud
 = 
B75
;

88 } i‡(
	`°rcmp
(
˛ass
, "50") == 0) {

89 
baud
 = 
B50
;

91 
	`•rötf
(
îrmsg
, "övÆid baudÑ©e: %s\n", 
˛ass
);

94 
	`cf£ti•ìd
(&
ãrm
, 
baud
);

95 
	`cf£to•ìd
(&
ãrm
, 
baud
);

97 i‡(
	`tc£èâr
(
fd
, 
TCSANOW
, &
ãrm
) < 0)

98 
	`log_sys
("tcsetattrÉrror");

100 
	`DEBUG
("tty open");

101 
	`˛r_Ê
(
fd
, 
O_NONBLOCK
);

102 (
fd
);

103 
	}
}

	@daemons/init.c

1 
	~"≠ue.h
"

2 
	~<sy¶og.h
>

3 
	~<f˙é.h
>

4 
	~<sys/ªsour˚.h
>

7 
	$d´m⁄ize
(c⁄° *
cmd
)

9 
i
, 
fd0
, 
fd1
, 
fd2
;

10 
pid_t
 
pid
;

11 
æimô
 
æ
;

12 
siga˘i⁄
 
ß
;

17 
	`umask
(0);

22 i‡(
	`gëæimô
(
RLIMIT_NOFILE
, &
æ
) < 0)

23 
	`îr_quô
("%s: c™'àgë fûêlimô", 
cmd
);

28 i‡((
pid
 = 
	`f‹k
()) < 0)

29 
	`îr_quô
("%s: c™'àf‹k", 
cmd
);

30 i‡(
pid
 != 0)

31 
	`exô
(0);

32 
	`£tsid
();

37 
ß
.
ß_h™dÀr
 = 
SIG_IGN
;

38 
	`sigem±y£t
(&
ß
.
ß_mask
);

39 
ß
.
ß_Êags
 = 0;

40 i‡(
	`siga˘i⁄
(
SIGHUP
, &
ß
, 
NULL
) < 0)

41 
	`îr_quô
("%s: can't ignore SIGHUP");

42 i‡((
pid
 = 
	`f‹k
()) < 0)

43 
	`îr_quô
("%s: c™'àf‹k", 
cmd
);

44 i‡(
pid
 != 0)

45 
	`exô
(0);

51 i‡(
	`chdú
("/") < 0)

52 
	`îr_quô
("%s: can't change directoryÅo /");

57 i‡(
æ
.
æim_max
 =
RLIM_INFINITY
)

58 
æ
.
æim_max
 = 1024;

59 
i
 = 0; i < 
æ
.
æim_max
; i++)

60 
	`˛o£
(
i
);

65 
fd0
 = 
	`›í
("/dev/nuŒ", 
O_RDWR
);

66 
fd1
 = 
	`dup
(0);

67 
fd2
 = 
	`dup
(0);

72 
	`›ílog
(
cmd
, 
LOG_CONS
, 
LOG_DAEMON
);

73 i‡(
fd0
 !0 || 
fd1
 !1 || 
fd2
 != 2) {

74 
	`sy¶og
(
LOG_ERR
, "unexpected file descriptors %d %d %d",

75 
fd0
, 
fd1
, 
fd2
);

76 
	`exô
(1);

78 
	}
}

	@daemons/lockfile.c

1 
	~<uni°d.h
>

2 
	~<f˙é.h
>

5 
	$lockfûe
(
fd
)

7 
Êock
 
Ê
;

9 
Ê
.
l_ty≥
 = 
F_WRLCK
;

10 
Ê
.
l_°¨t
 = 0;

11 
Ê
.
l_whí˚
 = 
SEEK_SET
;

12 
Ê
.
l_Àn
 = 0;

13 (
	`f˙é
(
fd
, 
F_SETLK
, &
Ê
));

14 
	}
}

	@daemons/reread.c

1 
	~"≠ue.h
"

2 
	~<±hªad.h
>

3 
	~<sy¶og.h
>

5 
sig£t_t
 
	gmask
;

7 
Æªady_ru¬ög
();

10 
	$ªªad
()

13 
	}
}

16 
	$thr_‚
(*
¨g
)

18 
îr
, 
signo
;

21 
îr
 = 
	`sigwaô
(&
mask
, &
signo
);

22 i‡(
îr
 != 0) {

23 
	`sy¶og
(
LOG_ERR
, "sigwait failed");

24 
	`exô
(1);

27 
signo
) {

28 
SIGHUP
:

29 
	`sy¶og
(
LOG_INFO
, "Re-reading configuration file");

30 
	`ªªad
();

33 
SIGTERM
:

34 
	`sy¶og
(
LOG_INFO
, "got SIGTERM;Éxiting");

35 
	`exô
(0);

38 
	`sy¶og
(
LOG_INFO
, "u√x≥˘ed sig«»%d\n", 
signo
);

42 
	}
}

45 
	$maö
(
¨gc
, *
¨gv
[])

47 
îr
;

48 
±hªad_t
 
tid
;

49 *
cmd
;

50 
siga˘i⁄
 
ß
;

52 i‡((
cmd
 = 
	`°ºchr
(
¨gv
[0], '/')Ë=
NULL
)

53 
cmd
 = 
¨gv
[0];

55 
cmd
++;

60 
	`d´m⁄ize
(
cmd
);

65 i‡(
	`Æªady_ru¬ög
()) {

66 
	`sy¶og
(
LOG_ERR
, "daemonálreadyÑunning");

67 
	`exô
(1);

73 
ß
.
ß_h™dÀr
 = 
SIG_DFL
;

74 
	`sigem±y£t
(&
ß
.
ß_mask
);

75 
ß
.
ß_Êags
 = 0;

76 i‡(
	`siga˘i⁄
(
SIGHUP
, &
ß
, 
NULL
) < 0)

77 
	`îr_quô
("%s: can'tÑestore SIGHUP default");

78 
	`sigfûl£t
(&
mask
);

79 i‡((
îr
 = 
	`±hªad_sigmask
(
SIG_BLOCK
, &
mask
, 
NULL
)) != 0)

80 
	`îr_exô
(
îr
, "SIG_BLOCKÉrror");

85 
îr
 = 
	`±hªad_¸óã
(&
tid
, 
NULL
, 
thr_‚
, 0);

86 i‡(
îr
 != 0)

87 
	`îr_exô
(
îr
, "can't createÅhread");

93 
	`exô
(0);

94 
	}
}

	@daemons/reread2.c

1 
	~"≠ue.h
"

2 
	~<sy¶og.h
>

3 
	~<î∫o.h
>

5 
lockfûe
();

6 
Æªady_ru¬ög
();

9 
	$ªªad
()

12 
	}
}

15 
	$sigãrm
(
signo
)

17 
	`sy¶og
(
LOG_INFO
, "got SIGTERM;Éxiting");

18 
	`exô
(0);

19 
	}
}

22 
	$sighup
(
signo
)

24 
	`sy¶og
(
LOG_INFO
, "Re-reading configuration file");

25 
	`ªªad
();

26 
	}
}

29 
	$maö
(
¨gc
, *
¨gv
[])

31 *
cmd
;

32 
siga˘i⁄
 
ß
;

34 i‡((
cmd
 = 
	`°ºchr
(
¨gv
[0], '/')Ë=
NULL
)

35 
cmd
 = 
¨gv
[0];

37 
cmd
++;

42 
	`d´m⁄ize
(
cmd
);

47 i‡(
	`Æªady_ru¬ög
()) {

48 
	`sy¶og
(
LOG_ERR
, "daemonálreadyÑunning");

49 
	`exô
(1);

55 
ß
.
ß_h™dÀr
 = 
sigãrm
;

56 
	`sigem±y£t
(&
ß
.
ß_mask
);

57 
	`sigadd£t
(&
ß
.
ß_mask
, 
SIGHUP
);

58 
ß
.
ß_Êags
 = 0;

59 i‡(
	`siga˘i⁄
(
SIGTERM
, &
ß
, 
NULL
) < 0) {

60 
	`sy¶og
(
LOG_ERR
, "ˇn'àˇtch SIGTERM: %s", 
	`°ªº‹
(
î∫o
));

61 
	`exô
(1);

63 
ß
.
ß_h™dÀr
 = 
sighup
;

64 
	`sigem±y£t
(&
ß
.
ß_mask
);

65 
	`sigadd£t
(&
ß
.
ß_mask
, 
SIGTERM
);

66 
ß
.
ß_Êags
 = 0;

67 i‡(
	`siga˘i⁄
(
SIGHUP
, &
ß
, 
NULL
) < 0) {

68 
	`sy¶og
(
LOG_ERR
, "ˇn'àˇtch SIGHUP: %s", 
	`°ªº‹
(
î∫o
));

69 
	`exô
(1);

76 
	`exô
(0);

77 
	}
}

	@daemons/single.c

1 
	~<uni°d.h
>

2 
	~<°dlib.h
>

3 
	~<f˙é.h
>

4 
	~<sy¶og.h
>

5 
	~<°rög.h
>

6 
	~<î∫o.h
>

7 
	~<°dio.h
>

8 
	~<sys/°©.h
>

10 
	#LOCKFILE
 "/v¨/run/d´m⁄.pid"

	)

11 
	#LOCKMODE
 (
S_IRUSR
|
S_IWUSR
|
S_IRGRP
|
S_IROTH
)

	)

13 
lockfûe
();

16 
	$Æªady_ru¬ög
()

18 
fd
;

19 
buf
[16];

21 
fd
 = 
	`›í
(
LOCKFILE
, 
O_RDWR
|
O_CREAT
, 
LOCKMODE
);

22 i‡(
fd
 < 0) {

23 
	`sy¶og
(
LOG_ERR
, "ˇn'à›í %s: %s", 
LOCKFILE
, 
	`°ªº‹
(
î∫o
));

24 
	`exô
(1);

26 i‡(
	`lockfûe
(
fd
) < 0) {

27 i‡(
î∫o
 =
EACCES
 ||Éºnÿ=
EAGAIN
) {

28 
	`˛o£
(
fd
);

31 
	`sy¶og
(
LOG_ERR
, "ˇn'àlock %s: %s", 
LOCKFILE
, 
	`°ªº‹
(
î∫o
));

32 
	`exô
(1);

34 
	`·runˇã
(
fd
, 0);

35 
	`•rötf
(
buf
, "%ld", ()
	`gëpid
());

36 
	`wrôe
(
fd
, 
buf
, 
	`°æí
(buf)+1);

38 
	}
}

	@datafiles/getpwnam.c

1 
	~<pwd.h
>

2 
	~<°ddef.h
>

3 
	~<°rög.h
>

5 
∑sswd
 *

6 
	$gëpw«m
(c⁄° *
«me
)

8 
∑sswd
 *
±r
;

10 
	`£çwít
();

11 (
±r
 = 
	`gëpwít
()Ë!
NULL
)

12 i‡(
	`°rcmp
(
«me
, 
±r
->
pw_«me
) == 0)

14 
	`ídpwít
();

15 (
±r
);

16 
	}
}

	@db/apue_db.h

1 #i‚de‡
_APUE_DB_H


2 
	#_APUE_DB_H


	)

4 * 
	tDBHANDLE
;

6 
DBHANDLE
 
db_›í
(const *, , ...);

7 
db_˛o£
(
DBHANDLE
);

8 *
db_„tch
(
DBHANDLE
, const *);

9 
db_°‹e
(
DBHANDLE
, const *, const *, );

10 
db_dñëe
(
DBHANDLE
, const *);

11 
db_ªwöd
(
DBHANDLE
);

12 *
db_√xåec
(
DBHANDLE
, *);

17 
	#DB_INSERT
 1

	)

18 
	#DB_REPLACE
 2

	)

19 
	#DB_STORE
 3

	)

24 
	#IDXLEN_MIN
 6

	)

25 
	#IDXLEN_MAX
 1024

	)

26 
	#DATLEN_MIN
 2

	)

27 
	#DATLEN_MAX
 1024

	)

	@db/db.c

1 
	~"≠ue.h
"

2 
	~"≠ue_db.h
"

3 
	~<f˙é.h
>

4 
	~<°d¨g.h
>

5 
	~<î∫o.h
>

6 
	~<sys/uio.h
>

13 
	#IDXLEN_SZ
 4

	)

14 
	#SEP
 ':'

	)

15 
	#SPACE
 ' '

	)

16 
	#NEWLINE
 '\n'

	)

22 
	#PTR_SZ
 6

	)

23 
	#PTR_MAX
 999999

	)

24 
	#NHASH_DEF
 137

	)

25 
	#FREE_OFF
 0

	)

26 
	#HASH_OFF
 
PTR_SZ


	)

28 
	tDBHASH
;

29 
	tCOUNT
;

35 
	midxfd
;

36 
	md©fd
;

37 *
	midxbuf
;

38 *
	md©buf
;

39 *
	m«me
;

40 
off_t
 
	midxoff
;

42 
size_t
 
	midxÀn
;

45 
off_t
 
	md©off
;

46 
size_t
 
	md©Àn
;

48 
off_t
 
	m±rvÆ
;

49 
off_t
 
	m±roff
;

50 
off_t
 
	mchaöoff
;

51 
off_t
 
	mhashoff
;

52 
DBHASH
 
	mnhash
;

53 
COUNT
 
	m˙t_dñok
;

54 
COUNT
 
	m˙t_dñîr
;

55 
COUNT
 
	m˙t_„tchok
;

56 
COUNT
 
	m˙t_„tchîr
;

57 
COUNT
 
	m˙t_√xåec
;

58 
COUNT
 
	m˙t_°‹1
;

59 
COUNT
 
	m˙t_°‹2
;

60 
COUNT
 
	m˙t_°‹3
;

61 
COUNT
 
	m˙t_°‹4
;

62 
COUNT
 
	m˙t_°‹îr
;

63 } 
	tDB
;

68 
DB
 *
_db_Æloc
();

69 
_db_dodñëe
(
DB
 *);

70 
_db_föd_™d_lock
(
DB
 *, const *, );

71 
_db_föd‰ì
(
DB
 *, , );

72 
_db_‰ì
(
DB
 *);

73 
DBHASH
 
_db_hash
(
DB
 *, const *);

74 *
_db_ªadd©
(
DB
 *);

75 
off_t
 
_db_ªadidx
(
DB
 *, off_t);

76 
off_t
 
_db_ªad±r
(
DB
 *, off_t);

77 
_db_wrôed©
(
DB
 *, c⁄° *, 
off_t
, );

78 
_db_wrôeidx
(
DB
 *, c⁄° *, 
off_t
, , off_t);

79 
_db_wrôïå
(
DB
 *, 
off_t
, off_t);

84 
DBHANDLE


85 
	$db_›í
(c⁄° *
∑th«me
, 
oÊag
, ...)

87 
DB
 *
db
;

88 
Àn
, 
mode
;

89 
size_t
 
i
;

90 
asciùå
[
PTR_SZ
 + 1],

91 
hash
[(
NHASH_DEF
 + 1Ë* 
PTR_SZ
 + 2];

93 
°©
 
°©buff
;

98 
Àn
 = 
	`°æí
(
∑th«me
);

99 i‡((
db
 = 
	`_db_Æloc
(
Àn
)Ë=
NULL
)

100 
	`îr_dump
("db_open: _db_allocÉrror for DB");

102 
db
->
nhash
 = 
NHASH_DEF
;

103 
db
->
hashoff
 = 
HASH_OFF
;

104 
	`°r˝y
(
db
->
«me
, 
∑th«me
);

105 
	`°rˇt
(
db
->
«me
, ".idx");

107 i‡(
oÊag
 & 
O_CREAT
) {

108 
va_li°
 
≠
;

110 
	`va_°¨t
(
≠
, 
oÊag
);

111 
mode
 = 
	`va_¨g
(
≠
, );

112 
	`va_íd
(
≠
);

117 
db
->
idxfd
 = 
	`›í
(db->
«me
, 
oÊag
, 
mode
);

118 
	`°r˝y
(
db
->
«me
 + 
Àn
, ".dat");

119 
db
->
d©fd
 = 
	`›í
(db->
«me
, 
oÊag
, 
mode
);

124 
db
->
idxfd
 = 
	`›í
(db->
«me
, 
oÊag
);

125 
	`°r˝y
(
db
->
«me
 + 
Àn
, ".dat");

126 
db
->
d©fd
 = 
	`›í
(db->
«me
, 
oÊag
);

129 i‡(
db
->
idxfd
 < 0 || db->
d©fd
 < 0) {

130 
	`_db_‰ì
(
db
);

131 (
NULL
);

134 i‡((
oÊag
 & (
O_CREAT
 | 
O_TRUNC
)) == (O_CREAT | O_TRUNC)) {

140 i‡(
	`wrôew_lock
(
db
->
idxfd
, 0, 
SEEK_SET
, 0) < 0)

141 
	`îr_dump
("db_open: writew_lockÉrror");

143 i‡(
	`f°©
(
db
->
idxfd
, &
°©buff
) < 0)

144 
	`îr_sys
("db_open: fstatÉrror");

146 i‡(
°©buff
.
°_size
 == 0) {

152 
	`•rötf
(
asciùå
, "%*d", 
PTR_SZ
, 0);

153 
hash
[0] = 0;

154 
i
 = 0; i < 
NHASH_DEF
 + 1; i++)

155 
	`°rˇt
(
hash
, 
asciùå
);

156 
	`°rˇt
(
hash
, "\n");

157 
i
 = 
	`°æí
(
hash
);

158 i‡(
	`wrôe
(
db
->
idxfd
, 
hash
, 
i
) != i)

159 
	`îr_dump
("db_open: index file init writeÉrror");

161 i‡(
	`un_lock
(
db
->
idxfd
, 0, 
SEEK_SET
, 0) < 0)

162 
	`îr_dump
("db_open: un_lockÉrror");

164 
	`db_ªwöd
(
db
);

165 (
db
);

166 
	}
}

171 
DB
 *

172 
	$_db_Æloc
(
«mñí
)

174 
DB
 *
db
;

179 i‡((
db
 = 
	`ˇŒoc
(1, (
DB
))Ë=
NULL
)

180 
	`îr_dump
("_db_alloc: callocÉrror for DB");

181 
db
->
idxfd
 = db->
d©fd
 = -1;

187 i‡((
db
->
«me
 = 
	`mÆloc
(
«mñí
 + 5)Ë=
NULL
)

188 
	`îr_dump
("_db_alloc: mallocÉrror forÇame");

194 i‡((
db
->
idxbuf
 = 
	`mÆloc
(
IDXLEN_MAX
 + 2)Ë=
NULL
)

195 
	`îr_dump
("_db_alloc: mallocÉrror for index buffer");

196 i‡((
db
->
d©buf
 = 
	`mÆloc
(
DATLEN_MAX
 + 2)Ë=
NULL
)

197 
	`îr_dump
("_db_alloc: mallocÉrror for data buffer");

198 (
db
);

199 
	}
}

205 
	$db_˛o£
(
DBHANDLE
 
h
)

207 
	`_db_‰ì
((
DB
 *)
h
);

208 
	}
}

215 
	$_db_‰ì
(
DB
 *
db
)

217 i‡(
db
->
idxfd
 >= 0)

218 
	`˛o£
(
db
->
idxfd
);

219 i‡(
db
->
d©fd
 >= 0)

220 
	`˛o£
(
db
->
d©fd
);

221 i‡(
db
->
idxbuf
 !
NULL
)

222 
	`‰ì
(
db
->
idxbuf
);

223 i‡(
db
->
d©buf
 !
NULL
)

224 
	`‰ì
(
db
->
d©buf
);

225 i‡(
db
->
«me
 !
NULL
)

226 
	`‰ì
(
db
->
«me
);

227 
	`‰ì
(
db
);

228 
	}
}

234 
	$db_„tch
(
DBHANDLE
 
h
, c⁄° *
key
)

236 
DB
 *
db
 = 
h
;

237 *
±r
;

239 i‡(
	`_db_föd_™d_lock
(
db
, 
key
, 0) < 0) {

240 
±r
 = 
NULL
;

241 
db
->
˙t_„tchîr
++;

243 
±r
 = 
	`_db_ªadd©
(
db
);

244 
db
->
˙t_„tchok
++;

250 i‡(
	`un_lock
(
db
->
idxfd
, db->
chaöoff
, 
SEEK_SET
, 1) < 0)

251 
	`îr_dump
("db_fetch: un_lockÉrror");

252 (
±r
);

253 
	}
}

260 
	$_db_föd_™d_lock
(
DB
 *
db
, c⁄° *
key
, 
wrôñock
)

262 
off_t
 
off£t
, 
√xtoff£t
;

270 
db
->
chaöoff
 = (
	`_db_hash
(db, 
key
Ë* 
PTR_SZ
Ë+ db->
hashoff
;

271 
db
->
±roff
 = db->
chaöoff
;

277 i‡(
wrôñock
) {

278 i‡(
	`wrôew_lock
(
db
->
idxfd
, db->
chaöoff
, 
SEEK_SET
, 1) < 0)

279 
	`îr_dump
("_db_find_and_lock: writew_lockÉrror");

281 i‡(
	`ªadw_lock
(
db
->
idxfd
, db->
chaöoff
, 
SEEK_SET
, 1) < 0)

282 
	`îr_dump
("_db_find_and_lock:Ñeadw_lockÉrror");

289 
off£t
 = 
	`_db_ªad±r
(
db
, db->
±roff
);

290 
off£t
 != 0) {

291 
√xtoff£t
 = 
	`_db_ªadidx
(
db
, 
off£t
);

292 i‡(
	`°rcmp
(
db
->
idxbuf
, 
key
) == 0)

294 
db
->
±roff
 = 
off£t
;

295 
off£t
 = 
√xtoff£t
;

300 (
off£t
 == 0 ? -1 : 0);

301 
	}
}

306 
DBHASH


307 
	$_db_hash
(
DB
 *
db
, c⁄° *
key
)

309 
DBHASH
 
hvÆ
 = 0;

310 
c
;

311 
i
;

313 
i
 = 1; (
c
 = *
key
++) != 0; i++)

314 
hvÆ
 +
c
 * 
i
;

315 (
hvÆ
 % 
db
->
nhash
);

316 
	}
}

323 
off_t


324 
	$_db_ªad±r
(
DB
 *
db
, 
off_t
 
off£t
)

326 
asciùå
[
PTR_SZ
 + 1];

328 i‡(
	`l£ek
(
db
->
idxfd
, 
off£t
, 
SEEK_SET
) == -1)

329 
	`îr_dump
("_db_readptr:ÜseekÉrrorÅoÖtr field");

330 i‡(
	`ªad
(
db
->
idxfd
, 
asciùå
, 
PTR_SZ
) != PTR_SZ)

331 
	`îr_dump
("_db_readptr:ÑeadÉrror ofÖtr field");

332 
asciùå
[
PTR_SZ
] = 0;

333 (
	`©ﬁ
(
asciùå
));

334 
	}
}

343 
off_t


344 
	$_db_ªadidx
(
DB
 *
db
, 
off_t
 
off£t
)

346 
ssize_t
 
i
;

347 *
±r1
, *
±r2
;

348 
asciùå
[
PTR_SZ
 + 1], 
asciûí
[
IDXLEN_SZ
 + 1];

349 
iovec
 
iov
[2];

356 i‡((
db
->
idxoff
 = 
	`l£ek
(db->
idxfd
, 
off£t
,

357 
off£t
 =0 ? 
SEEK_CUR
 : 
SEEK_SET
)) == -1)

358 
	`îr_dump
("_db_readidx:ÜseekÉrror");

365 
iov
[0].
iov_ba£
 = 
asciùå
;

366 
iov
[0].
iov_Àn
 = 
PTR_SZ
;

367 
iov
[1].
iov_ba£
 = 
asciûí
;

368 
iov
[1].
iov_Àn
 = 
IDXLEN_SZ
;

369 i‡((
i
 = 
	`ªadv
(
db
->
idxfd
, &
iov
[0], 2)Ë!
PTR_SZ
 + 
IDXLEN_SZ
) {

370 i‡(
i
 =0 && 
off£t
 == 0)

372 
	`îr_dump
("_db_readidx:ÑeadvÉrror of indexÑecord");

378 
asciùå
[
PTR_SZ
] = 0;

379 
db
->
±rvÆ
 = 
	`©ﬁ
(
asciùå
);

381 
asciûí
[
IDXLEN_SZ
] = 0;

382 i‡((
db
->
idxÀn
 = 
	`©oi
(
asciûí
)Ë< 
IDXLEN_MIN
 ||

383 
db
->
idxÀn
 > 
IDXLEN_MAX
)

384 
	`îr_dump
("_db_readidx: invalidÜength");

390 i‡((
i
 = 
	`ªad
(
db
->
idxfd
, db->
idxbuf
, db->
idxÀn
)) != db->idxlen)

391 
	`îr_dump
("_db_readidx:ÑeadÉrror of indexÑecord");

392 i‡(
db
->
idxbuf
[db->
idxÀn
-1] !
NEWLINE
)

393 
	`îr_dump
("_db_readidx: missingÇewline");

394 
db
->
idxbuf
[db->
idxÀn
-1] = 0;

399 i‡((
±r1
 = 
	`°rchr
(
db
->
idxbuf
, 
SEP
)Ë=
NULL
)

400 
	`îr_dump
("_db_readidx: missing first separator");

401 *
±r1
++ = 0;

403 i‡((
±r2
 = 
	`°rchr
(
±r1
, 
SEP
)Ë=
NULL
)

404 
	`îr_dump
("_db_readidx: missing second separator");

405 *
±r2
++ = 0;

407 i‡(
	`°rchr
(
±r2
, 
SEP
Ë!
NULL
)

408 
	`îr_dump
("_db_readidx:Åoo many separators");

413 i‡((
db
->
d©off
 = 
	`©ﬁ
(
±r1
)) < 0)

414 
	`îr_dump
("_db_readidx: starting offset < 0");

415 i‡((
db
->
d©Àn
 = 
	`©ﬁ
(
±r2
)Ë<0 || db->d©À¿> 
DATLEN_MAX
)

416 
	`îr_dump
("_db_readidx: invalidÜength");

417 (
db
->
±rvÆ
);

418 
	}
}

425 
	$_db_ªadd©
(
DB
 *
db
)

427 i‡(
	`l£ek
(
db
->
d©fd
, db->
d©off
, 
SEEK_SET
) == -1)

428 
	`îr_dump
("_db_readdat:ÜseekÉrror");

429 i‡(
	`ªad
(
db
->
d©fd
, db->
d©buf
, db->
d©Àn
) != db->datlen)

430 
	`îr_dump
("_db_readdat:ÑeadÉrror");

431 i‡(
db
->
d©buf
[db->
d©Àn
-1] !
NEWLINE
)

432 
	`îr_dump
("_db_readdat: missingÇewline");

433 
db
->
d©buf
[db->
d©Àn
-1] = 0;

434 (
db
->
d©buf
);

435 
	}
}

441 
	$db_dñëe
(
DBHANDLE
 
h
, c⁄° *
key
)

443 
DB
 *
db
 = 
h
;

444 
rc
 = 0;

446 i‡(
	`_db_föd_™d_lock
(
db
, 
key
, 1) == 0) {

447 
	`_db_dodñëe
(
db
);

448 
db
->
˙t_dñok
++;

450 
rc
 = -1;

451 
db
->
˙t_dñîr
++;

453 i‡(
	`un_lock
(
db
->
idxfd
, db->
chaöoff
, 
SEEK_SET
, 1) < 0)

454 
	`îr_dump
("db_delete: un_lockÉrror");

455 (
rc
);

456 
	}
}

464 
	$_db_dodñëe
(
DB
 *
db
)

466 
i
;

467 *
±r
;

468 
off_t
 
‰ì±r
, 
ßvïå
;

473 
±r
 = 
db
->
d©buf
, 
i
 = 0; i < db->
d©Àn
 - 1; i++)

474 *
±r
++ = 
SPACE
;

475 *
±r
 = 0;

476 
±r
 = 
db
->
idxbuf
;

477 *
±r
)

478 *
±r
++ = 
SPACE
;

483 i‡(
	`wrôew_lock
(
db
->
idxfd
, 
FREE_OFF
, 
SEEK_SET
, 1) < 0)

484 
	`îr_dump
("_db_dodelete: writew_lockÉrror");

489 
	`_db_wrôed©
(
db
, db->
d©buf
, db->
d©off
, 
SEEK_SET
);

496 
‰ì±r
 = 
	`_db_ªad±r
(
db
, 
FREE_OFF
);

502 
ßvïå
 = 
db
->
±rvÆ
;

509 
	`_db_wrôeidx
(
db
, db->
idxbuf
, db->
idxoff
, 
SEEK_SET
, 
‰ì±r
);

514 
	`_db_wrôïå
(
db
, 
FREE_OFF
, db->
idxoff
);

522 
	`_db_wrôïå
(
db
, db->
±roff
, 
ßvïå
);

523 i‡(
	`un_lock
(
db
->
idxfd
, 
FREE_OFF
, 
SEEK_SET
, 1) < 0)

524 
	`îr_dump
("_db_dodelete: un_lockÉrror");

525 
	}
}

532 
	$_db_wrôed©
(
DB
 *
db
, c⁄° *
d©a
, 
off_t
 
off£t
, 
whí˚
)

534 
iovec
 
iov
[2];

535 
√wlöe
 = 
NEWLINE
;

542 i‡(
whí˚
 =
SEEK_END
)

543 i‡(
	`wrôew_lock
(
db
->
d©fd
, 0, 
SEEK_SET
, 0) < 0)

544 
	`îr_dump
("_db_writedat: writew_lockÉrror");

546 i‡((
db
->
d©off
 = 
	`l£ek
(db->
d©fd
, 
off£t
, 
whí˚
)) == -1)

547 
	`îr_dump
("_db_writedat:ÜseekÉrror");

548 
db
->
d©Àn
 = 
	`°æí
(
d©a
) + 1;

550 
iov
[0].
iov_ba£
 = (*Ë
d©a
;

551 
iov
[0].
iov_Àn
 = 
db
->
d©Àn
 - 1;

552 
iov
[1].
iov_ba£
 = &
√wlöe
;

553 
iov
[1].
iov_Àn
 = 1;

554 i‡(
	`wrôev
(
db
->
d©fd
, &
iov
[0], 2Ë!db->
d©Àn
)

555 
	`îr_dump
("_db_writedat: writevÉrror of dataÑecord");

557 i‡(
whí˚
 =
SEEK_END
)

558 i‡(
	`un_lock
(
db
->
d©fd
, 0, 
SEEK_SET
, 0) < 0)

559 
	`îr_dump
("_db_writedat: un_lockÉrror");

560 
	}
}

568 
	$_db_wrôeidx
(
DB
 *
db
, c⁄° *
key
,

569 
off_t
 
off£t
, 
whí˚
, off_à
±rvÆ
)

571 
iovec
 
iov
[2];

572 
asciùåÀn
[
PTR_SZ
 + 
IDXLEN_SZ
 +1];

573 
Àn
;

574 *
fmt
;

576 i‡((
db
->
±rvÆ
 =ÖåvÆË< 0 ||ÖåvÆ > 
PTR_MAX
)

577 
	`îr_quô
("_db_wrôeidx: invÆidÖå: %d", 
±rvÆ
);

578 i‡((
off_t
) == ())

579 
fmt
 = "%s%c%lld%c%d\n";

581 
fmt
 = "%s%c%ld%c%d\n";

582 
	`•rötf
(
db
->
idxbuf
, 
fmt
, 
key
, 
SEP
, db->
d©off
, SEP, db->
d©Àn
);

583 i‡((
Àn
 = 
	`°æí
(
db
->
idxbuf
)Ë< 
IDXLEN_MIN
 ||Üí > 
IDXLEN_MAX
)

584 
	`îr_dump
("_db_writeidx: invalidÜength");

585 
	`•rötf
(
asciùåÀn
, "%*ld%*d", 
PTR_SZ
, 
±rvÆ
, 
IDXLEN_SZ
, 
Àn
);

592 i‡(
whí˚
 =
SEEK_END
)

593 i‡(
	`wrôew_lock
(
db
->
idxfd
, ((db->
nhash
+1)*
PTR_SZ
)+1,

594 
SEEK_SET
, 0) < 0)

595 
	`îr_dump
("_db_writeidx: writew_lockÉrror");

600 i‡((
db
->
idxoff
 = 
	`l£ek
(db->
idxfd
, 
off£t
, 
whí˚
)) == -1)

601 
	`îr_dump
("_db_writeidx:ÜseekÉrror");

603 
iov
[0].
iov_ba£
 = 
asciùåÀn
;

604 
iov
[0].
iov_Àn
 = 
PTR_SZ
 + 
IDXLEN_SZ
;

605 
iov
[1].
iov_ba£
 = 
db
->
idxbuf
;

606 
iov
[1].
iov_Àn
 = 
Àn
;

607 i‡(
	`wrôev
(
db
->
idxfd
, &
iov
[0], 2Ë!
PTR_SZ
 + 
IDXLEN_SZ
 + 
Àn
)

608 
	`îr_dump
("_db_writeidx: writevÉrror of indexÑecord");

610 i‡(
whí˚
 =
SEEK_END
)

611 i‡(
	`un_lock
(
db
->
idxfd
, ((db->
nhash
+1)*
PTR_SZ
)+1,

612 
SEEK_SET
, 0) < 0)

613 
	`îr_dump
("_db_writeidx: un_lockÉrror");

614 
	}
}

621 
	$_db_wrôïå
(
DB
 *
db
, 
off_t
 
off£t
, off_à
±rvÆ
)

623 
asciùå
[
PTR_SZ
 + 1];

625 i‡(
±rvÆ
 < 0 ||ÖåvÆ > 
PTR_MAX
)

626 
	`îr_quô
("_db_wrôïå: invÆidÖå: %d", 
±rvÆ
);

627 
	`•rötf
(
asciùå
, "%*ld", 
PTR_SZ
, 
±rvÆ
);

629 i‡(
	`l£ek
(
db
->
idxfd
, 
off£t
, 
SEEK_SET
) == -1)

630 
	`îr_dump
("_db_writeptr:ÜseekÉrrorÅoÖtr field");

631 i‡(
	`wrôe
(
db
->
idxfd
, 
asciùå
, 
PTR_SZ
) != PTR_SZ)

632 
	`îr_dump
("_db_writeptr: writeÉrror ofÖtr field");

633 
	}
}

640 
	$db_°‹e
(
DBHANDLE
 
h
, c⁄° *
key
, c⁄° *
d©a
, 
Êag
)

642 
DB
 *
db
 = 
h
;

643 
rc
, 
keyÀn
, 
d©Àn
;

644 
off_t
 
±rvÆ
;

646 i‡(
Êag
 !
DB_INSERT
 && fœg !
DB_REPLACE
 &&

647 
Êag
 !
DB_STORE
) {

648 
î∫o
 = 
EINVAL
;

651 
keyÀn
 = 
	`°æí
(
key
);

652 
d©Àn
 = 
	`°æí
(
d©a
) + 1;

653 i‡(
d©Àn
 < 
DATLEN_MIN
 || d©À¿> 
DATLEN_MAX
)

654 
	`îr_dump
("db_store: invalid dataÜength");

663 i‡(
	`_db_föd_™d_lock
(
db
, 
key
, 1) < 0) {

664 i‡(
Êag
 =
DB_REPLACE
) {

665 
rc
 = -1;

666 
db
->
˙t_°‹îr
++;

667 
î∫o
 = 
ENOENT
;

668 
d‹ëu∫
;

675 
±rvÆ
 = 
	`_db_ªad±r
(
db
, db->
chaöoff
);

677 i‡(
	`_db_föd‰ì
(
db
, 
keyÀn
, 
d©Àn
) < 0) {

682 
	`_db_wrôed©
(
db
, 
d©a
, 0, 
SEEK_END
);

683 
	`_db_wrôeidx
(
db
, 
key
, 0, 
SEEK_END
, 
±rvÆ
);

689 
	`_db_wrôïå
(
db
, db->
chaöoff
, db->
idxoff
);

690 
db
->
˙t_°‹1
++;

697 
	`_db_wrôed©
(
db
, 
d©a
, db->
d©off
, 
SEEK_SET
);

698 
	`_db_wrôeidx
(
db
, 
key
, db->
idxoff
, 
SEEK_SET
, 
±rvÆ
);

699 
	`_db_wrôïå
(
db
, db->
chaöoff
, db->
idxoff
);

700 
db
->
˙t_°‹2
++;

703 i‡(
Êag
 =
DB_INSERT
) {

704 
rc
 = 1;

705 
db
->
˙t_°‹îr
++;

706 
d‹ëu∫
;

714 i‡(
d©Àn
 !
db
->datlen) {

715 
	`_db_dodñëe
(
db
);

721 
±rvÆ
 = 
	`_db_ªad±r
(
db
, db->
chaöoff
);

726 
	`_db_wrôed©
(
db
, 
d©a
, 0, 
SEEK_END
);

727 
	`_db_wrôeidx
(
db
, 
key
, 0, 
SEEK_END
, 
±rvÆ
);

732 
	`_db_wrôïå
(
db
, db->
chaöoff
, db->
idxoff
);

733 
db
->
˙t_°‹3
++;

738 
	`_db_wrôed©
(
db
, 
d©a
, db->
d©off
, 
SEEK_SET
);

739 
db
->
˙t_°‹4
++;

742 
rc
 = 0;

744 
d‹ëu∫
:

745 i‡(
	`un_lock
(
db
->
idxfd
, db->
chaöoff
, 
SEEK_SET
, 1) < 0)

746 
	`îr_dump
("db_store: un_lockÉrror");

747 (
rc
);

748 
	}
}

755 
	$_db_föd‰ì
(
DB
 *
db
, 
keyÀn
, 
d©Àn
)

757 
rc
;

758 
off_t
 
off£t
, 
√xtoff£t
, 
ßveoff£t
;

763 i‡(
	`wrôew_lock
(
db
->
idxfd
, 
FREE_OFF
, 
SEEK_SET
, 1) < 0)

764 
	`îr_dump
("_db_findfree: writew_lockÉrror");

769 
ßveoff£t
 = 
FREE_OFF
;

770 
off£t
 = 
	`_db_ªad±r
(
db
, 
ßveoff£t
);

772 
off£t
 != 0) {

773 
√xtoff£t
 = 
	`_db_ªadidx
(
db
, 
off£t
);

774 i‡(
	`°æí
(
db
->
idxbuf
Ë=
keyÀn
 && db->
d©Àn
 == datlen)

776 
ßveoff£t
 = 
off£t
;

777 
off£t
 = 
√xtoff£t
;

780 i‡(
off£t
 == 0) {

781 
rc
 = -1;

791 
	`_db_wrôïå
(
db
, 
ßveoff£t
, db->
±rvÆ
);

792 
rc
 = 0;

804 i‡(
	`un_lock
(
db
->
idxfd
, 
FREE_OFF
, 
SEEK_SET
, 1) < 0)

805 
	`îr_dump
("_db_findfree: un_lockÉrror");

806 (
rc
);

807 
	}
}

815 
	$db_ªwöd
(
DBHANDLE
 
h
)

817 
DB
 *
db
 = 
h
;

818 
off_t
 
off£t
;

820 
off£t
 = (
db
->
nhash
 + 1Ë* 
PTR_SZ
;

827 i‡((
db
->
idxoff
 = 
	`l£ek
(db->
idxfd
, 
off£t
+1, 
SEEK_SET
)) == -1)

828 
	`îr_dump
("db_rewind:ÜseekÉrror");

829 
	}
}

838 
	$db_√xåec
(
DBHANDLE
 
h
, *
key
)

840 
DB
 *
db
 = 
h
;

841 
c
;

842 *
±r
;

848 i‡(
	`ªadw_lock
(
db
->
idxfd
, 
FREE_OFF
, 
SEEK_SET
, 1) < 0)

849 
	`îr_dump
("db_nextrec:Ñeadw_lockÉrror");

855 i‡(
	`_db_ªadidx
(
db
, 0) < 0) {

856 
±r
 = 
NULL
;

857 
d‹ëu∫
;

863 
±r
 = 
db
->
idxbuf
;

864 (
c
 = *
±r
++Ë!0 && c =
SPACE
)

866 } 
c
 == 0);

868 i‡(
key
 !
NULL
)

869 
	`°r˝y
(
key
, 
db
->
idxbuf
);

870 
±r
 = 
	`_db_ªadd©
(
db
);

871 
db
->
˙t_√xåec
++;

873 
d‹ëu∫
:

874 i‡(
	`un_lock
(
db
->
idxfd
, 
FREE_OFF
, 
SEEK_SET
, 1) < 0)

875 
	`îr_dump
("db_nextrec: un_lockÉrror");

876 (
±r
);

877 
	}
}

	@db/t4.c

1 
	~"≠ue.h
"

2 
	~"≠ue_db.h
"

3 
	~<f˙é.h
>

6 
	$maö
()

8 
DBHANDLE
 
db
;

10 i‡((
db
 = 
	`db_›í
("db4", 
O_RDWR
 | 
O_CREAT
 | 
O_TRUNC
,

11 
FILE_MODE
)Ë=
NULL
)

12 
	`îr_sys
("db_openÉrror");

14 i‡(
	`db_°‹e
(
db
, "AÕha", "d©a1", 
DB_INSERT
) != 0)

15 
	`îr_quô
("db_storeÉrror forálpha");

16 i‡(
	`db_°‹e
(
db
, "bëa", "D©®f‹ bëa", 
DB_INSERT
) != 0)

17 
	`îr_quô
("db_storeÉrror for beta");

18 i‡(
	`db_°‹e
(
db
, "gamma", "ªc‹d3", 
DB_INSERT
) != 0)

19 
	`îr_quô
("db_storeÉrror for gamma");

21 
	`db_˛o£
(
db
);

22 
	`exô
(0);

23 
	}
}

	@environ/cmd1.c

1 
	~"≠ue.h
"

3 
	#TOK_ADD
 5

	)

5 
do_löe
(*);

6 
cmd_add
();

7 
gë_tokí
();

10 
	$maö
()

12 
löe
[
MAXLINE
];

14 
	`fgës
(
löe
, 
MAXLINE
, 
°dö
Ë!
NULL
)

15 
	`do_löe
(
löe
);

16 
	`exô
(0);

17 
	}
}

19 *
	gtok_±r
;

22 
	$do_löe
(*
±r
)

24 
cmd
;

26 
tok_±r
 = 
±r
;

27 (
cmd
 = 
	`gë_tokí
()) > 0) {

28 
cmd
) {

29 
TOK_ADD
:

30 
	`cmd_add
();

34 
	}
}

37 
	$cmd_add
()

39 
tokí
;

41 
tokí
 = 
	`gë_tokí
();

43 
	}
}

46 
	$gë_tokí
()

49 
	}
}

	@environ/cmd2.c

1 
	~"≠ue.h
"

2 
	~<£tjmp.h
>

4 
	#TOK_ADD
 5

	)

6 
jmp_buf
 
	gjmpbuf„r
;

9 
	$maö
()

11 
löe
[
MAXLINE
];

13 i‡(
	`£tjmp
(
jmpbuf„r
) != 0)

14 
	`¥ötf
("error");

15 
	`fgës
(
löe
, 
MAXLINE
, 
°dö
Ë!
NULL
)

16 
	`do_löe
(
löe
);

17 
	`exô
(0);

18 
	}
}

23 
	$cmd_add
()

25 
tokí
;

27 
tokí
 = 
	`gë_tokí
();

28 i‡(
tokí
 < 0)

29 
	`l⁄gjmp
(
jmpbuf„r
, 1);

31 
	}
}

	@environ/doatexit.c

1 
	~"≠ue.h
"

3 
my_exô1
();

4 
my_exô2
();

7 
	$maö
()

9 i‡(
	`©exô
(
my_exô2
) != 0)

10 
	`îr_sys
("can'tÑegister my_exit2");

12 i‡(
	`©exô
(
my_exô1
) != 0)

13 
	`îr_sys
("can'tÑegister my_exit1");

14 i‡(
	`©exô
(
my_exô1
) != 0)

15 
	`îr_sys
("can'tÑegister my_exit1");

17 
	`¥ötf
("main is done\n");

19 
	}
}

22 
	$my_exô1
()

24 
	`¥ötf
("firstÉxit handler\n");

25 
	}
}

28 
	$my_exô2
()

30 
	`¥ötf
("secondÉxit handler\n");

31 
	}
}

	@environ/getrlimit.c

1 
	~"≠ue.h
"

2 #i‡
deföed
(
BSD
Ë|| deföed(
MACOS
)

3 
	~<sys/time.h
>

4 
	#FMT
 "%10Œd "

	)

6 
	#FMT
 "%10ld "

	)

8 
	~<sys/ªsour˚.h
>

10 
	#doô
(
«me
Ë
	`¥_limôs
(#«me,Çame)

	)

12 
¥_limôs
(*, );

15 
	$maö
()

17 #ifdef 
RLIMIT_AS


18 
	`doô
(
RLIMIT_AS
);

20 
	`doô
(
RLIMIT_CORE
);

21 
	`doô
(
RLIMIT_CPU
);

22 
	`doô
(
RLIMIT_DATA
);

23 
	`doô
(
RLIMIT_FSIZE
);

24 #ifde‡ 
RLIMIT_LOCKS


25 
	`doô
(
RLIMIT_LOCKS
);

27 #ifdef 
RLIMIT_MEMLOCK


28 
	`doô
(
RLIMIT_MEMLOCK
);

30 
	`doô
(
RLIMIT_NOFILE
);

31 #ifdef 
RLIMIT_NPROC


32 
	`doô
(
RLIMIT_NPROC
);

34 #ifdef 
RLIMIT_RSS


35 
	`doô
(
RLIMIT_RSS
);

37 #ifdef 
RLIMIT_SBSIZE


38 
	`doô
(
RLIMIT_SBSIZE
);

40 
	`doô
(
RLIMIT_STACK
);

41 #ifdef 
RLIMIT_VMEM


42 
	`doô
(
RLIMIT_VMEM
);

44 
	`exô
(0);

45 
	}
}

48 
	$¥_limôs
(*
«me
, 
ªsour˚
)

50 
æimô
 
limô
;

52 i‡(
	`gëæimô
(
ªsour˚
, &
limô
) < 0)

53 
	`îr_sys
("gëæimôÉº‹ f‹ %s", 
«me
);

54 
	`¥ötf
("%-14† ", 
«me
);

55 i‡(
limô
.
æim_cur
 =
RLIM_INFINITY
)

56 
	`¥ötf
("(infinite) ");

58 
	`¥ötf
(
FMT
, 
limô
.
æim_cur
);

59 i‡(
limô
.
æim_max
 =
RLIM_INFINITY
)

60 
	`¥ötf
("(infinite)");

62 
	`¥ötf
(
FMT
, 
limô
.
æim_max
);

63 
	`putch¨
(()'\n');

64 
	}
}

	@environ/hello1.c

1 
	~<°dio.h
>

3 
	$maö
()

5 
	`¥ötf
("hello, world\n");

6 
	}
}

	@environ/opendata.c

1 
	~<°dio.h
>

3 
	#DATAFILE
 "d©afûe"

	)

5 
FILE
 *

6 
	$›í_d©a
()

8 
FILE
 *
Â
;

9 
d©abuf
[
BUFSIZ
];

11 i‡((
Â
 = 
	`f›í
(
DATAFILE
, "r")Ë=
NULL
)

12 (
NULL
);

13 i‡(
	`£tvbuf
(
Â
, 
d©abuf
, 
_IOLBF
, 
BUFSIZ
) != 0)

14 (
NULL
);

15 (
Â
);

16 
	}
}

	@environ/testjmp.c

1 
	~"≠ue.h
"

2 
	~<£tjmp.h
>

4 
f1
(, , , );

5 
f2
();

7 
jmp_buf
 
	gjmpbuf„r
;

8 
	gglobvÆ
;

11 
	$maö
()

13 
autovÆ
;

14 
ªgivÆ
;

15 vﬁ©ûê
vﬁavÆ
;

16 
°©vÆ
;

18 
globvÆ
 = 1; 
autovÆ
 = 2; 
ªgivÆ
 = 3; 
vﬁavÆ
 = 4; 
°©vÆ
 = 5;

20 i‡(
	`£tjmp
(
jmpbuf„r
) != 0) {

21 
	`¥ötf
("afterÜongjmp:\n");

22 
	`¥ötf
("globval = %d,áutoval = %d,Ñegival = %d,"

24 
globvÆ
, 
autovÆ
, 
ªgivÆ
, 
vﬁavÆ
, 
°©vÆ
);

25 
	`exô
(0);

31 
globvÆ
 = 95; 
autovÆ
 = 96; 
ªgivÆ
 = 97; 
vﬁavÆ
 = 98;

32 
°©vÆ
 = 99;

34 
	`f1
(
autovÆ
, 
ªgivÆ
, 
vﬁavÆ
, 
°©vÆ
);

35 
	`exô
(0);

36 
	}
}

39 
	$f1
(
i
, 
j
, 
k
, 
l
)

41 
	`¥ötf
("in f1():\n");

42 
	`¥ötf
("globval = %d,áutoval = %d,Ñegival = %d,"

43 " vﬁavÆ = %d, sètvÆ = %d\n", 
globvÆ
, 
i
, 
j
, 
k
, 
l
);

44 
	`f2
();

45 
	}
}

48 
	$f2
()

50 
	`l⁄gjmp
(
jmpbuf„r
, 1);

51 
	}
}

	@exercises/asyncsocket.c

1 
	~"≠ue.h
"

2 
	~<î∫o.h
>

3 
	~<f˙é.h
>

4 
	~<sys/sockë.h
>

5 
	~<sys/io˘l.h
>

6 #i‡
deföed
(
BSD
Ë|| deföed(
MACOS
Ë|| deföed(
SOLARIS
)

7 
	~<sys/fûio.h
>

11 
	$£èsync
(
sockfd
)

13 
n
;

15 i‡(
	`f˙é
(
sockfd
, 
F_SETOWN
, 
	`gëpid
()) < 0)

17 
n
 = 1;

18 i‡(
	`io˘l
(
sockfd
, 
FIOASYNC
, &
n
) < 0)

21 
	}
}

24 
	$˛øsync
(
sockfd
)

26 
n
;

28 
n
 = 0;

29 i‡(
	`io˘l
(
sockfd
, 
FIOASYNC
, &
n
) < 0)

32 
	}
}

	@exercises/getlogin.c

1 
	~"≠ue.h
"

4 
	$maö
()

6 
FILE
 *
Â
;

7 *
p
;

9 
	`d´m⁄ize
("getlog");

10 
p
 = 
	`gëlogö
();

11 
Â
 = 
	`f›í
("/tmp/getlog.out", "w");

12 i‡(
Â
 !
NULL
) {

13 i‡(
p
 =
NULL
)

14 
	`Ârötf
(
Â
, "noÜoginÇame\n");

16 
	`Ârötf
(
Â
, "logöÇame: %s\n", 
p
);

18 
	`exô
(0);

19 
	}
}

	@exercises/getpw44bsd.c

1 
	~"≠ue.h
"

2 
	~<pwd.h
>

5 
	$maö
()

7 
∑sswd
 *
±r
;

9 i‡((
±r
 = 
	`gëpw«m
("ßr")Ë=
NULL
)

10 
	`îr_sys
("getpwnamÉrror");

11 
	`¥ötf
("pw_∑sswd = %s\n", 
±r
->
pw_∑sswd
 =
NULL
 ||

12 
±r
->
pw_∑sswd
[0] == 0 ? "(null)" :Ötr->pw_passwd);

13 
	`exô
(0);

14 
	}
}

	@exercises/getpwsvr4.c

1 
	~"≠ue.h
"

2 
	~<shadow.h
>

5 
	$maö
()

7 
•wd
 *
±r
;

9 i‡((
±r
 = 
	`gë•«m
("ßr")Ë=
NULL
)

10 
	`îr_sys
("getspnamÉrror");

11 
	`¥ötf
("•_pwd∞%s\n", 
±r
->
•_pwdp
 =
NULL
 ||

12 
±r
->
•_pwdp
[0] == 0 ? "(null)" :Ötr->sp_pwdp);

13 
	`exô
(0);

14 
	}
}

	@exercises/goodexit.c

1 
	~"≠ue.h
"

2 
	~<±hªad.h
>

4 
	sfoo
 {

5 
	ma
, 
	mb
, 
	mc
, 
	md
;

9 
	$¥ötfoo
(c⁄° *
s
, c⁄° 
foo
 *
Â
)

11 
	`¥ötf
(
s
);

12 
	`¥ötf
(" såu˘uªáà0x%x\n", ()
Â
);

13 
	`¥ötf
(" foo.®%d\n", 
Â
->
a
);

14 
	`¥ötf
(" foo.b = %d\n", 
Â
->
b
);

15 
	`¥ötf
(" foo.¯%d\n", 
Â
->
c
);

16 
	`¥ötf
(" foo.d = %d\n", 
Â
->
d
);

17 
	}
}

20 
	$thr_‚1
(*
¨g
)

22 
foo
 *
Â
;

24 i‡((
Â
 = 
	`mÆloc
((
foo
))Ë=
NULL
)

25 
	`îr_sys
("can'tállocate memory");

26 
Â
->
a
 = 1;

27 
Â
->
b
 = 2;

28 
Â
->
c
 = 3;

29 
Â
->
d
 = 4;

30 
	`¥ötfoo
("thªad:\n", 
Â
);

31 ((*)
Â
);

32 
	}
}

35 
	$maö
()

37 
îr
;

38 
±hªad_t
 
tid1
;

39 
foo
 *
Â
;

41 
îr
 = 
	`±hªad_¸óã
(&
tid1
, 
NULL
, 
thr_‚1
, NULL);

42 i‡(
îr
 != 0)

43 
	`îr_exô
(
îr
, "can't createÅhread 1");

44 
îr
 = 
	`±hªad_joö
(
tid1
, (*)&
Â
);

45 i‡(
îr
 != 0)

46 
	`îr_exô
(
îr
, "can't join withÅhread 1");

47 
	`¥ötfoo
("∑ª¡:\n", 
Â
);

48 
	`exô
(0);

49 
	}
}

	@exercises/openmax.c

1 
	~"≠ue.h
"

2 
	~<limôs.h
>

3 
	~<sys/ªsour˚.h
>

5 
	#OPEN_MAX_GUESS
 256

	)

8 
	$›í_max
()

10 
›ímax
;

11 
æimô
 
æ
;

13 i‡((
›ímax
 = 
	`sysc⁄f
(
_SC_OPEN_MAX
)) < 0 ||

14 
›ímax
 =
LONG_MAX
) {

15 i‡(
	`gëæimô
(
RLIMIT_NOFILE
, &
æ
) < 0)

16 
	`îr_sys
("can't get fileÜimit");

17 i‡(
æ
.
æim_max
 =
RLIM_INFINITY
)

18 
›ímax
 = 
OPEN_MAX_GUESS
;

20 
›ímax
 = 
æ
.
æim_max
;

22 (
›ímax
);

23 
	}
}

	@exercises/prtime.c

1 
	~"≠ue.h
"

2 
	~<time.h
>

5 
	$maö
()

7 
time_t
 
ˇ…ime
;

8 
tm
 *tm;

9 
löe
[
MAXLINE
];

11 i‡((
ˇ…ime
 = 
	`time
(
NULL
)) == -1)

12 
	`îr_sys
("timeÉrror");

13 i‡((
tm
 = 
	`loˇ…ime
(&
ˇ…ime
)Ë=
NULL
)

14 
	`îr_sys
("localtimeÉrror");

15 i‡(
	`°r·ime
(
löe
, 
MAXLINE
, "%®%b %d %X %Z %Y\n", 
tm
) == 0)

16 
	`îr_sys
("strftimeÉrror");

17 
	`Âuts
(
löe
, 
°dout
);

18 
	`exô
(0);

19 
	}
}

	@exercises/sizepipe.c

1 
	~"≠ue.h
"

2 
	~<f˙é.h
>

5 
	$maö
()

7 
i
, 
n
;

8 
fd
[2];

10 i‡(
	`pùe
(
fd
) < 0)

11 
	`îr_sys
("pipeÉrror");

12 
	`£t_Ê
(
fd
[1], 
O_NONBLOCK
);

17 
n
 = 0; ;Ç++) {

18 i‡((
i
 = 
	`wrôe
(
fd
[1], "a", 1)) != 1) {

19 
	`¥ötf
("wrôêªà%d, ", 
i
);

23 
	`¥ötf
("pùêˇ∑côy = %d\n", 
n
);

24 
	`exô
(0);

25 
	}
}

	@exercises/sleep.c

1 
	~<uni°d.h
>

2 
	~<time.h
>

3 
	~<sys/£À˘.h
>

6 
	$¶ìp
(
n£c
)

8 
n
;

9 
¶ït
;

10 
time_t
 
°¨t
, 
íd
;

11 
timevÆ
 
tv
;

13 
tv
.
tv_£c
 = 
n£c
;

14 
tv
.
tv_u£c
 = 0;

15 
	`time
(&
°¨t
);

16 
n
 = 
	`£À˘
(0, 
NULL
, NULL, NULL, &
tv
);

17 i‡(
n
 == 0)

19 
	`time
(&
íd
);

20 
¶ït
 = 
íd
 - 
°¨t
;

21 i‡(
¶ït
 >
n£c
)

23 (
n£c
 - 
¶ït
);

24 
	}
}

	@exercises/sleepus_poll.c

1 
	~<pﬁl.h
>

4 
	$¶ìp_us
(
nu£cs
)

6 
pﬁlfd
 
dummy
;

7 
timeout
;

9 i‡((
timeout
 = 
nu£cs
 / 1000) <= 0)

10 
timeout
 = 1;

11 
	`pﬁl
(&
dummy
, 0, 
timeout
);

12 
	}
}

	@exercises/sleepus_select.c

1 
	~"≠ue.h
"

2 
	~<sys/£À˘.h
>

5 
	$¶ìp_us
(
nu£cs
)

7 
timevÆ
 
tvÆ
;

9 
tvÆ
.
tv_£c
 = 
nu£cs
 / 1000000;

10 
tvÆ
.
tv_u£c
 = 
nu£cs
 % 1000000;

11 
	`£À˘
(0, 
NULL
, NULL, NULL, &
tvÆ
);

12 
	}
}

	@file/access.c

1 
	~"≠ue.h
"

2 
	~<f˙é.h
>

5 
	$maö
(
¨gc
, *
¨gv
[])

7 i‡(
¨gc
 != 2)

8 
	`îr_quô
("usage:á.out <pathname>");

9 i‡(
	`ac˚ss
(
¨gv
[1], 
R_OK
) < 0)

10 
	`îr_ªt
("ac˚s†îr‹ f‹ %s", 
¨gv
[1]);

12 
	`¥ötf
("readáccess OK\n");

13 i‡(
	`›í
(
¨gv
[1], 
O_RDONLY
) < 0)

14 
	`îr_ªt
("›íÉº‹ f‹ %s", 
¨gv
[1]);

16 
	`¥ötf
("open forÑeading OK\n");

17 
	`exô
(0);

18 
	}
}

	@file/cdpwd.c

1 
	~"≠ue.h
"

4 
	$maö
()

6 *
±r
;

7 
size
;

9 i‡(
	`chdú
("/usr/spool/uucppublic") < 0)

10 
	`îr_sys
("chdir failed");

12 
±r
 = 
	`∑th_Æloc
(&
size
);

13 i‡(
	`gëcwd
(
±r
, 
size
Ë=
NULL
)

14 
	`îr_sys
("getcwd failed");

16 
	`¥ötf
("cwd = %s\n", 
±r
);

17 
	`exô
(0);

18 
	}
}

	@file/changemod.c

1 
	~"≠ue.h
"

4 
	$maö
()

6 
°©
 
°©buf
;

10 i‡(
	`°©
("foo", &
°©buf
) < 0)

11 
	`îr_sys
("statÉrror for foo");

12 i‡(
	`chmod
("foo", (
°©buf
.
°_mode
 & ~
S_IXGRP
Ë| 
S_ISGID
) < 0)

13 
	`îr_sys
("chmodÉrror for foo");

17 i‡(
	`chmod
("b¨", 
S_IRUSR
 | 
S_IWUSR
 | 
S_IRGRP
 | 
S_IROTH
) < 0)

18 
	`îr_sys
("chmodÉrror for bar");

20 
	`exô
(0);

21 
	}
}

	@file/devrdev.c

1 
	~"≠ue.h
"

2 #ifde‡
SOLARIS


3 
	~<sys/mkdev.h
>

7 
	$maö
(
¨gc
, *
¨gv
[])

9 
i
;

10 
°©
 
buf
;

12 
i
 = 1; i < 
¨gc
; i++) {

13 
	`¥ötf
("%s: ", 
¨gv
[
i
]);

14 i‡(
	`°©
(
¨gv
[
i
], &
buf
) < 0) {

15 
	`îr_ªt
("statÉrror");

19 
	`¥ötf
("dev = %d/%d", 
	`maj‹
(
buf
.
°_dev
), 
	`mö‹
(buf.st_dev));

21 i‡(
	`S_ISCHR
(
buf
.
°_mode
Ë|| 
	`S_ISBLK
(buf.st_mode)) {

22 
	`¥ötf
(" (%s)Ñdev = %d/%d",

23 (
	`S_ISCHR
(
buf
.
°_mode
)) ? "character" : "block",

24 
	`maj‹
(
buf
.
°_rdev
), 
	`mö‹
(buf.st_rdev));

26 
	`¥ötf
("\n");

29 
	`exô
(0);

30 
	}
}

	@file/fileflags.c

1 
	~"≠ue.h
"

2 
	~<f˙é.h
>

5 
	$maö
(
¨gc
, *
¨gv
[])

7 
vÆ
;

9 i‡(
¨gc
 != 2)

10 
	`îr_quô
("usage:á.out <descriptor#>");

12 i‡((
vÆ
 = 
	`f˙é
(
	`©oi
(
¨gv
[1]), 
F_GETFL
, 0)) < 0)

13 
	`îr_sys
("f˙éÉº‹ f‹ fd %d", 
	`©oi
(
¨gv
[1]));

15 
vÆ
 & 
O_ACCMODE
) {

16 
O_RDONLY
:

17 
	`¥ötf
("read only");

20 
O_WRONLY
:

21 
	`¥ötf
("write only");

24 
O_RDWR
:

25 
	`¥ötf
("read write");

29 
	`îr_dump
("unknownáccess mode");

32 i‡(
vÆ
 & 
O_APPEND
)

33 
	`¥ötf
(",áppend");

34 i‡(
vÆ
 & 
O_NONBLOCK
)

35 
	`¥ötf
(",Çonblocking");

36 #i‡
	`deföed
(
O_SYNC
)

37 i‡(
vÆ
 & 
O_SYNC
)

38 
	`¥ötf
(", synchronous writes");

40 #i‡!
	`deföed
(
_POSIX_C_SOURCE
Ë&& deföed(
O_FSYNC
)

41 i‡(
vÆ
 & 
O_FSYNC
)

42 
	`¥ötf
(", synchronous writes");

44 
	`putch¨
('\n');

45 
	`exô
(0);

46 
	}
}

	@file/filetype.c

1 
	~"≠ue.h
"

4 
	$maö
(
¨gc
, *
¨gv
[])

6 
i
;

7 
°©
 
buf
;

8 *
±r
;

10 
i
 = 1; i < 
¨gc
; i++) {

11 
	`¥ötf
("%s: ", 
¨gv
[
i
]);

12 i‡(
	`l°©
(
¨gv
[
i
], &
buf
) < 0) {

13 
	`îr_ªt
("lstatÉrror");

16 i‡(
	`S_ISREG
(
buf
.
°_mode
))

17 
±r
 = "regular";

18 i‡(
	`S_ISDIR
(
buf
.
°_mode
))

19 
±r
 = "directory";

20 i‡(
	`S_ISCHR
(
buf
.
°_mode
))

21 
±r
 = "character special";

22 i‡(
	`S_ISBLK
(
buf
.
°_mode
))

23 
±r
 = "block special";

24 i‡(
	`S_ISFIFO
(
buf
.
°_mode
))

25 
±r
 = "fifo";

26 i‡(
	`S_ISLNK
(
buf
.
°_mode
))

27 
±r
 = "symbolicÜink";

28 i‡(
	`S_ISSOCK
(
buf
.
°_mode
))

29 
±r
 = "socket";

31 
±r
 = "** unknown mode **";

32 
	`¥ötf
("%s\n", 
±r
);

34 
	`exô
(0);

35 
	}
}

	@file/ftw4.c

1 
	~"≠ue.h
"

2 
	~<dúít.h
>

3 
	~<limôs.h
>

6 
	tMyfunc
(c⁄° *, c⁄° 
	t°©
 *, );

8 
Myfunc
 
	gmyfunc
;

9 
my·w
(*, 
Myfunc
 *);

10 
d›©h
(
Myfunc
 *);

12 
	gƒeg
, 
	gndú
, 
	gnblk
, 
	gnchr
, 
	gnfifo
, 
	gn¶ök
, 
	gnsock
, 
	g¡Ÿ
;

15 
	$maö
(
¨gc
, *
¨gv
[])

17 
ªt
;

19 i‡(
¨gc
 != 2)

20 
	`îr_quô
("usage: ftw <starting-pathname>");

22 
ªt
 = 
	`my·w
(
¨gv
[1], 
myfunc
);

24 
¡Ÿ
 = 
ƒeg
 + 
ndú
 + 
nblk
 + 
nchr
 + 
nfifo
 + 
n¶ök
 + 
nsock
;

25 i‡(
¡Ÿ
 == 0)

26 
¡Ÿ
 = 1;

27 
	`¥ötf
("ªguœ∏fûe† = %7ld, %5.2‡%%\n", 
ƒeg
,

28 
ƒeg
*100.0/
¡Ÿ
);

29 
	`¥ötf
("dúe˘‹õ† = %7ld, %5.2‡%%\n", 
ndú
,

30 
ndú
*100.0/
¡Ÿ
);

31 
	`¥ötf
("block s≥cü» = %7ld, %5.2‡%%\n", 
nblk
,

32 
nblk
*100.0/
¡Ÿ
);

33 
	`¥ötf
("ch¨ s≥cü» = %7ld, %5.2‡%%\n", 
nchr
,

34 
nchr
*100.0/
¡Ÿ
);

35 
	`¥ötf
("FIFO† = %7ld, %5.2‡%%\n", 
nfifo
,

36 
nfifo
*100.0/
¡Ÿ
);

37 
	`¥ötf
("symbﬁi¯lök†%7ld, %5.2‡%%\n", 
n¶ök
,

38 
n¶ök
*100.0/
¡Ÿ
);

39 
	`¥ötf
("sockë† = %7ld, %5.2‡%%\n", 
nsock
,

40 
nsock
*100.0/
¡Ÿ
);

42 
	`exô
(
ªt
);

43 
	}
}

49 
	#FTW_F
 1

	)

50 
	#FTW_D
 2

	)

51 
	#FTW_DNR
 3

	)

52 
	#FTW_NS
 4

	)

54 *
	gfuŒ∑th
;

57 
	$my·w
(*
∑th«me
, 
Myfunc
 *
func
)

59 
Àn
;

60 
fuŒ∑th
 = 
	`∑th_Æloc
(&
Àn
);

62 
	`°∫˝y
(
fuŒ∑th
, 
∑th«me
, 
Àn
);

63 
fuŒ∑th
[
Àn
-1] = 0;

65 (
	`d›©h
(
func
));

66 
	}
}

75 
	$d›©h
(
Myfunc
* 
func
)

77 
°©
 
°©buf
;

78 
dúít
 *
dúp
;

79 
DIR
 *
dp
;

80 
ªt
;

81 *
±r
;

83 i‡(
	`l°©
(
fuŒ∑th
, &
°©buf
) < 0)

84 (
	`func
(
fuŒ∑th
, &
°©buf
, 
FTW_NS
));

85 i‡(
	`S_ISDIR
(
°©buf
.
°_mode
) == 0)

86 (
	`func
(
fuŒ∑th
, &
°©buf
, 
FTW_F
));

92 i‡((
ªt
 = 
	`func
(
fuŒ∑th
, &
°©buf
, 
FTW_D
)) != 0)

93 (
ªt
);

95 
±r
 = 
fuŒ∑th
 + 
	`°æí
(fullpath);

96 *
±r
++ = '/';

97 *
±r
 = 0;

99 i‡((
dp
 = 
	`›ídú
(
fuŒ∑th
)Ë=
NULL
)

100 (
	`func
(
fuŒ∑th
, &
°©buf
, 
FTW_DNR
));

102 (
dúp
 = 
	`ªaddú
(
dp
)Ë!
NULL
) {

103 i‡(
	`°rcmp
(
dúp
->
d_«me
, ".") == 0 ||

104 
	`°rcmp
(
dúp
->
d_«me
, "..") == 0)

107 
	`°r˝y
(
±r
, 
dúp
->
d_«me
);

109 i‡((
ªt
 = 
	`d›©h
(
func
)) != 0)

112 
±r
[-1] = 0;

114 i‡(
	`˛o£dú
(
dp
) < 0)

115 
	`îr_ªt
("ˇn'à˛o£ dúe˘‹y %s", 
fuŒ∑th
);

117 (
ªt
);

118 
	}
}

121 
	$myfunc
(c⁄° *
∑th«me
, c⁄° 
°©
 *
°©±r
, 
ty≥
)

123 
ty≥
) {

124 
FTW_F
:

125 
°©±r
->
°_mode
 & 
S_IFMT
) {

126 
S_IFREG
: 
ƒeg
++; ;

127 
S_IFBLK
: 
nblk
++; ;

128 
S_IFCHR
: 
nchr
++; ;

129 
S_IFIFO
: 
nfifo
++; ;

130 
S_IFLNK
: 
n¶ök
++; ;

131 
S_IFSOCK
: 
nsock
++; ;

132 
S_IFDIR
:

133 
	`îr_dump
("f‹ S_IFDIR f‹ %s", 
∑th«me
);

138 
FTW_D
:

139 
ndú
++;

142 
FTW_DNR
:

143 
	`îr_ªt
("ˇn'àªad dúe˘‹y %s", 
∑th«me
);

146 
FTW_NS
:

147 
	`îr_ªt
("°©Éº‹ f‹ %s", 
∑th«me
);

151 
	`îr_dump
("unknow¿ty≥ %d f‹Ö©h«mê%s", 
ty≥
, 
∑th«me
);

155 
	}
}

	@file/hello.c

1 
	~"≠ue.h
"

4 
	$maö
()

6 
	`¥ötf
("hñlÿw‹ld fromÖro˚s†ID %d\n", 
	`gëpid
());

7 
	`exô
(0);

8 
	}
}

	@file/hole.c

1 
	~"≠ue.h
"

2 
	~<f˙é.h
>

4 
	gbuf1
[] = "abcdefghij";

5 
	gbuf2
[] = "ABCDEFGHIJ";

8 
	$maö
()

10 
fd
;

12 i‡((
fd
 = 
	`¸ót
("fûe.hﬁe", 
FILE_MODE
)) < 0)

13 
	`îr_sys
("creatÉrror");

15 i‡(
	`wrôe
(
fd
, 
buf1
, 10) != 10)

16 
	`îr_sys
("buf1 writeÉrror");

19 i‡(
	`l£ek
(
fd
, 16384, 
SEEK_SET
) == -1)

20 
	`îr_sys
("lseekÉrror");

23 i‡(
	`wrôe
(
fd
, 
buf2
, 10) != 10)

24 
	`îr_sys
("buf2 writeÉrror");

27 
	`exô
(0);

28 
	}
}

	@file/longpath.c

1 
	~"≠ue.h
"

2 
	~<f˙é.h
>

4 
	#DEPTH
 100

	)

5 
	#MYHOME
 "/home/ßr"

	)

6 
	#NAME
 "Æ⁄gl⁄gl⁄gl⁄gl⁄gl⁄gl⁄gl⁄gl⁄gl⁄g«me"

	)

7 
	#MAXSZ
 8192

	)

10 
	$maö
()

12 
i
, 
size
;

13 *
∑th
;

15 i‡(
	`chdú
(
MYHOME
) < 0)

16 
	`îr_sys
("chdirÉrror");

18 
i
 = 0; i < 
DEPTH
; i++) {

19 i‡(
	`mkdú
(
NAME
, 
DIR_MODE
) < 0)

20 
	`îr_sys
("mkdú faûed, i = %d", 
i
);

21 i‡(
	`chdú
(
NAME
) < 0)

22 
	`îr_sys
("chdú faûed, i = %d", 
i
);

24 i‡(
	`¸ót
("afûe", 
FILE_MODE
) < 0)

25 
	`îr_sys
("creatÉrror");

31 
∑th
 = 
	`∑th_Æloc
(&
size
);

33 i‡(
	`gëcwd
(
∑th
, 
size
Ë!
NULL
) {

36 
	`îr_ªt
("gëcwd faûed, sizê%d", 
size
);

37 
size
 += 100;

38 i‡(
size
 > 
MAXSZ
)

39 
	`îr_quô
("giving up");

40 i‡((
∑th
 = 
	`ªÆloc
’©h, 
size
)Ë=
NULL
)

41 
	`îr_sys
("reallocÉrror");

44 
	`¥ötf
("Àngth = %d\n%s\n", 
	`°æí
(
∑th
),Öath);

46 
	`exô
(0);

47 
	}
}

	@file/ls1.c

1 
	~"≠ue.h
"

2 
	~<dúít.h
>

5 
	$maö
(
¨gc
, *
¨gv
[])

7 
DIR
 *
dp
;

8 
dúít
 *
dúp
;

10 i‡(
¨gc
 != 2)

11 
	`îr_quô
("usage:Üs directory_name");

13 i‡((
dp
 = 
	`›ídú
(
¨gv
[1])Ë=
NULL
)

14 
	`îr_sys
("ˇn'à›í %s", 
¨gv
[1]);

15 (
dúp
 = 
	`ªaddú
(
dp
)Ë!
NULL
)

16 
	`¥ötf
("%s\n", 
dúp
->
d_«me
);

18 
	`˛o£dú
(
dp
);

19 
	`exô
(0);

20 
	}
}

	@file/mycd.c

1 
	~"≠ue.h
"

4 
	$maö
()

6 i‡(
	`chdú
("/tmp") < 0)

7 
	`îr_sys
("chdir failed");

8 
	`¥ötf
("chdirÅo /tmp succeeded\n");

9 
	`exô
(0);

10 
	}
}

	@file/seek.c

1 
	~"≠ue.h
"

4 
	$maö
()

6 i‡(
	`l£ek
(
STDIN_FILENO
, 0, 
SEEK_CUR
) == -1)

7 
	`¥ötf
("cannot seek\n");

9 
	`¥ötf
("seek OK\n");

10 
	`exô
(0);

11 
	}
}

	@file/testerror.c

1 
	~"≠ue.h
"

2 
	~<î∫o.h
>

5 
	$maö
(
¨gc
, *
¨gv
[])

7 
	`Ârötf
(
°dîr
, "EACCES: %s\n", 
	`°ªº‹
(
EACCES
));

8 
î∫o
 = 
ENOENT
;

9 
	`≥º‹
(
¨gv
[0]);

10 
	`exô
(0);

11 
	}
}

	@file/uidgid.c

1 
	~"≠ue.h
"

4 
	$maö
()

6 
	`¥ötf
("uid = %d, gid = %d\n", 
	`gëuid
(), 
	`gëgid
());

7 
	`exô
(0);

8 
	}
}

	@file/umask.c

1 
	~"≠ue.h
"

2 
	~<f˙é.h
>

4 
	#RWRWRW
 (
S_IRUSR
|
S_IWUSR
|
S_IRGRP
|
S_IWGRP
|
S_IROTH
|
S_IWOTH
)

	)

7 
	$maö
()

9 
	`umask
(0);

10 i‡(
	`¸ót
("foo", 
RWRWRW
) < 0)

11 
	`îr_sys
("creatÉrror for foo");

12 
	`umask
(
S_IRGRP
 | 
S_IWGRP
 | 
S_IROTH
 | 
S_IWOTH
);

13 i‡(
	`¸ót
("b¨", 
RWRWRW
) < 0)

14 
	`îr_sys
("creatÉrror for bar");

15 
	`exô
(0);

16 
	}
}

	@file/unlink.c

1 
	~"≠ue.h
"

2 
	~<f˙é.h
>

5 
	$maö
()

7 i‡(
	`›í
("ãmpfûe", 
O_RDWR
) < 0)

8 
	`îr_sys
("openÉrror");

9 i‡(
	`u∆ök
("tempfile") < 0)

10 
	`îr_sys
("unlinkÉrror");

11 
	`¥ötf
("file unlinked\n");

12 
	`¶ìp
(15);

13 
	`¥ötf
("done\n");

14 
	`exô
(0);

15 
	}
}

	@file/zap.c

1 
	~"≠ue.h
"

2 
	~<f˙é.h
>

3 
	~<utime.h
>

6 
	$maö
(
¨gc
, *
¨gv
[])

8 
i
, 
fd
;

9 
°©
 
°©buf
;

10 
utimbuf
 
timebuf
;

12 
i
 = 1; i < 
¨gc
; i++) {

13 i‡(
	`°©
(
¨gv
[
i
], &
°©buf
) < 0) {

14 
	`îr_ªt
("%s: sèàîr‹", 
¨gv
[
i
]);

17 i‡((
fd
 = 
	`›í
(
¨gv
[
i
], 
O_RDWR
 | 
O_TRUNC
)) < 0) {

18 
	`îr_ªt
("%s: o≥¿îr‹", 
¨gv
[
i
]);

21 
	`˛o£
(
fd
);

22 
timebuf
.
a˘ime
 = 
°©buf
.
°_©ime
;

23 
timebuf
.
modtime
 = 
°©buf
.
°_mtime
;

24 i‡(
	`utime
(
¨gv
[
i
], &
timebuf
) < 0) {

25 
	`îr_ªt
("%s: utimêîr‹", 
¨gv
[
i
]);

29 
	`exô
(0);

30 
	}
}

	@include/apue.h

3 #i‚def 
_APUE_H


4 
	#_APUE_H


	)

6 #i‡
deföed
(
SOLARIS
)

7 
	#_XOPEN_SOURCE
 500

	)

8 
	#CMSG_LEN
(
x
Ë
	`_CMSG_DATA_ALIGN
((
cmsghdr
)+(x))

	)

9 #ñi‡!
deföed
(
BSD
)

10 
	#_XOPEN_SOURCE
 600

	)

13 
	~<sys/ty≥s.h
>

14 
	~<sys/°©.h
>

15 
	~<sys/ãrmios.h
>

16 #i‚de‡
TIOCGWINSZ


17 
	~<sys/io˘l.h
>

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°ddef.h
>

22 
	~<°rög.h
>

23 
	~<uni°d.h
>

24 
	~<sig«l.h
>

26 
	#MAXLINE
 4096

	)

31 
	#FILE_MODE
 (
S_IRUSR
 | 
S_IWUSR
 | 
S_IRGRP
 | 
S_IROTH
)

	)

36 
	#DIR_MODE
 (
FILE_MODE
 | 
S_IXUSR
 | 
S_IXGRP
 | 
S_IXOTH
)

	)

38 
	tSigfunc
();

40 #if 
deföed
(
SIG_IGN
Ë&& !deföed(
SIG_ERR
)

41 
	#SIG_ERR
 ((
Sigfunc
 *)-1)

	)

44 
	#mö
(
a
,
b
Ë(◊Ë< (bË? (aË: (b))

	)

45 
	#max
(
a
,
b
Ë(◊Ë> (bË? (aË: (b))

	)

50 *
∑th_Æloc
(*);

51 
›í_max
();

52 
˛r_Ê
(, );

53 
£t_Ê
(, );

54 
¥_exô
();

55 
¥_mask
(const *);

56 
Sigfunc
 *
sig«l_öå
(, Sigfunc *);

58 
ây_cbªak
();

59 
ây_øw
();

60 
ây_ª£t
();

61 
ây_©exô
();

62 #ifdef 
ECHO


63 
ãrmios
 *
ây_ãrmios
();

66 
¶ìp_us
();

67 
ssize_t
 
ªadn
(, *, 
size_t
);

68 
ssize_t
 
wrôí
(, c⁄° *, 
size_t
);

69 
d´m⁄ize
(const *);

71 
s_pùe
(*);

72 
ªcv_fd
(, 
	$ssize_t
 (*
func
)(,

73 c⁄° *, 
size_t
));

74 
	`£nd_fd
(, );

75 
	`£nd_îr
(, ,

77 
	`£rv_li°í
(const *);

78 
	`£rv_ac˚±
(, 
uid_t
 *);

79 
	`˛i_c⁄n
(const *);

80 
	`buf_¨gs
(*, (*
func
)(,

83 
	`±ym_›í
(*, );

84 
	`±ys_›í
(*);

85 #ifdef 
TIOCGWINSZ


86 
pid_t
 
	`±y_f‹k
(*, *, , c⁄° 
ãrmios
 *,

87 c⁄° 
wösize
 *);

90 
	`lock_ªg
(, , , 
off_t
, , off_t);

91 
	#ªad_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

92 
	`lock_ªg
((
fd
), 
F_SETLK
, 
F_RDLCK
, (
off£t
), (
whí˚
), (
Àn
))

	)

93 
	#ªadw_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

94 
	`lock_ªg
((
fd
), 
F_SETLKW
, 
F_RDLCK
, (
off£t
), (
whí˚
), (
Àn
))

	)

95 
	#wrôe_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

96 
	`lock_ªg
((
fd
), 
F_SETLK
, 
F_WRLCK
, (
off£t
), (
whí˚
), (
Àn
))

	)

97 
	#wrôew_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

98 
	`lock_ªg
((
fd
), 
F_SETLKW
, 
F_WRLCK
, (
off£t
), (
whí˚
), (
Àn
))

	)

99 
	#un_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

100 
	`lock_ªg
((
fd
), 
F_SETLK
, 
F_UNLCK
, (
off£t
), (
whí˚
), (
Àn
))

	)

102 
pid_t
 
	`lock_ã°
(, , 
off_t
, , off_t);

104 
	#is_ªad_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

105 (
	`lock_ã°
((
fd
), 
F_RDLCK
, (
off£t
), (
whí˚
), (
Àn
)Ë=0)

	)

106 
	#is_wrôe_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

107 (
	`lock_ã°
((
fd
), 
F_WRLCK
, (
off£t
), (
whí˚
), (
Àn
)Ë=0)

	)

109 
	`îr_dump
(const *, ...);

110 
	`îr_msg
(const *, ...);

111 
	`îr_quô
(const *, ...);

112 
	`îr_exô
(, const *, ...);

113 
	`îr_ªt
(const *, ...);

114 
	`îr_sys
(const *, ...);

116 
	`log_msg
(const *, ...);

117 
	`log_›í
(const *, , );

118 
	`log_quô
(const *, ...);

119 
	`log_ªt
(const *, ...);

120 
	`log_sys
(const *, ...);

122 
	`TELL_WAIT
();

123 
	`TELL_PARENT
(
pid_t
);

124 
	`TELL_CHILD
(
pid_t
);

125 
	`WAIT_PARENT
();

126 
	`WAIT_CHILD
();

	@ipc/add2.c

1 
	~"≠ue.h
"

4 
	$maö
()

6 
n
, 
öt1
, 
öt2
;

7 
löe
[
MAXLINE
];

9 (
n
 = 
	`ªad
(
STDIN_FILENO
, 
löe
, 
MAXLINE
)) > 0) {

10 
löe
[
n
] = 0;

11 i‡(
	`ssˇnf
(
löe
, "%d%d", &
öt1
, &
öt2
) == 2) {

12 
	`•rötf
(
löe
, "%d\n", 
öt1
 + 
öt2
);

13 
n
 = 
	`°æí
(
löe
);

14 i‡(
	`wrôe
(
STDOUT_FILENO
, 
löe
, 
n
) !=Ç)

15 
	`îr_sys
("writeÉrror");

17 i‡(
	`wrôe
(
STDOUT_FILENO
, "invalidárgs\n", 13) != 13)

18 
	`îr_sys
("writeÉrror");

21 
	`exô
(0);

22 
	}
}

	@ipc/add2stdio.c

1 
	~"≠ue.h
"

4 
	$maö
()

6 
öt1
, 
öt2
;

7 
löe
[
MAXLINE
];

9 
	`fgës
(
löe
, 
MAXLINE
, 
°dö
Ë!
NULL
) {

10 i‡(
	`ssˇnf
(
löe
, "%d%d", &
öt1
, &
öt2
) == 2) {

11 i‡(
	`¥ötf
("%d\n", 
öt1
 + 
öt2
Ë=
EOF
)

12 
	`îr_sys
("printfÉrror");

14 i‡(
	`¥ötf
("övÆidárgs\n"Ë=
EOF
)

15 
	`îr_sys
("printfÉrror");

18 
	`exô
(0);

19 
	}
}

	@ipc/fifo1.c

1 
	~"≠ue.h
"

2 
	~<f˙é.h
>

4 
	#FIFO
 "ãmp.fifo"

	)

7 
	$maö
()

9 
fdªad
, 
fdwrôe
;

11 
	`u∆ök
(
FIFO
);

12 i‡(
	`mkfifo
(
FIFO
, 
FILE_MODE
) < 0)

13 
	`îr_sys
("mkfifoÉrror");

14 i‡((
fdªad
 = 
	`›í
(
FIFO
, 
O_RDONLY
 | 
O_NONBLOCK
)) < 0)

15 
	`îr_sys
("openÉrror forÑeading");

16 i‡((
fdwrôe
 = 
	`›í
(
FIFO
, 
O_WRONLY
)) < 0)

17 
	`îr_sys
("openÉrror for writing");

18 
	`˛r_Ê
(
fdªad
, 
O_NONBLOCK
);

19 
	`exô
(0);

20 
	}
}

	@ipc/myuclc.c

1 
	~"≠ue.h
"

2 
	~<˘y≥.h
>

5 
	$maö
()

7 
c
;

9 (
c
 = 
	`gëch¨
()Ë!
EOF
) {

10 i‡(
	`isuµî
(
c
))

11 
c
 = 
	`tﬁowî
(c);

12 i‡(
	`putch¨
(
c
Ë=
EOF
)

13 
	`îr_sys
("outputÉrror");

14 i‡(
c
 == '\n')

15 
	`fÊush
(
°dout
);

17 
	`exô
(0);

18 
	}
}

	@ipc/pipe1.c

1 
	~"≠ue.h
"

4 
	$maö
()

6 
n
;

7 
fd
[2];

8 
pid_t
 
pid
;

9 
löe
[
MAXLINE
];

11 i‡(
	`pùe
(
fd
) < 0)

12 
	`îr_sys
("pipeÉrror");

13 i‡((
pid
 = 
	`f‹k
()) < 0) {

14 
	`îr_sys
("forkÉrror");

15 } i‡(
pid
 > 0) {

16 
	`˛o£
(
fd
[0]);

17 
	`wrôe
(
fd
[1], "hello world\n", 12);

19 
	`˛o£
(
fd
[1]);

20 
n
 = 
	`ªad
(
fd
[0], 
löe
, 
MAXLINE
);

21 
	`wrôe
(
STDOUT_FILENO
, 
löe
, 
n
);

23 
	`exô
(0);

24 
	}
}

	@ipc/pipe2.c

1 
	~"≠ue.h
"

2 
	~<sys/waô.h
>

4 
	#DEF_PAGER
 "/bö/m‹e"

	)

7 
	$maö
(
¨gc
, *
¨gv
[])

9 
n
;

10 
fd
[2];

11 
pid_t
 
pid
;

12 *
∑gî
, *
¨gv0
;

13 
löe
[
MAXLINE
];

14 
FILE
 *
Â
;

16 i‡(
¨gc
 != 2)

17 
	`îr_quô
("usage:á.out <pathname>");

19 i‡((
Â
 = 
	`f›í
(
¨gv
[1], "r")Ë=
NULL
)

20 
	`îr_sys
("ˇn'à›í %s", 
¨gv
[1]);

21 i‡(
	`pùe
(
fd
) < 0)

22 
	`îr_sys
("pipeÉrror");

24 i‡((
pid
 = 
	`f‹k
()) < 0) {

25 
	`îr_sys
("forkÉrror");

26 } i‡(
pid
 > 0) {

27 
	`˛o£
(
fd
[0]);

30 
	`fgës
(
löe
, 
MAXLINE
, 
Â
Ë!
NULL
) {

31 
n
 = 
	`°æí
(
löe
);

32 i‡(
	`wrôe
(
fd
[1], 
löe
, 
n
) !=Ç)

33 
	`îr_sys
("writeÉrrorÅoÖipe");

35 i‡(
	`„º‹
(
Â
))

36 
	`îr_sys
("fgetsÉrror");

38 
	`˛o£
(
fd
[1]);

40 i‡(
	`waôpid
(
pid
, 
NULL
, 0) < 0)

41 
	`îr_sys
("waitpidÉrror");

42 
	`exô
(0);

44 
	`˛o£
(
fd
[1]);

45 i‡(
fd
[0] !
STDIN_FILENO
) {

46 i‡(
	`dup2
(
fd
[0], 
STDIN_FILENO
) != STDIN_FILENO)

47 
	`îr_sys
("dup2ÉrrorÅo stdin");

48 
	`˛o£
(
fd
[0]);

52 i‡((
∑gî
 = 
	`gëív
("PAGER")Ë=
NULL
)

53 
∑gî
 = 
DEF_PAGER
;

54 i‡((
¨gv0
 = 
	`°ºchr
(
∑gî
, '/')Ë!
NULL
)

55 
¨gv0
++;

57 
¨gv0
 = 
∑gî
;

59 i‡(
	`exe˛
(
∑gî
, 
¨gv0
, (*)0) < 0)

60 
	`îr_sys
("exe˛Éº‹ f‹ %s", 
∑gî
);

62 
	`exô
(0);

63 
	}
}

	@ipc/pipe4.c

1 
	~"≠ue.h
"

3 
sig_pùe
();

6 
	$maö
()

8 
n
, 
fd1
[2], 
fd2
[2];

9 
pid_t
 
pid
;

10 
löe
[
MAXLINE
];

12 i‡(
	`sig«l
(
SIGPIPE
, 
sig_pùe
Ë=
SIG_ERR
)

13 
	`îr_sys
("signalÉrror");

15 i‡(
	`pùe
(
fd1
Ë< 0 ||Öùe(
fd2
) < 0)

16 
	`îr_sys
("pipeÉrror");

18 i‡((
pid
 = 
	`f‹k
()) < 0) {

19 
	`îr_sys
("forkÉrror");

20 } i‡(
pid
 > 0) {

21 
	`˛o£
(
fd1
[0]);

22 
	`˛o£
(
fd2
[1]);

24 
	`fgës
(
löe
, 
MAXLINE
, 
°dö
Ë!
NULL
) {

25 
n
 = 
	`°æí
(
löe
);

26 i‡(
	`wrôe
(
fd1
[1], 
löe
, 
n
) !=Ç)

27 
	`îr_sys
("writeÉrrorÅoÖipe");

28 i‡((
n
 = 
	`ªad
(
fd2
[0], 
löe
, 
MAXLINE
)) < 0)

29 
	`îr_sys
("readÉrror fromÖipe");

30 i‡(
n
 == 0) {

31 
	`îr_msg
("child closedÖipe");

34 
löe
[
n
] = 0;

35 i‡(
	`Âuts
(
löe
, 
°dout
Ë=
EOF
)

36 
	`îr_sys
("fputsÉrror");

39 i‡(
	`„º‹
(
°dö
))

40 
	`îr_sys
("fgetsÉrror on stdin");

41 
	`exô
(0);

43 
	`˛o£
(
fd1
[1]);

44 
	`˛o£
(
fd2
[0]);

45 i‡(
fd1
[0] !
STDIN_FILENO
) {

46 i‡(
	`dup2
(
fd1
[0], 
STDIN_FILENO
) != STDIN_FILENO)

47 
	`îr_sys
("dup2ÉrrorÅo stdin");

48 
	`˛o£
(
fd1
[0]);

51 i‡(
fd2
[1] !
STDOUT_FILENO
) {

52 i‡(
	`dup2
(
fd2
[1], 
STDOUT_FILENO
) != STDOUT_FILENO)

53 
	`îr_sys
("dup2ÉrrorÅo stdout");

54 
	`˛o£
(
fd2
[1]);

56 i‡(
	`exe˛
("./add2", "add2", (*)0) < 0)

57 
	`îr_sys
("execlÉrror");

59 
	`exô
(0);

60 
	}
}

63 
	$sig_pùe
(
signo
)

65 
	`¥ötf
("SIGPIPE caught\n");

66 
	`exô
(1);

67 
	}
}

	@ipc/popen1.c

1 
	~"≠ue.h
"

2 
	~<sys/waô.h
>

5 
	$maö
()

7 
löe
[
MAXLINE
];

8 
FILE
 *
Âö
;

10 i‡((
Âö
 = 
	`p›í
("myu˛c", "r")Ë=
NULL
)

11 
	`îr_sys
("popenÉrror");

13 
	`Âuts
("¥om±> ", 
°dout
);

14 
	`fÊush
(
°dout
);

15 i‡(
	`fgës
(
löe
, 
MAXLINE
, 
Âö
Ë=
NULL
)

17 i‡(
	`Âuts
(
löe
, 
°dout
Ë=
EOF
)

18 
	`îr_sys
("fputsÉrrorÅoÖipe");

20 i‡(
	`p˛o£
(
Âö
) == -1)

21 
	`îr_sys
("pcloseÉrror");

22 
	`putch¨
('\n');

23 
	`exô
(0);

24 
	}
}

	@ipc/popen2.c

1 
	~"≠ue.h
"

2 
	~<sys/waô.h
>

4 
	#PAGER
 "${PAGER:-m‹e}"

	)

7 
	$maö
(
¨gc
, *
¨gv
[])

9 
löe
[
MAXLINE
];

10 
FILE
 *
Âö
, *
Âout
;

12 i‡(
¨gc
 != 2)

13 
	`îr_quô
("usage:á.out <pathname>");

14 i‡((
Âö
 = 
	`f›í
(
¨gv
[1], "r")Ë=
NULL
)

15 
	`îr_sys
("ˇn'à›í %s", 
¨gv
[1]);

17 i‡((
Âout
 = 
	`p›í
(
PAGER
, "w")Ë=
NULL
)

18 
	`îr_sys
("popenÉrror");

21 
	`fgës
(
löe
, 
MAXLINE
, 
Âö
Ë!
NULL
) {

22 i‡(
	`Âuts
(
löe
, 
Âout
Ë=
EOF
)

23 
	`îr_sys
("fputsÉrrorÅoÖipe");

25 i‡(
	`„º‹
(
Âö
))

26 
	`îr_sys
("fgetsÉrror");

27 i‡(
	`p˛o£
(
Âout
) == -1)

28 
	`îr_sys
("pcloseÉrror");

30 
	`exô
(0);

31 
	}
}

	@ipc/spipe4.c

1 
	~"≠ue.h
"

3 
sig_pùe
();

6 
	$maö
()

8 
n
;

9 
fd
[2];

10 
pid_t
 
pid
;

11 
löe
[
MAXLINE
];

13 i‡(
	`sig«l
(
SIGPIPE
, 
sig_pùe
Ë=
SIG_ERR
)

14 
	`îr_sys
("signalÉrror");

16 i‡(
	`s_pùe
(
fd
) < 0)

17 
	`îr_sys
("pipeÉrror");

19 i‡((
pid
 = 
	`f‹k
()) < 0) {

20 
	`îr_sys
("forkÉrror");

21 } i‡(
pid
 > 0) {

22 
	`˛o£
(
fd
[1]);

23 
	`fgës
(
löe
, 
MAXLINE
, 
°dö
Ë!
NULL
) {

24 
n
 = 
	`°æí
(
löe
);

25 i‡(
	`wrôe
(
fd
[0], 
löe
, 
n
) !=Ç)

26 
	`îr_sys
("writeÉrrorÅoÖipe");

27 i‡((
n
 = 
	`ªad
(
fd
[0], 
löe
, 
MAXLINE
)) < 0)

28 
	`îr_sys
("readÉrror fromÖipe");

29 i‡(
n
 == 0) {

30 
	`îr_msg
("child closedÖipe");

33 
löe
[
n
] = 0;

34 i‡(
	`Âuts
(
löe
, 
°dout
Ë=
EOF
)

35 
	`îr_sys
("fputsÉrror");

38 i‡(
	`„º‹
(
°dö
))

39 
	`îr_sys
("fgetsÉrror on stdin");

40 
	`exô
(0);

42 
	`˛o£
(
fd
[0]);

43 i‡(
fd
[1] !
STDIN_FILENO
 &&

44 
	`dup2
(
fd
[1], 
STDIN_FILENO
) != STDIN_FILENO)

45 
	`îr_sys
("dup2ÉrrorÅo stdin");

46 i‡(
fd
[1] !
STDOUT_FILENO
 &&

47 
	`dup2
(
fd
[1], 
STDOUT_FILENO
) != STDOUT_FILENO)

48 
	`îr_sys
("dup2ÉrrorÅo stdout");

49 i‡(
	`exe˛
("./add2", "add2", (*)0) < 0)

50 
	`îr_sys
("execlÉrror");

52 
	`exô
(0);

53 
	}
}

56 
	$sig_pùe
(
signo
)

58 
	`¥ötf
("SIGPIPE caught\n");

59 
	`exô
(1);

60 
	}
}

	@ipc/tellwait.c

1 
	~"≠ue.h
"

3 
	gpfd1
[2], 
	gpfd2
[2];

6 
	$TELL_WAIT
()

8 i‡(
	`pùe
(
pfd1
Ë< 0 ||Öùe(
pfd2
) < 0)

9 
	`îr_sys
("pipeÉrror");

10 
	}
}

13 
	$TELL_PARENT
(
pid_t
 
pid
)

15 i‡(
	`wrôe
(
pfd2
[1], "c", 1) != 1)

16 
	`îr_sys
("writeÉrror");

17 
	}
}

20 
	$WAIT_PARENT
()

22 
c
;

24 i‡(
	`ªad
(
pfd1
[0], &
c
, 1) != 1)

25 
	`îr_sys
("readÉrror");

27 i‡(
c
 != 'p')

28 
	`îr_quô
("WAIT_PARENT: incorrect data");

29 
	}
}

32 
	$TELL_CHILD
(
pid_t
 
pid
)

34 i‡(
	`wrôe
(
pfd1
[1], "p", 1) != 1)

35 
	`îr_sys
("writeÉrror");

36 
	}
}

39 
	$WAIT_CHILD
()

41 
c
;

43 i‡(
	`ªad
(
pfd2
[0], &
c
, 1) != 1)

44 
	`îr_sys
("readÉrror");

46 i‡(
c
 != 'c')

47 
	`îr_quô
("WAIT_CHILD: incorrect data");

48 
	}
}

	@ipc/tshm.c

1 
	~"≠ue.h
"

2 
	~<sys/shm.h
>

4 
	#ARRAY_SIZE
 40000

	)

5 
	#MALLOC_SIZE
 100000

	)

6 
	#SHM_SIZE
 100000

	)

7 
	#SHM_MODE
 0600

	)

9 
	g¨øy
[
ARRAY_SIZE
];

12 
	$maö
()

14 
shmid
;

15 *
±r
, *
shm±r
;

17 
	`¥ötf
("¨øy[] from %lxÅÿ%lx\n", ()&
¨øy
[0],

18 ()&
¨øy
[
ARRAY_SIZE
]);

19 
	`¥ötf
("°ackáround %lx\n", ()&
shmid
);

21 i‡((
±r
 = 
	`mÆloc
(
MALLOC_SIZE
)Ë=
NULL
)

22 
	`îr_sys
("mallocÉrror");

23 
	`¥ötf
("mÆlo˚d from %lxÅÿ%lx\n", ()
±r
,

24 ()
±r
+
MALLOC_SIZE
);

26 i‡((
shmid
 = 
	`shmgë
(
IPC_PRIVATE
, 
SHM_SIZE
, 
SHM_MODE
)) < 0)

27 
	`îr_sys
("shmgetÉrror");

28 i‡((
shm±r
 = 
	`shm©
(
shmid
, 0, 0)) == (*)-1)

29 
	`îr_sys
("shmatÉrror");

30 
	`¥ötf
("shared memoryáttached from %lxÅo %lx\n",

31 ()
shm±r
, ()shm±r+
SHM_SIZE
);

33 i‡(
	`shm˘l
(
shmid
, 
IPC_RMID
, 0) < 0)

34 
	`îr_sys
("shmctlÉrror");

36 
	`exô
(0);

37 
	}
}

	@ipp/ipp.h

1 #i‚de‡
_IPP_H


2 
	#_IPP_H


	)

12 
	#STATCLASS_OK
(
x
Ë((xË>0x0000 && (xË<0x00ff)

	)

13 
	#STATCLASS_INFO
(
x
Ë((xË>0x0100 && (xË<0x01ff)

	)

14 
	#STATCLASS_REDIR
(
x
Ë((xË>0x0200 && (xË<0x02ff)

	)

15 
	#STATCLASS_CLIERR
(
x
Ë((xË>0x0400 && (xË<0x04ff)

	)

16 
	#STATCLASS_SRVERR
(
x
Ë((xË>0x0500 && (xË<0x05ff)

	)

21 
	#STAT_OK
 0x0000

	)

22 
	#STAT_OK_ATTRIGN
 0x0001

	)

23 
	#STAT_OK_ATTRCON
 0x0002

	)

25 
	#STAT_CLI_BADREQ
 0x0400

	)

26 
	#STAT_CLI_FORBID
 0x0401

	)

27 
	#STAT_CLI_NOAUTH
 0x0402

	)

28 
	#STAT_CLI_NOPERM
 0x0403

	)

29 
	#STAT_CLI_NOTPOS
 0x0404

	)

30 
	#STAT_CLI_TIMOUT
 0x0405

	)

31 
	#STAT_CLI_NOTFND
 0x0406

	)

32 
	#STAT_CLI_OBJGONE
 0x0407

	)

33 
	#STAT_CLI_TOOBIG
 0x0408

	)

34 
	#STAT_CLI_TOOLNG
 0x0409

	)

35 
	#STAT_CLI_BADFMT
 0x040®

	)

36 
	#STAT_CLI_NOTSUP
 0x040b

	)

37 
	#STAT_CLI_NOSCHM
 0x040¯

	)

38 
	#STAT_CLI_NOCHAR
 0x040d

	)

39 
	#STAT_CLI_ATTRCON
 0x040ê

	)

40 
	#STAT_CLI_NOCOMP
 0x040‡

	)

41 
	#STAT_CLI_COMPERR
 0x0410

	)

42 
	#STAT_CLI_FMTERR
 0x0411

	)

43 
	#STAT_CLI_ACCERR
 0x0412

	)

45 
	#STAT_SRV_INTERN
 0x0500

	)

46 
	#STAT_SRV_NOTSUP
 0x0501

	)

47 
	#STAT_SRV_UNAVAIL
 0x0502

	)

48 
	#STAT_SRV_BADVER
 0x0503

	)

49 
	#STAT_SRV_DEVERR
 0x0504

	)

50 
	#STAT_SRV_TMPERR
 0x0505

	)

51 
	#STAT_SRV_REJECT
 0x0506

	)

52 
	#STAT_SRV_TOOBUSY
 0x0507

	)

53 
	#STAT_SRV_CANCEL
 0x0508

	)

54 
	#STAT_SRV_NOMULTI
 0x0509

	)

59 
	#OP_PRINT_JOB
 0x02

	)

60 
	#OP_PRINT_URI
 0x03

	)

61 
	#OP_VALIDATE_JOB
 0x04

	)

62 
	#OP_CREATE_JOB
 0x05

	)

63 
	#OP_SEND_DOC
 0x06

	)

64 
	#OP_SEND_URI
 0x07

	)

65 
	#OP_CANCEL_JOB
 0x08

	)

66 
	#OP_GET_JOB_ATTR
 0x09

	)

67 
	#OP_GET_JOBS
 0x0a

	)

68 
	#OP_GET_PRINTER_ATTR
 0x0b

	)

69 
	#OP_HOLD_JOB
 0x0c

	)

70 
	#OP_RELEASE_JOB
 0x0d

	)

71 
	#OP_RESTART_JOB
 0x0e

	)

72 
	#OP_PAUSE_PRINTER
 0x10

	)

73 
	#OP_RESUME_PRINTER
 0x11

	)

74 
	#OP_PURGE_JOBS
 0x12

	)

79 
	#TAG_OPERATION_ATTR
 0x01

	)

80 
	#TAG_JOB_ATTR
 0x02

	)

81 
	#TAG_END_OF_ATTR
 0x03

	)

82 
	#TAG_PRINTER_ATTR
 0x04

	)

83 
	#TAG_UNSUPP_ATTR
 0x05

	)

88 
	#TAG_UNSUPPORTED
 0x10

	)

89 
	#TAG_UNKNOWN
 0x12

	)

90 
	#TAG_NONE
 0x13

	)

91 
	#TAG_INTEGER
 0x21

	)

92 
	#TAG_BOOLEAN
 0x22

	)

93 
	#TAG_ENUM
 0x23

	)

94 
	#TAG_OCTSTR
 0x30

	)

95 
	#TAG_DATETIME
 0x31

	)

96 
	#TAG_RESOLUTION
 0x32

	)

97 
	#TAG_INTRANGE
 0x33

	)

98 
	#TAG_TEXTWLANG
 0x35

	)

99 
	#TAG_NAMEWLANG
 0x36

	)

100 
	#TAG_TEXTWOLANG
 0x41

	)

101 
	#TAG_NAMEWOLANG
 0x42

	)

102 
	#TAG_KEYWORD
 0x44

	)

103 
	#TAG_URI
 0x45

	)

104 
	#TAG_URISCHEME
 0x46

	)

105 
	#TAG_CHARSET
 0x47

	)

106 
	#TAG_NATULANG
 0x48

	)

107 
	#TAG_MIMETYPE
 0x49

	)

109 
	sùp_hdr
 {

110 
öt8_t
 
	mmaj‹_vîsi⁄
;

111 
öt8_t
 
	mmö‹_vîsi⁄
;

113 
öt16_t
 
	m›
;

114 
öt16_t
 
	m°
;

115 } 
	mu
;

116 
öt32_t
 
	mªque°_id
;

117 
	m©å_group
[1];

121 
	#›î©i⁄
 
u
.
›


	)

122 
	#°©us
 
u
.
°


	)

	@ipp/print.c

6 
	~"≠ue.h
"

7 
	~"¥öt.h
"

8 
	~<f˙é.h
>

9 
	~<pwd.h
>

14 
	glog_to_°dîr
 = 1;

16 
submô_fûe
(, , c⁄° *, 
size_t
, );

19 
	$maö
(
¨gc
, *
¨gv
[])

21 
fd
, 
sockfd
, 
îr
, 
ãxt
, 
c
;

22 
°©
 
sbuf
;

23 *
ho°
;

24 
addröfo
 *
aûi°
, *
aù
;

26 
îr
 = 0;

27 
ãxt
 = 0;

28 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "t")) != -1) {

29 
c
) {

31 
ãxt
 = 1;

35 
îr
 = 1;

39 i‡(
îr
 || (
›töd
 !
¨gc
 - 1))

40 
	`îr_quô
("usage:Örint [-t] filename");

41 i‡((
fd
 = 
	`›í
(
¨gv
[
›töd
], 
O_RDONLY
)) < 0)

42 
	`îr_sys
("¥öt: c™'à›í %s", 
¨gv
[1]);

43 i‡(
	`f°©
(
fd
, &
sbuf
) < 0)

44 
	`îr_sys
("¥öt: c™'à°© %s", 
¨gv
[1]);

45 i‡(!
	`S_ISREG
(
sbuf
.
°_mode
))

46 
	`îr_quô
("¥öt: %†mu° bê®ªguœ∏fûe\n", 
¨gv
[1]);

51 i‡((
ho°
 = 
	`gë_¥öt£rvî
()Ë=
NULL
)

52 
	`îr_quô
("print:ÇoÖrint server defined");

53 i‡((
îr
 = 
	`gëaddæi°
(
ho°
, "¥öt", &
aûi°
)) != 0)

54 
	`îr_quô
("¥öt: gëaddröfÿîr‹: %s", 
	`gai_°ªº‹
(
îr
));

56 
aù
 = 
aûi°
;áù !
NULL
;áù =áù->
ai_√xt
) {

57 i‡((
sockfd
 = 
	`sockë
(
AF_INET
, 
SOCK_STREAM
, 0)) < 0) {

58 
îr
 = 
î∫o
;

59 } i‡(
	`c⁄√˘_ªåy
(
sockfd
, 
aù
->
ai_addr
,

60 
aù
->
ai_addæí
) < 0) {

61 
îr
 = 
î∫o
;

63 
	`submô_fûe
(
fd
, 
sockfd
, 
¨gv
[1], 
sbuf
.
°_size
, 
ãxt
);

64 
	`exô
(0);

67 
î∫o
 = 
îr
;

68 
	`îr_ªt
("¥öt: c™'àc⁄è˘ %s", 
ho°
);

69 
	`exô
(1);

70 
	}
}

76 
	$submô_fûe
(
fd
, 
sockfd
, c⁄° *
‚ame
, 
size_t
 
nbyãs
,

77 
ãxt
)

79 
ƒ
, 
nw
, 
Àn
;

80 
∑sswd
 *
pwd
;

81 
¥öåeq
 
ªq
;

82 
¥öåe•
 
ªs
;

83 
buf
[
IOBUFSZ
];

88 i‡((
pwd
 = 
	`gëpwuid
(
	`gëeuid
())Ë=
NULL
)

89 
	`°r˝y
(
ªq
.
u£∫m
, "unknown");

91 
	`°r˝y
(
ªq
.
u£∫m
, 
pwd
->
pw_«me
);

92 
ªq
.
size
 = 
	`ht⁄l
(
nbyãs
);

93 i‡(
ãxt
)

94 
ªq
.
Êags
 = 
	`ht⁄l
(
PR_TEXT
);

96 
ªq
.
Êags
 = 0;

97 i‡((
Àn
 = 
	`°æí
(
‚ame
)Ë>
JOBNM_MAX
) {

102 
	`°r˝y
(
ªq
.
jobnm
, "... ");

103 
	`°∫ˇt
(
ªq
.
jobnm
, &
‚ame
[
Àn
-
JOBNM_MAX
+5], JOBNM_MAX-5);

105 
	`°r˝y
(
ªq
.
jobnm
, 
‚ame
);

111 
nw
 = 
	`wrôí
(
sockfd
, &
ªq
, (
¥öåeq
));

112 i‡(
nw
 !(
¥öåeq
)) {

113 i‡(
nw
 < 0)

114 
	`îr_sys
("can't writeÅoÖrint server");

116 
	`îr_quô
("short write (%d/%d)ÅoÖrint server",

117 
nw
, (
¥öåeq
));

123 (
ƒ
 = 
	`ªad
(
fd
, 
buf
, 
IOBUFSZ
)) != 0) {

124 
nw
 = 
	`wrôí
(
sockfd
, 
buf
, 
ƒ
);

125 i‡(
nw
 !
ƒ
) {

126 i‡(
nw
 < 0)

127 
	`îr_sys
("can't writeÅoÖrint server");

129 
	`îr_quô
("short write (%d/%d)ÅoÖrint server",

130 
nw
, 
ƒ
);

137 i‡((
ƒ
 = 
	`ªadn
(
sockfd
, &
ªs
, (
¥öåe•
))) !=

138 (
¥öåe•
))

139 
	`îr_sys
("can'tÑeadÑesponse from server");

140 i‡(
ªs
.
ªtcode
 != 0) {

141 
	`¥ötf
("ªje˘ed: %s\n", 
ªs
.
msg
);

142 
	`exô
(1);

144 
	`¥ötf
("job ID %ld\n", 
	`¡ohl
(
ªs
.
jobid
));

146 
	`exô
(0);

147 
	}
}

	@ipp/print.h

1 #i‚de‡
_PRINT_H


2 
	#_PRINT_H


	)

6 
	~<sys/sockë.h
>

7 
	~<¨∑/öë.h
>

8 #i‡
deföed
(
BSD
Ë|| deföed(
MACOS
)

9 
	~<√töë/ö.h
>

11 
	~<√tdb.h
>

12 
	~<î∫o.h
>

14 
	#CONFIG_FILE
 "/ëc/¥öãr.c⁄f"

	)

15 
	#SPOOLDIR
 "/v¨/•oﬁ/¥öãr"

	)

16 
	#JOBFILE
 "jobno"

	)

17 
	#DATADIR
 "d©a"

	)

18 
	#REQDIR
 "ªqs"

	)

20 
	#FILENMSZ
 64

	)

21 
	#FILEPERM
 (
S_IRUSR
|
S_IWUSR
)

	)

22 
	#USERNM_MAX
 64

	)

23 
	#JOBNM_MAX
 256

	)

24 
	#MSGLEN_MAX
 512

	)

26 #i‚de‡
HOST_NAME_MAX


27 
	#HOST_NAME_MAX
 256

	)

30 
	#IPP_PORT
 631

	)

31 
	#QLEN
 10

	)

32 
	#IBUFSZ
 512

	)

33 
	#HBUFSZ
 512

	)

34 
	#IOBUFSZ
 8192

	)

36 #i‚de‡
ETIME


37 
	#ETIME
 
ETIMEDOUT


	)

40 
gëaddæi°
(const *, const *,

41 
addröfo
 **);

42 *
gë_¥öt£rvî
();

43 
addröfo
 *
gë_¥öèddr
();

44 
ssize_t
 
åód
(, *, 
size_t
, );

45 
ssize_t
 
åódn
(, *, 
size_t
, );

46 
c⁄√˘_ªåy
(, c⁄° 
sockaddr
 *, 
sockÀn_t
);

47 
öô£rvî
(, 
sockaddr
 *, 
sockÀn_t
, );

52 
	s¥öåeq
 {

53 
	msize
;

54 
	mÊags
;

55 
	mu£∫m
[
USERNM_MAX
];

56 
	mjobnm
[
JOBNM_MAX
];

62 
	#PR_TEXT
 0x01

	)

67 
	s¥öåe•
 {

68 
	mªtcode
;

69 
	mjobid
;

70 
	mmsg
[
MSGLEN_MAX
];

	@ipp/printd.c

4 
	~"≠ue.h
"

5 
	~"¥öt.h
"

6 
	~"ùp.h
"

7 
	~<f˙é.h
>

8 
	~<dúít.h
>

9 
	~<˘y≥.h
>

10 
	~<pwd.h
>

11 
	~<±hªad.h
>

12 
	~<°rögs.h
>

13 
	~<sys/£À˘.h
>

14 
	~<sys/uio.h
>

19 
	#HTTP_INFO
(
x
Ë((xË>100 && (xË<199)

	)

20 
	#HTTP_SUCCESS
(
x
Ë((xË>200 && (xË<299)

	)

25 
	sjob
 {

26 
job
 *
	m√xt
;

27 
job
 *
	m¥ev
;

28 
	mjobid
;

29 
¥öåeq
 
	mªq
;

35 
	sw‹kî_thªad
 {

36 
w‹kî_thªad
 *
	m√xt
;

37 
w‹kî_thªad
 *
	m¥ev
;

38 
±hªad_t
 
	mtid
;

39 
	msockfd
;

45 
	glog_to_°dîr
 = 0;

50 
addröfo
 *
	g¥öãr
;

51 *
	g¥öãr_«me
;

52 
±hªad_muãx_t
 
	gc⁄figlock
 = 
PTHREAD_MUTEX_INITIALIZER
;

53 
	gªªad
;

58 
w‹kî_thªad
 *
	gw‹kîs
;

59 
±hªad_muãx_t
 
	gw‹kîlock
 = 
PTHREAD_MUTEX_INITIALIZER
;

60 
sig£t_t
 
	gmask
;

65 
job
 *
	gjobhód
, *
	gjobèû
;

66 
	gjobfd
;

67 
	g√xtjob
;

68 
±hªad_muãx_t
 
	gjoblock
 = 
PTHREAD_MUTEX_INITIALIZER
;

69 
±hªad_c⁄d_t
 
	gjobwaô
 = 
PTHREAD_COND_INITIALIZER
;

74 
öô_ªque°
();

75 
öô_¥öãr
();

76 
upd©e_jobno
();

77 
gë_√wjobno
();

78 
add_job
(
¥öåeq
 *, );

79 
ª∂a˚_job
(
job
 *);

80 
ªmove_job
(
job
 *);

81 
buûd_q⁄°¨t
();

82 *
˛õ¡_thªad
(*);

83 *
¥öãr_thªad
(*);

84 *
sig«l_thªad
(*);

85 
ssize_t
 
ªadm‹e
(, **, , *);

86 
¥öãr_°©us
(, 
job
 *);

87 
add_w‹kî
(
±hªad_t
, );

88 
kûl_w‹kîs
();

89 
˛õ¡_˛ónup
(*);

98 
	$maö
(
¨gc
, *
¨gv
[])

100 
±hªad_t
 
tid
;

101 
addröfo
 *
aûi°
, *
aù
;

102 
sockfd
, 
îr
, 
i
, 
n
, 
maxfd
;

103 *
ho°
;

104 
fd_£t
 
ªndezvous
, 
r£t
;

105 
siga˘i⁄
 
ß
;

106 
∑sswd
 *
pwdp
;

108 i‡(
¨gc
 != 1)

109 
	`îr_quô
("usage:Örintd");

110 
	`d´m⁄ize
("printd");

112 
	`sigem±y£t
(&
ß
.
ß_mask
);

113 
ß
.
ß_Êags
 = 0;

114 
ß
.
ß_h™dÀr
 = 
SIG_IGN
;

115 i‡(
	`siga˘i⁄
(
SIGPIPE
, &
ß
, 
NULL
) < 0)

116 
	`log_sys
("sigaction failed");

117 
	`sigem±y£t
(&
mask
);

118 
	`sigadd£t
(&
mask
, 
SIGHUP
);

119 
	`sigadd£t
(&
mask
, 
SIGTERM
);

120 i‡((
îr
 = 
	`±hªad_sigmask
(
SIG_BLOCK
, &
mask
, 
NULL
)) != 0)

121 
	`log_sys
("pthread_sigmask failed");

122 
	`öô_ªque°
();

123 
	`öô_¥öãr
();

125 #ifde‡
_SC_HOST_NAME_MAX


126 
n
 = 
	`sysc⁄f
(
_SC_HOST_NAME_MAX
);

127 i‡(
n
 < 0)

129 
n
 = 
HOST_NAME_MAX
;

131 i‡((
ho°
 = 
	`mÆloc
(
n
)Ë=
NULL
)

132 
	`log_sys
("mallocÉrror");

133 i‡(
	`gëho°«me
(
ho°
, 
n
) < 0)

134 
	`log_sys
("gethostnameÉrror");

135 i‡((
îr
 = 
	`gëaddæi°
(
ho°
, "¥öt", &
aûi°
)) != 0) {

136 
	`log_quô
("gëaddröfÿîr‹: %s", 
	`gai_°ªº‹
(
îr
));

137 
	`exô
(1);

139 
	`FD_ZERO
(&
ªndezvous
);

140 
maxfd
 = -1;

141 
aù
 = 
aûi°
;áù !
NULL
;áù =áù->
ai_√xt
) {

142 i‡((
sockfd
 = 
	`öô£rvî
(
SOCK_STREAM
, 
aù
->
ai_addr
,

143 
aù
->
ai_addæí
, 
QLEN
)) >= 0) {

144 
	`FD_SET
(
sockfd
, &
ªndezvous
);

145 i‡(
sockfd
 > 
maxfd
)

146 
maxfd
 = 
sockfd
;

149 i‡(
maxfd
 == -1)

150 
	`log_quô
("serviceÇotÉnabled");

152 
pwdp
 = 
	`gëpw«m
("lp");

153 i‡(
pwdp
 =
NULL
)

154 
	`log_sys
("can't find userÜp");

155 i‡(
pwdp
->
pw_uid
 == 0)

156 
	`log_quô
("userÜp isÖrivileged");

157 i‡(
	`£tuid
(
pwdp
->
pw_uid
) < 0)

158 
	`log_sys
("can't change IDsÅo userÜp");

160 
	`±hªad_¸óã
(&
tid
, 
NULL
, 
¥öãr_thªad
, NULL);

161 
	`±hªad_¸óã
(&
tid
, 
NULL
, 
sig«l_thªad
, NULL);

162 
	`buûd_q⁄°¨t
();

164 
	`log_msg
("daemon initialized");

167 
r£t
 = 
ªndezvous
;

168 i‡(
	`£À˘
(
maxfd
+1, &
r£t
, 
NULL
, NULL, NULL) < 0)

169 
	`log_sys
("select failed");

170 
i
 = 0; i <
maxfd
; i++) {

171 i‡(
	`FD_ISSET
(
i
, &
r£t
)) {

177 
sockfd
 = 
	`ac˚±
(
i
, 
NULL
, NULL);

178 i‡(
sockfd
 < 0)

179 
	`log_ªt
("accept failed");

180 
	`±hªad_¸óã
(&
tid
, 
NULL
, 
˛õ¡_thªad
,

181 (*)&
sockfd
);

185 
	`exô
(1);

186 
	}
}

195 
	$öô_ªque°
()

197 
n
;

198 
«me
[
FILENMSZ
];

200 
	`•rötf
(
«me
, "%s/%s", 
SPOOLDIR
, 
JOBFILE
);

201 
jobfd
 = 
	`›í
(
«me
, 
O_CREAT
|
O_RDWR
, 
S_IRUSR
|
S_IWUSR
);

202 i‡(
	`wrôe_lock
(
jobfd
, 0, 
SEEK_SET
, 0) < 0)

203 
	`log_quô
("daemonálreadyÑunning");

208 i‡((
n
 = 
	`ªad
(
jobfd
, 
«me
, 
FILENMSZ
)) < 0)

209 
	`log_sys
("can'tÑead job file");

210 i‡(
n
 == 0)

211 
√xtjob
 = 1;

213 
√xtjob
 = 
	`©ﬁ
(
«me
);

214 
	}
}

222 
	$öô_¥öãr
()

224 
¥öãr
 = 
	`gë_¥öèddr
();

225 i‡(
¥öãr
 =
NULL
) {

226 
	`log_msg
("noÖrinter deviceÑegistered");

227 
	`exô
(1);

229 
¥öãr_«me
 = 
¥öãr
->
ai_ˇn⁄«me
;

230 i‡(
¥öãr_«me
 =
NULL
)

231 
¥öãr_«me
 = "printer";

232 
	`log_msg
("¥öã∏i†%s", 
¥öãr_«me
);

233 
	}
}

241 
	$upd©e_jobno
()

243 
buf
[32];

245 
	`l£ek
(
jobfd
, 0, 
SEEK_SET
);

246 
	`•rötf
(
buf
, "%ld", 
√xtjob
);

247 i‡(
	`wrôe
(
jobfd
, 
buf
, 
	`°æí
(buf)) < 0)

248 
	`log_sys
("can't update job file");

249 
	}
}

257 
	$gë_√wjobno
()

259 
jobid
;

261 
	`±hªad_muãx_lock
(&
joblock
);

262 
jobid
 = 
√xtjob
++;

263 i‡(
√xtjob
 <= 0)

264 
√xtjob
 = 1;

265 
	`±hªad_muãx_u∆ock
(&
joblock
);

266 (
jobid
);

267 
	}
}

276 
	$add_job
(
¥öåeq
 *
ªqp
, 
jobid
)

278 
job
 *
jp
;

280 i‡((
jp
 = 
	`mÆloc
((
job
))Ë=
NULL
)

281 
	`log_sys
("malloc failed");

282 
	`mem˝y
(&
jp
->
ªq
, 
ªqp
, (
¥öåeq
));

283 
jp
->
jobid
 = jobid;

284 
jp
->
√xt
 = 
NULL
;

285 
	`±hªad_muãx_lock
(&
joblock
);

286 
jp
->
¥ev
 = 
jobèû
;

287 i‡(
jobèû
 =
NULL
)

288 
jobhód
 = 
jp
;

290 
jobèû
->
√xt
 = 
jp
;

291 
jobèû
 = 
jp
;

292 
	`±hªad_muãx_u∆ock
(&
joblock
);

293 
	`±hªad_c⁄d_sig«l
(&
jobwaô
);

294 
	}
}

302 
	$ª∂a˚_job
(
job
 *
jp
)

304 
	`±hªad_muãx_lock
(&
joblock
);

305 
jp
->
¥ev
 = 
NULL
;

306 
jp
->
√xt
 = 
jobhód
;

307 i‡(
jobhód
 =
NULL
)

308 
jobèû
 = 
jp
;

310 
jobhód
->
¥ev
 = 
jp
;

311 
jobhód
 = 
jp
;

312 
	`±hªad_muãx_u∆ock
(&
joblock
);

313 
	}
}

321 
	$ªmove_job
(
job
 *
èrgë
)

323 i‡(
èrgë
->
√xt
 !
NULL
)

324 
èrgë
->
√xt
->
¥ev
 =Åarget->prev;

326 
jobèû
 = 
èrgë
->
¥ev
;

327 i‡(
èrgë
->
¥ev
 !
NULL
)

328 
èrgë
->
¥ev
->
√xt
 =Åarget->next;

330 
jobhód
 = 
èrgë
->
√xt
;

331 
	}
}

339 
	$buûd_q⁄°¨t
()

341 
fd
, 
îr
, 
ƒ
;

342 
jobid
;

343 
DIR
 *
dúp
;

344 
dúít
 *
íç
;

345 
¥öåeq
 
ªq
;

346 
d«me
[
FILENMSZ
], 
‚ame
[FILENMSZ];

348 
	`•rötf
(
d«me
, "%s/%s", 
SPOOLDIR
, 
REQDIR
);

349 i‡((
dúp
 = 
	`›ídú
(
d«me
)Ë=
NULL
)

351 (
íç
 = 
	`ªaddú
(
dúp
)Ë!
NULL
) {

355 i‡(
	`°rcmp
(
íç
->
d_«me
, ".") == 0 ||

356 
	`°rcmp
(
íç
->
d_«me
, "..") == 0)

362 
	`•rötf
(
‚ame
, "%s/%s/%s", 
SPOOLDIR
, 
REQDIR
, 
íç
->
d_«me
);

363 i‡((
fd
 = 
	`›í
(
‚ame
, 
O_RDONLY
)) < 0)

365 
ƒ
 = 
	`ªad
(
fd
, &
ªq
, (
¥öåeq
));

366 i‡(
ƒ
 !(
¥öåeq
)) {

367 i‡(
ƒ
 < 0)

368 
îr
 = 
î∫o
;

370 
îr
 = 
EIO
;

371 
	`˛o£
(
fd
);

372 
	`log_msg
("build_qonstart: can'tÑead %s: %s",

373 
‚ame
, 
	`°ªº‹
(
îr
));

374 
	`u∆ök
(
‚ame
);

375 
	`•rötf
(
‚ame
, "%s/%s/%s", 
SPOOLDIR
, 
DATADIR
,

376 
íç
->
d_«me
);

377 
	`u∆ök
(
‚ame
);

380 
jobid
 = 
	`©ﬁ
(
íç
->
d_«me
);

381 
	`log_msg
("addög job %ldÅÿqueue", 
jobid
);

382 
	`add_job
(&
ªq
, 
jobid
);

384 
	`˛o£dú
(
dúp
);

385 
	}
}

393 
	$˛õ¡_thªad
(*
¨g
)

395 
n
, 
fd
, 
sockfd
, 
ƒ
, 
nw
, 
fú°
;

396 
jobid
;

397 
±hªad_t
 
tid
;

398 
¥öåeq
 
ªq
;

399 
¥öåe•
 
ªs
;

400 
«me
[
FILENMSZ
];

401 
buf
[
IOBUFSZ
];

403 
tid
 = 
	`±hªad_£lf
();

404 
	`±hªad_˛ónup_push
(
˛õ¡_˛ónup
, (*)
tid
);

405 
sockfd
 = *((*)
¨g
);

406 
	`add_w‹kî
(
tid
, 
sockfd
);

411 i‡((
n
 = 
	`åódn
(
sockfd
, &
ªq
, (
¥öåeq
), 10)) !=

412 (
¥öåeq
)) {

413 
ªs
.
jobid
 = 0;

414 i‡(
n
 < 0)

415 
ªs
.
ªtcode
 = 
	`ht⁄l
(
î∫o
);

417 
ªs
.
ªtcode
 = 
	`ht⁄l
(
EIO
);

418 
	`°∫˝y
(
ªs
.
msg
, 
	`°ªº‹
‘es.
ªtcode
), 
MSGLEN_MAX
);

419 
	`wrôí
(
sockfd
, &
ªs
, (
¥öåe•
));

420 
	`±hªad_exô
((*)1);

422 
ªq
.
size
 = 
	`¡ohl
(req.size);

423 
ªq
.
Êags
 = 
	`¡ohl
(req.flags);

428 
jobid
 = 
	`gë_√wjobno
();

429 
	`•rötf
(
«me
, "%s/%s/%ld", 
SPOOLDIR
, 
DATADIR
, 
jobid
);

430 i‡((
fd
 = 
	`¸ót
(
«me
, 
FILEPERM
)) < 0) {

431 
ªs
.
jobid
 = 0;

432 i‡(
n
 < 0)

433 
ªs
.
ªtcode
 = 
	`ht⁄l
(
î∫o
);

435 
ªs
.
ªtcode
 = 
	`ht⁄l
(
EIO
);

436 
	`log_msg
("˛õ¡_thªad: c™'à¸óã %s: %s", 
«me
,

437 
	`°ªº‹
(
ªs
.
ªtcode
));

438 
	`°∫˝y
(
ªs
.
msg
, 
	`°ªº‹
‘es.
ªtcode
), 
MSGLEN_MAX
);

439 
	`wrôí
(
sockfd
, &
ªs
, (
¥öåe•
));

440 
	`±hªad_exô
((*)1);

446 
fú°
 = 1;

447 (
ƒ
 = 
	`åód
(
sockfd
, 
buf
, 
IOBUFSZ
, 20)) > 0) {

448 i‡(
fú°
) {

449 
fú°
 = 0;

450 i‡(
	`°∫cmp
(
buf
, "%!PS", 4) != 0)

451 
ªq
.
Êags
 |
PR_TEXT
;

453 
nw
 = 
	`wrôe
(
fd
, 
buf
, 
ƒ
);

454 i‡(
nw
 !
ƒ
) {

455 i‡(
nw
 < 0)

456 
ªs
.
ªtcode
 = 
	`ht⁄l
(
î∫o
);

458 
ªs
.
ªtcode
 = 
	`ht⁄l
(
EIO
);

459 
	`log_msg
("˛õ¡_thªad: c™'àwrôê%s: %s", 
«me
,

460 
	`°ªº‹
(
ªs
.
ªtcode
));

461 
	`˛o£
(
fd
);

462 
	`°∫˝y
(
ªs
.
msg
, 
	`°ªº‹
‘es.
ªtcode
), 
MSGLEN_MAX
);

463 
	`wrôí
(
sockfd
, &
ªs
, (
¥öåe•
));

464 
	`u∆ök
(
«me
);

465 
	`±hªad_exô
((*)1);

468 
	`˛o£
(
fd
);

473 
	`•rötf
(
«me
, "%s/%s/%ld", 
SPOOLDIR
, 
REQDIR
, 
jobid
);

474 
fd
 = 
	`¸ót
(
«me
, 
FILEPERM
);

475 i‡(
fd
 < 0) {

476 
ªs
.
jobid
 = 0;

477 i‡(
n
 < 0)

478 
ªs
.
ªtcode
 = 
	`ht⁄l
(
î∫o
);

480 
ªs
.
ªtcode
 = 
	`ht⁄l
(
EIO
);

481 
	`log_msg
("˛õ¡_thªad: c™'à¸óã %s: %s", 
«me
,

482 
	`°ªº‹
(
ªs
.
ªtcode
));

483 
	`°∫˝y
(
ªs
.
msg
, 
	`°ªº‹
‘es.
ªtcode
), 
MSGLEN_MAX
);

484 
	`wrôí
(
sockfd
, &
ªs
, (
¥öåe•
));

485 
	`•rötf
(
«me
, "%s/%s/%ld", 
SPOOLDIR
, 
DATADIR
, 
jobid
);

486 
	`u∆ök
(
«me
);

487 
	`±hªad_exô
((*)1);

489 
nw
 = 
	`wrôe
(
fd
, &
ªq
, (
¥öåeq
));

490 i‡(
nw
 !(
¥öåeq
)) {

491 
ªs
.
jobid
 = 0;

492 i‡(
nw
 < 0)

493 
ªs
.
ªtcode
 = 
	`ht⁄l
(
î∫o
);

495 
ªs
.
ªtcode
 = 
	`ht⁄l
(
EIO
);

496 
	`log_msg
("˛õ¡_thªad: c™'àwrôê%s: %s", 
«me
,

497 
	`°ªº‹
(
ªs
.
ªtcode
));

498 
	`˛o£
(
fd
);

499 
	`°∫˝y
(
ªs
.
msg
, 
	`°ªº‹
‘es.
ªtcode
), 
MSGLEN_MAX
);

500 
	`wrôí
(
sockfd
, &
ªs
, (
¥öåe•
));

501 
	`u∆ök
(
«me
);

502 
	`•rötf
(
«me
, "%s/%s/%ld", 
SPOOLDIR
, 
DATADIR
, 
jobid
);

503 
	`u∆ök
(
«me
);

504 
	`±hªad_exô
((*)1);

506 
	`˛o£
(
fd
);

511 
ªs
.
ªtcode
 = 0;

512 
ªs
.
jobid
 = 
	`ht⁄l
(jobid);

513 
	`•rötf
(
ªs
.
msg
, "ªque° ID %ld", 
jobid
);

514 
	`wrôí
(
sockfd
, &
ªs
, (
¥öåe•
));

519 
	`log_msg
("addög job %ldÅÿqueue", 
jobid
);

520 
	`add_job
(&
ªq
, 
jobid
);

521 
	`±hªad_˛ónup_p›
(1);

523 
	}
}

531 
	$add_w‹kî
(
±hªad_t
 
tid
, 
sockfd
)

533 
w‹kî_thªad
 *
wç
;

535 i‡((
wç
 = 
	`mÆloc
((
w‹kî_thªad
))Ë=
NULL
) {

536 
	`log_ªt
("add_worker: can't malloc");

537 
	`±hªad_exô
((*)1);

539 
wç
->
tid
 =Åid;

540 
wç
->
sockfd
 = sockfd;

541 
	`±hªad_muãx_lock
(&
w‹kîlock
);

542 
wç
->
¥ev
 = 
NULL
;

543 
wç
->
√xt
 = 
w‹kîs
;

544 i‡(
w‹kîs
 =
NULL
)

545 
w‹kîs
 = 
wç
;

547 
w‹kîs
->
¥ev
 = 
wç
;

548 
	`±hªad_muãx_u∆ock
(&
w‹kîlock
);

549 
	}
}

557 
	$kûl_w‹kîs
()

559 
w‹kî_thªad
 *
wç
;

561 
	`±hªad_muãx_lock
(&
w‹kîlock
);

562 
wç
 = 
w‹kîs
; wç !
NULL
; wç = wç->
√xt
)

563 
	`±hªad_ˇn˚l
(
wç
->
tid
);

564 
	`±hªad_muãx_u∆ock
(&
w‹kîlock
);

565 
	}
}

573 
	$˛õ¡_˛ónup
(*
¨g
)

575 
w‹kî_thªad
 *
wç
;

576 
±hªad_t
 
tid
;

578 
tid
 = (
±hªad_t
)
¨g
;

579 
	`±hªad_muãx_lock
(&
w‹kîlock
);

580 
wç
 = 
w‹kîs
; wç !
NULL
; wç = wç->
√xt
) {

581 i‡(
wç
->
tid
 ==Åid) {

582 i‡(
wç
->
√xt
 !
NULL
)

583 
wç
->
√xt
->
¥ev
 = wtp->prev;

584 i‡(
wç
->
¥ev
 !
NULL
)

585 
wç
->
¥ev
->
√xt
 = wtp->next;

587 
w‹kîs
 = 
wç
->
√xt
;

591 
	`±hªad_muãx_u∆ock
(&
w‹kîlock
);

592 i‡(
wç
 !
NULL
) {

593 
	`˛o£
(
wç
->
sockfd
);

594 
	`‰ì
(
wç
);

596 
	}
}

604 
	$sig«l_thªad
(*
¨g
)

606 
îr
, 
signo
;

609 
îr
 = 
	`sigwaô
(&
mask
, &
signo
);

610 i‡(
îr
 != 0)

611 
	`log_quô
("sigwaô faûed: %s", 
	`°ªº‹
(
îr
));

612 
signo
) {

613 
SIGHUP
:

617 
	`±hªad_muãx_lock
(&
c⁄figlock
);

618 
ªªad
 = 1;

619 
	`±hªad_muãx_u∆ock
(&
c⁄figlock
);

622 
SIGTERM
:

623 
	`kûl_w‹kîs
();

624 
	`log_msg
("ãrmö©êwôh sig«»%s", 
	`°rsig«l
(
signo
));

625 
	`exô
(0);

628 
	`kûl_w‹kîs
();

629 
	`log_quô
("u√x≥˘ed sig«»%d", 
signo
);

632 
	}
}

640 
	$add_›ti⁄
(*
˝
, 
èg
, *
›äame
, *
›tvÆ
)

642 
n
;

644 
öt16_t
 
s
;

645 
c
[2];

646 } 
u
;

648 *
˝
++ = 
èg
;

649 
n
 = 
	`°æí
(
›äame
);

650 
u
.
s
 = 
	`ht⁄s
(
n
);

651 *
˝
++ = 
u
.
c
[0];

652 *
˝
++ = 
u
.
c
[1];

653 
	`°r˝y
(
˝
, 
›äame
);

654 
˝
 +
n
;

655 
n
 = 
	`°æí
(
›tvÆ
);

656 
u
.
s
 = 
	`ht⁄s
(
n
);

657 *
˝
++ = 
u
.
c
[0];

658 *
˝
++ = 
u
.
c
[1];

659 
	`°r˝y
(
˝
, 
›tvÆ
);

660 (
˝
 + 
n
);

661 
	}
}

669 
	$¥öãr_thªad
(*
¨g
)

671 
job
 *
jp
;

672 
hÀn
, 
ûí
, 
sockfd
, 
fd
, 
ƒ
, 
nw
;

673 *
i˝
, *
h˝
;

674 
ùp_hdr
 *
hp
;

675 
°©
 
sbuf
;

676 
iovec
 
iov
[2];

677 
«me
[
FILENMSZ
];

678 
hbuf
[
HBUFSZ
];

679 
ibuf
[
IBUFSZ
];

680 
buf
[
IOBUFSZ
];

681 
°r
[64];

687 
	`±hªad_muãx_lock
(&
joblock
);

688 
jobhód
 =
NULL
) {

689 
	`log_msg
("printer_thread: waiting...");

690 
	`±hªad_c⁄d_waô
(&
jobwaô
, &
joblock
);

692 
	`ªmove_job
(
jp
 = 
jobhód
);

693 
	`log_msg
("¥öãr_thªad:Öicked u∞job %ld", 
jp
->
jobid
);

694 
	`±hªad_muãx_u∆ock
(&
joblock
);

696 
	`upd©e_jobno
();

701 
	`±hªad_muãx_lock
(&
c⁄figlock
);

702 i‡(
ªªad
) {

703 
	`‰ìaddröfo
(
¥öãr
);

704 
¥öãr
 = 
NULL
;

705 
¥öãr_«me
 = 
NULL
;

706 
ªªad
 = 0;

707 
	`±hªad_muãx_u∆ock
(&
c⁄figlock
);

708 
	`öô_¥öãr
();

710 
	`±hªad_muãx_u∆ock
(&
c⁄figlock
);

716 
	`•rötf
(
«me
, "%s/%s/%ld", 
SPOOLDIR
, 
DATADIR
, 
jp
->
jobid
);

717 i‡((
fd
 = 
	`›í
(
«me
, 
O_RDONLY
)) < 0) {

718 
	`log_msg
("job %ld canceled - can't open %s: %s",

719 
jp
->
jobid
, 
«me
, 
	`°ªº‹
(
î∫o
));

720 
	`‰ì
(
jp
);

723 i‡(
	`f°©
(
fd
, &
sbuf
) < 0) {

724 
	`log_msg
("job %ld canceled - can't fstat %s: %s",

725 
jp
->
jobid
, 
«me
, 
	`°ªº‹
(
î∫o
));

726 
	`‰ì
(
jp
);

727 
	`˛o£
(
fd
);

730 i‡((
sockfd
 = 
	`sockë
(
AF_INET
, 
SOCK_STREAM
, 0)) < 0) {

731 
	`log_msg
("job %ld deferred - can't create socket: %s",

732 
jp
->
jobid
, 
	`°ªº‹
(
î∫o
));

733 
de„r
;

735 i‡(
	`c⁄√˘_ªåy
(
sockfd
, 
¥öãr
->
ai_addr
,

736 
¥öãr
->
ai_addæí
) < 0) {

737 
	`log_msg
("job %ld deferred - can't contactÖrinter: %s",

738 
jp
->
jobid
, 
	`°ªº‹
(
î∫o
));

739 
de„r
;

745 
i˝
 = 
ibuf
;

746 
hp
 = (
ùp_hdr
 *)
i˝
;

747 
hp
->
maj‹_vîsi⁄
 = 1;

748 
hp
->
mö‹_vîsi⁄
 = 1;

749 
hp
->
›î©i⁄
 = 
	`ht⁄s
(
OP_PRINT_JOB
);

750 
hp
->
ªque°_id
 = 
	`ht⁄l
(
jp
->
jobid
);

751 
i˝
 +
	`off£tof
(
ùp_hdr
, 
©å_group
);

752 *
i˝
++ = 
TAG_OPERATION_ATTR
;

753 
i˝
 = 
	`add_›ti⁄
(i˝, 
TAG_CHARSET
, "attributes-charset",

755 
i˝
 = 
	`add_›ti⁄
(i˝, 
TAG_NATULANG
,

757 
	`•rötf
(
°r
, "hâp://%s:%d", 
¥öãr_«me
, 
IPP_PORT
);

758 
i˝
 = 
	`add_›ti⁄
(i˝, 
TAG_URI
, "¥öãr-uri", 
°r
);

759 
i˝
 = 
	`add_›ti⁄
(i˝, 
TAG_NAMEWOLANG
,

760 "ªque°ög-u£r-«me", 
jp
->
ªq
.
u£∫m
);

761 
i˝
 = 
	`add_›ti⁄
(i˝, 
TAG_NAMEWOLANG
, "job-name",

762 
jp
->
ªq
.
jobnm
);

763 i‡(
jp
->
ªq
.
Êags
 & 
PR_TEXT
) {

764 
i˝
 = 
	`add_›ti⁄
(i˝, 
TAG_MIMETYPE
, "document-format",

767 
i˝
 = 
	`add_›ti⁄
(i˝, 
TAG_MIMETYPE
, "document-format",

770 *
i˝
++ = 
TAG_END_OF_ATTR
;

771 
ûí
 = 
i˝
 - 
ibuf
;

776 
h˝
 = 
hbuf
;

777 
	`•rötf
(
h˝
, "POST /%s/ù∞HTTP/1.1\r\n", 
¥öãr_«me
);

778 
h˝
 +
	`°æí
(hcp);

779 
	`•rötf
(
h˝
, "Content-Length: %ld\r\n",

780 ()
sbuf
.
°_size
 + 
ûí
);

781 
h˝
 +
	`°æí
(hcp);

782 
	`°r˝y
(
h˝
, "Content-Type:ápplication/ipp\r\n");

783 
h˝
 +
	`°æí
(hcp);

784 
	`•rötf
(
h˝
, "Ho°: %s:%d\r\n", 
¥öãr_«me
, 
IPP_PORT
);

785 
h˝
 +
	`°æí
(hcp);

786 *
h˝
++ = '\r';

787 *
h˝
++ = '\n';

788 
hÀn
 = 
h˝
 - 
hbuf
;

793 
iov
[0].
iov_ba£
 = 
hbuf
;

794 
iov
[0].
iov_Àn
 = 
hÀn
;

795 
iov
[1].
iov_ba£
 = 
ibuf
;

796 
iov
[1].
iov_Àn
 = 
ûí
;

797 i‡((
nw
 = 
	`wrôev
(
sockfd
, 
iov
, 2)Ë!
hÀn
 + 
ûí
) {

798 
	`log_ªt
("can't writeÅoÖrinter");

799 
de„r
;

801 (
ƒ
 = 
	`ªad
(
fd
, 
buf
, 
IOBUFSZ
)) > 0) {

802 i‡((
nw
 = 
	`wrôe
(
sockfd
, 
buf
, 
ƒ
)) !=Çr) {

803 i‡(
nw
 < 0)

804 
	`log_ªt
("can't writeÅoÖrinter");

806 
	`log_msg
("sh‹àwrôê(%d/%dËtÿ¥öãr", 
nw
, 
ƒ
);

807 
de„r
;

810 i‡(
ƒ
 < 0) {

811 
	`log_ªt
("ˇn'àªad %s", 
«me
);

812 
de„r
;

818 i‡(
	`¥öãr_°©us
(
sockfd
, 
jp
)) {

819 
	`u∆ök
(
«me
);

820 
	`•rötf
(
«me
, "%s/%s/%ld", 
SPOOLDIR
, 
REQDIR
, 
jp
->
jobid
);

821 
	`u∆ök
(
«me
);

822 
	`‰ì
(
jp
);

823 
jp
 = 
NULL
;

825 
de„r
:

826 
	`˛o£
(
fd
);

827 i‡(
sockfd
 >= 0)

828 
	`˛o£
(
sockfd
);

829 i‡(
jp
 !
NULL
) {

830 
	`ª∂a˚_job
(
jp
);

831 
	`¶ìp
(60);

834 
	}
}

842 
ssize_t


843 
	$ªadm‹e
(
sockfd
, **
bµ
, 
off
, *
bszp
)

845 
ssize_t
 
ƒ
;

846 *
bp
 = *
bµ
;

847 
bsz
 = *
bszp
;

849 i‡(
off
 >
bsz
) {

850 
bsz
 +
IOBUFSZ
;

851 i‡((
bp
 = 
	`ªÆloc
(*
bµ
, 
bsz
)Ë=
NULL
)

852 
	`log_sys
("readmore: can'tállocate biggerÑead buffer");

853 *
bszp
 = 
bsz
;

854 *
bµ
 = 
bp
;

856 i‡((
ƒ
 = 
	`åód
(
sockfd
, &
bp
[
off
], 
bsz
-off, 1)) > 0)

857 (
off
+
ƒ
);

860 
	}
}

869 
	$¥öãr_°©us
(
sockfd
, 
job
 *
jp
)

871 
i
, 
suc˚ss
, 
code
, 
Àn
, 
found
, 
bufsz
;

872 
jobid
;

873 
ssize_t
 
ƒ
;

874 *
°©code
, *
ªas⁄
, *
˝
, *
c⁄ã¡Àn
;

875 
ùp_hdr
 *
hp
;

876 *
bp
;

883 
suc˚ss
 = 0;

884 
bufsz
 = 
IOBUFSZ
;

885 i‡((
bp
 = 
	`mÆloc
(
IOBUFSZ
)Ë=
NULL
)

886 
	`log_sys
("printer_status: can'tállocateÑead buffer");

888 (
ƒ
 = 
	`åód
(
sockfd
, 
bp
, 
IOBUFSZ
, 5)) > 0) {

893 
˝
 = 
bp
 + 8;

894 
	`is•a˚
(()*
˝
))

895 
˝
++;

896 
°©code
 = 
˝
;

897 
	`isdigô
(()*
˝
))

898 
˝
++;

899 i‡(
˝
 =
°©code
) {

900 
	`log_msg
(
bp
);

902 *
˝
++ = '\0';

903 
ªas⁄
 = 
˝
;

904 *
˝
 != '\r' && *cp != '\n')

905 
˝
++;

906 *
˝
 = '\0';

907 
code
 = 
	`©oi
(
°©code
);

908 i‡(
	`HTTP_INFO
(
code
))

910 i‡(!
	`HTTP_SUCCESS
(
code
)) {

911 
bp
[
ƒ
] = '\0';

912 
	`log_msg
("îr‹: %s", 
ªas⁄
);

921 
i
 = 
˝
 - 
bp
;

923 *
˝
 !'C' && *˝ !'c' && 
i
 < 
ƒ
) {

924 
˝
++;

925 
i
++;

927 i‡(
i
 >
ƒ
 &&

928 ((
ƒ
 = 
	`ªadm‹e
(
sockfd
, &
bp
, 
i
, &
bufsz
)) < 0))

929 
out
;

930 
˝
 = &
bp
[
i
];

931 i‡(
	`°∫ˇ£cmp
(
˝
, "Content-Length:", 15) == 0) {

932 
˝
 += 15;

933 
	`is•a˚
(()*
˝
))

934 
˝
++;

935 
c⁄ã¡Àn
 = 
˝
;

936 
	`isdigô
(()*
˝
))

937 
˝
++;

938 *
˝
++ = '\0';

939 
i
 = 
˝
 - 
bp
;

940 
Àn
 = 
	`©oi
(
c⁄ã¡Àn
);

943 
˝
++;

944 
i
++;

947 i‡(
i
 >
ƒ
 &&

948 ((
ƒ
 = 
	`ªadm‹e
(
sockfd
, &
bp
, 
i
, &
bufsz
)) < 0))

949 
out
;

950 
˝
 = &
bp
[
i
];

952 
found
 = 0;

953 !
found
) {

954 
i
 < 
ƒ
 - 2) {

955 i‡(*
˝
 == '\n' && *(cp + 1) == '\r' &&

956 *(
˝
 + 2) == '\n') {

957 
found
 = 1;

958 
˝
 += 3;

959 
i
 += 3;

962 
˝
++;

963 
i
++;

965 i‡(
i
 >
ƒ
 &&

966 ((
ƒ
 = 
	`ªadm‹e
(
sockfd
, &
bp
, 
i
, &
bufsz
)) < 0))

967 
out
;

968 
˝
 = &
bp
[
i
];

971 i‡(
ƒ
 - 
i
 < 
Àn
 &&

972 ((
ƒ
 = 
	`ªadm‹e
(
sockfd
, &
bp
, 
i
, &
bufsz
)) < 0))

973 
out
;

974 
˝
 = &
bp
[
i
];

976 
hp
 = (
ùp_hdr
 *)
˝
;

977 
i
 = 
	`¡ohs
(
hp
->
°©us
);

978 
jobid
 = 
	`¡ohl
(
hp
->
ªque°_id
);

979 i‡(
jobid
 !
jp
->jobid) {

983 
	`log_msg
("jobid %ld sètu†codê%d", 
jobid
, 
i
);

987 i‡(
	`STATCLASS_OK
(
i
))

988 
suc˚ss
 = 1;

993 
out
:

994 
	`‰ì
(
bp
);

995 i‡(
ƒ
 < 0) {

996 
	`log_msg
("jobid %ld:ÉrrorÑeadingÖrinterÑesponse: %s",

997 
jobid
, 
	`°ªº‹
(
î∫o
));

999 (
suc˚ss
);

1000 
	}
}

	@ipp/util.c

1 
	~"≠ue.h
"

2 
	~"¥öt.h
"

3 
	~<˘y≥.h
>

4 
	~<sys/£À˘.h
>

6 
	#MAXCFGLINE
 512

	)

7 
	#MAXKWLEN
 16

	)

8 
	#MAXFMTLEN
 16

	)

19 
	$gëaddæi°
(c⁄° *
ho°
, c⁄° *
£rvi˚
,

20 
addröfo
 **
aûi°µ
)

22 
îr
;

23 
addröfo
 
höt
;

25 
höt
.
ai_Êags
 = 
AI_CANONNAME
;

26 
höt
.
ai_Ámûy
 = 
AF_INET
;

27 
höt
.
ai_sockty≥
 = 
SOCK_STREAM
;

28 
höt
.
ai_¥Ÿocﬁ
 = 0;

29 
höt
.
ai_addæí
 = 0;

30 
höt
.
ai_ˇn⁄«me
 = 
NULL
;

31 
höt
.
ai_addr
 = 
NULL
;

32 
höt
.
ai_√xt
 = 
NULL
;

33 
îr
 = 
	`gëaddröfo
(
ho°
, 
£rvi˚
, &
höt
, 
aûi°µ
);

34 (
îr
);

35 
	}
}

44 
	$sˇn_c⁄figfûe
(*
keyw‹d
)

46 
n
, 
m©ch
;

47 
FILE
 *
Â
;

48 
keybuf
[
MAXKWLEN
], 
∑âîn
[
MAXFMTLEN
];

49 
löe
[
MAXCFGLINE
];

50 
vÆbuf
[
MAXCFGLINE
];

52 i‡((
Â
 = 
	`f›í
(
CONFIG_FILE
, "r")Ë=
NULL
)

53 
	`log_sys
("ˇn'à›í %s", 
CONFIG_FILE
);

54 
	`•rötf
(
∑âîn
, "%%%d†%%%ds", 
MAXKWLEN
-1, 
MAXCFGLINE
-1);

55 
m©ch
 = 0;

56 
	`fgës
(
löe
, 
MAXCFGLINE
, 
Â
Ë!
NULL
) {

57 
n
 = 
	`ssˇnf
(
löe
, 
∑âîn
, 
keybuf
, 
vÆbuf
);

58 i‡(
n
 =2 && 
	`°rcmp
(
keyw‹d
, 
keybuf
) == 0) {

59 
m©ch
 = 1;

63 
	`f˛o£
(
Â
);

64 i‡(
m©ch
 != 0)

65 (
vÆbuf
);

67 (
NULL
);

68 
	}
}

76 
	$gë_¥öt£rvî
()

78 (
	`sˇn_c⁄figfûe
("printserver"));

79 
	}
}

86 
addröfo
 *

87 
	$gë_¥öèddr
()

89 
îr
;

90 *
p
;

91 
addröfo
 *
aûi°
;

93 i‡((
p
 = 
	`sˇn_c⁄figfûe
("¥öãr")Ë!
NULL
) {

94 i‡((
îr
 = 
	`gëaddæi°
(
p
, "ùp", &
aûi°
)) != 0) {

95 
	`log_msg
("nÿaddªs†öf‹m©i⁄ f‹ %s", 
p
);

96 (
NULL
);

98 (
aûi°
);

100 
	`log_msg
("noÖrinteráddress specified");

101 (
NULL
);

102 
	}
}

111 
ssize_t


112 
	$åód
(
fd
, *
buf
, 
size_t
 
nbyãs
, 
timout
)

114 
nfds
;

115 
fd_£t
 
ªadfds
;

116 
timevÆ
 
tv
;

118 
tv
.
tv_£c
 = 
timout
;

119 
tv
.
tv_u£c
 = 0;

120 
	`FD_ZERO
(&
ªadfds
);

121 
	`FD_SET
(
fd
, &
ªadfds
);

122 
nfds
 = 
	`£À˘
(
fd
+1, &
ªadfds
, 
NULL
, NULL, &
tv
);

123 i‡(
nfds
 <= 0) {

124 i‡(
nfds
 == 0)

125 
î∫o
 = 
ETIME
;

128 (
	`ªad
(
fd
, 
buf
, 
nbyãs
));

129 
	}
}

138 
ssize_t


139 
	$åódn
(
fd
, *
buf
, 
size_t
 
nbyãs
, 
timout
)

141 
size_t
 
∆e·
;

142 
ssize_t
 
ƒód
;

144 
∆e·
 = 
nbyãs
;

145 
∆e·
 > 0) {

146 i‡((
ƒód
 = 
	`åód
(
fd
, 
buf
, 
∆e·
, 
timout
)) < 0) {

147 i‡(
∆e·
 =
nbyãs
)

151 } i‡(
ƒód
 == 0) {

154 
∆e·
 -
ƒód
;

155 
buf
 +
ƒód
;

157 (
nbyãs
 - 
∆e·
);

158 
	}
}

	@lib/bsd_ptyopen.c

1 
	~"≠ue.h
"

2 
	~<î∫o.h
>

3 
	~<f˙é.h
>

4 
	~<gΩ.h
>

6 #i‚de‡
_HAS_OPENPT


8 
	$posix_›í±
(
oÊag
)

10 
fdm
;

11 *
±r1
, *
±r2
;

12 
±m_«me
[16];

14 
	`°r˝y
(
±m_«me
, "/dev/ptyXY");

16 
±r1
 = "pqrstuvwxyzPQRST"; *ptr1 != 0;Ötr1++) {

17 
±m_«me
[8] = *
±r1
;

18 
±r2
 = "0123456789abcdef"; *ptr2 != 0;Ötr2++) {

19 
±m_«me
[9] = *
±r2
;

24 i‡((
fdm
 = 
	`›í
(
±m_«me
, 
oÊag
)) < 0) {

25 i‡(
î∫o
 =
ENOENT
)

30 (
fdm
);

33 
î∫o
 = 
EAGAIN
;

35 
	}
}

38 #i‚de‡
_HAS_PTSNAME


40 
	$±¢ame
(
fdm
)

42 
±s_«me
[16];

43 *
±m_«me
;

45 
±m_«me
 = 
	`ây«me
(
fdm
);

46 i‡(
±m_«me
 =
NULL
)

47 (
NULL
);

48 
	`°∫˝y
(
±s_«me
, 
±m_«me
, (pts_name));

49 
±s_«me
[(pts_name) - 1] = '\0';

50 i‡(
	`°∫cmp
(
±s_«me
, "/dev/pty/", 9) == 0)

51 
±s_«me
[9] = 's';

53 
±s_«me
[5] = 't';

54 (
±s_«me
);

55 
	}
}

58 #i‚de‡
_HAS_GRANTPT


60 
	$gø¡±
(
fdm
)

62 
group
 *
gΩå
;

63 
gid
;

64 *
±s_«me
;

66 
±s_«me
 = 
	`±¢ame
(
fdm
);

67 i‡((
gΩå
 = 
	`gëg∫am
("ây")Ë!
NULL
)

68 
gid
 = 
gΩå
->
gr_gid
;

70 
gid
 = -1;

75 i‡(
	`chown
(
±s_«me
, 
	`gëuid
(), 
gid
) < 0)

77 (
	`chmod
(
±s_«me
, 
S_IRUSR
 | 
S_IWUSR
 | 
S_IWGRP
));

78 
	}
}

81 #i‚de‡
_HAS_UNLOCKPT


83 
	$u∆ock±
(
fdm
)

86 
	}
}

90 
	$±ym_›í
(*
±s_«me
, 
±s_«mesz
)

92 *
±r
;

93 
fdm
;

100 
	`°∫˝y
(
±s_«me
, "/dev/±yXX", 
±s_«mesz
);

101 
±s_«me
[
±s_«mesz
 - 1] = '\0';

102 i‡((
fdm
 = 
	`posix_›í±
(
O_RDWR
)) < 0)

104 i‡(
	`gø¡±
(
fdm
) < 0) {

105 
	`˛o£
(
fdm
);

108 i‡(
	`u∆ock±
(
fdm
) < 0) {

109 
	`˛o£
(
fdm
);

112 i‡((
±r
 = 
	`±¢ame
(
fdm
)Ë=
NULL
) {

113 
	`˛o£
(
fdm
);

121 
	`°∫˝y
(
±s_«me
, 
±r
, 
±s_«mesz
);

122 
±s_«me
[
±s_«mesz
 - 1] = '\0';

123 (
fdm
);

124 
	}
}

127 
	$±ys_›í
(*
±s_«me
)

129 
fds
;

131 i‡((
fds
 = 
	`›í
(
±s_«me
, 
O_RDWR
)) < 0)

133 (
fds
);

134 
	}
}

	@lib/bufargs.c

1 
	~"≠ue.h
"

3 
	#MAXARGC
 50

	)

4 
	#WHITE
 " \t\n"

	)

14 
buf_¨gs
(*
buf
, (*
›tfunc
)(, **))

16 *
±r
, *
¨gv
[
MAXARGC
];

17 
¨gc
;

19 i‡(
	`°πok
(
buf
, 
WHITE
Ë=
NULL
)

21 
¨gv
[
¨gc
 = 0] = 
buf
;

22 (
±r
 = 
	`°πok
(
NULL
, 
WHITE
)) != NULL) {

23 i‡(++
¨gc
 >
MAXARGC
-1)

25 
¨gv
[
¨gc
] = 
±r
;

27 
¨gv
[++
¨gc
] = 
NULL
;

34 ((*
›tfunc
)(
¨gc
, 
¨gv
));

35 
	}
}

	@lib/cliconn.c

1 
	~"≠ue.h
"

2 
	~<sys/sockë.h
>

3 
	~<sys/un.h
>

4 
	~<î∫o.h
>

6 
	#CLI_PATH
 "/v¨/tmp/"

	)

7 
	#CLI_PERM
 
S_IRWXU


	)

14 
	$˛i_c⁄n
(c⁄° *
«me
)

16 
fd
, 
Àn
, 
îr
, 
rvÆ
;

17 
sockaddr_un
 
un
;

20 i‡((
fd
 = 
	`sockë
(
AF_UNIX
, 
SOCK_STREAM
, 0)) < 0)

24 
	`mem£t
(&
un
, 0, (un));

25 
un
.
sun_Ámûy
 = 
AF_UNIX
;

26 
	`•rötf
(
un
.
sun_∑th
, "%s%05d", 
CLI_PATH
, 
	`gëpid
());

27 
Àn
 = 
	`off£tof
(
sockaddr_un
, 
sun_∑th
Ë+ 
	`°æí
(
un
.sun_path);

29 
	`u∆ök
(
un
.
sun_∑th
);

30 i‡(
	`böd
(
fd
, (
sockaddr
 *)&
un
, 
Àn
) < 0) {

31 
rvÆ
 = -2;

32 
îrout
;

34 i‡(
	`chmod
(
un
.
sun_∑th
, 
CLI_PERM
) < 0) {

35 
rvÆ
 = -3;

36 
îrout
;

40 
	`mem£t
(&
un
, 0, (un));

41 
un
.
sun_Ámûy
 = 
AF_UNIX
;

42 
	`°r˝y
(
un
.
sun_∑th
, 
«me
);

43 
Àn
 = 
	`off£tof
(
sockaddr_un
, 
sun_∑th
Ë+ 
	`°æí
(
«me
);

44 i‡(
	`c⁄√˘
(
fd
, (
sockaddr
 *)&
un
, 
Àn
) < 0) {

45 
rvÆ
 = -4;

46 
îrout
;

48 (
fd
);

50 
îrout
:

51 
îr
 = 
î∫o
;

52 
	`˛o£
(
fd
);

53 
î∫o
 = 
îr
;

54 (
rvÆ
);

55 
	}
}

	@lib/clrfl.c

1 
	~"≠ue.h
"

2 
	~<f˙é.h
>

5 
	$˛r_Ê
(
fd
, 
Êags
)

8 
vÆ
;

10 i‡((
vÆ
 = 
	`f˙é
(
fd
, 
F_GETFL
, 0)) < 0)

11 
	`îr_sys
("fcntl F_GETFLÉrror");

13 
vÆ
 &~
Êags
;

15 i‡(
	`f˙é
(
fd
, 
F_SETFL
, 
vÆ
) < 0)

16 
	`îr_sys
("fcntl F_SETFLÉrror");

17 
	}
}

	@lib/daemonize.c

1 
	~"≠ue.h
"

2 
	~<sy¶og.h
>

3 
	~<f˙é.h
>

4 #ifde‡
BSD


5 
	~<sys/time.h
>

7 
	~<sys/ªsour˚.h
>

10 
	$d´m⁄ize
(c⁄° *
cmd
)

12 
i
, 
fd0
, 
fd1
, 
fd2
;

13 
pid_t
 
pid
;

14 
æimô
 
æ
;

15 
siga˘i⁄
 
ß
;

20 
	`umask
(0);

25 i‡(
	`gëæimô
(
RLIMIT_NOFILE
, &
æ
) < 0)

26 
	`îr_quô
("%s: c™'àgë fûêlimô", 
cmd
);

31 i‡((
pid
 = 
	`f‹k
()) < 0)

32 
	`îr_quô
("%s: c™'àf‹k", 
cmd
);

33 i‡(
pid
 != 0)

34 
	`exô
(0);

35 
	`£tsid
();

40 
ß
.
ß_h™dÀr
 = 
SIG_IGN
;

41 
	`sigem±y£t
(&
ß
.
ß_mask
);

42 
ß
.
ß_Êags
 = 0;

43 i‡(
	`siga˘i⁄
(
SIGHUP
, &
ß
, 
NULL
) < 0)

44 
	`îr_quô
("%s: can't ignore SIGHUP");

45 i‡((
pid
 = 
	`f‹k
()) < 0)

46 
	`îr_quô
("%s: c™'àf‹k", 
cmd
);

47 i‡(
pid
 != 0)

48 
	`exô
(0);

54 i‡(
	`chdú
("/") < 0)

55 
	`îr_quô
("%s: can't change directoryÅo /");

60 i‡(
æ
.
æim_max
 =
RLIM_INFINITY
)

61 
æ
.
æim_max
 = 1024;

62 
i
 = 0; i < 
æ
.
æim_max
; i++)

63 
	`˛o£
(
i
);

68 
fd0
 = 
	`›í
("/dev/nuŒ", 
O_RDWR
);

69 
fd1
 = 
	`dup
(0);

70 
fd2
 = 
	`dup
(0);

75 
	`›ílog
(
cmd
, 
LOG_CONS
, 
LOG_DAEMON
);

76 i‡(
fd0
 !0 || 
fd1
 !1 || 
fd2
 != 2) {

77 
	`sy¶og
(
LOG_ERR
, "unexpected file descriptors %d %d %d",

78 
fd0
, 
fd1
, 
fd2
);

79 
	`exô
(1);

81 
	}
}

	@lib/error.c

1 
	~"≠ue.h
"

2 
	~<î∫o.h
>

3 
	~<°d¨g.h
>

5 
îr_doô
(, , c⁄° *, 
va_li°
);

12 
	$îr_ªt
(c⁄° *
fmt
, ...)

14 
va_li°
 
≠
;

16 
	`va_°¨t
(
≠
, 
fmt
);

17 
	`îr_doô
(1, 
î∫o
, 
fmt
, 
≠
);

18 
	`va_íd
(
≠
);

19 
	}
}

26 
	$îr_sys
(c⁄° *
fmt
, ...)

28 
va_li°
 
≠
;

30 
	`va_°¨t
(
≠
, 
fmt
);

31 
	`îr_doô
(1, 
î∫o
, 
fmt
, 
≠
);

32 
	`va_íd
(
≠
);

33 
	`exô
(1);

34 
	}
}

42 
	$îr_exô
(
îr‹
, c⁄° *
fmt
, ...)

44 
va_li°
 
≠
;

46 
	`va_°¨t
(
≠
, 
fmt
);

47 
	`îr_doô
(1, 
îr‹
, 
fmt
, 
≠
);

48 
	`va_íd
(
≠
);

49 
	`exô
(1);

50 
	}
}

57 
	$îr_dump
(c⁄° *
fmt
, ...)

59 
va_li°
 
≠
;

61 
	`va_°¨t
(
≠
, 
fmt
);

62 
	`îr_doô
(1, 
î∫o
, 
fmt
, 
≠
);

63 
	`va_íd
(
≠
);

64 
	`ab‹t
();

65 
	`exô
(1);

66 
	}
}

73 
	$îr_msg
(c⁄° *
fmt
, ...)

75 
va_li°
 
≠
;

77 
	`va_°¨t
(
≠
, 
fmt
);

78 
	`îr_doô
(0, 0, 
fmt
, 
≠
);

79 
	`va_íd
(
≠
);

80 
	}
}

87 
	$îr_quô
(c⁄° *
fmt
, ...)

89 
va_li°
 
≠
;

91 
	`va_°¨t
(
≠
, 
fmt
);

92 
	`îr_doô
(0, 0, 
fmt
, 
≠
);

93 
	`va_íd
(
≠
);

94 
	`exô
(1);

95 
	}
}

102 
	$îr_doô
(
î∫oÊag
, 
îr‹
, c⁄° *
fmt
, 
va_li°
 
≠
)

104 
buf
[
MAXLINE
];

106 
	`v¢¥ötf
(
buf
, 
MAXLINE
, 
fmt
, 
≠
);

107 i‡(
î∫oÊag
)

108 
	`¢¥ötf
(
buf
+
	`°æí
(buf), 
MAXLINE
-strlen(buf), ": %s",

109 
	`°ªº‹
(
îr‹
));

110 
	`°rˇt
(
buf
, "\n");

111 
	`fÊush
(
°dout
);

112 
	`Âuts
(
buf
, 
°dîr
);

113 
	`fÊush
(
NULL
);

114 
	}
}

	@lib/errorlog.c

5 
	~"≠ue.h
"

6 
	~<î∫o.h
>

7 
	~<°d¨g.h
>

8 
	~<sy¶og.h
>

10 
log_doô
(, , c⁄° *, 
va_li°
 
≠
);

16 
log_to_°dîr
;

22 
	$log_›í
(c⁄° *
idít
, 
›ti⁄
, 
Ácûôy
)

24 i‡(
log_to_°dîr
 == 0)

25 
	`›ílog
(
idít
, 
›ti⁄
, 
Ácûôy
);

26 
	}
}

33 
	$log_ªt
(c⁄° *
fmt
, ...)

35 
va_li°
 
≠
;

37 
	`va_°¨t
(
≠
, 
fmt
);

38 
	`log_doô
(1, 
LOG_ERR
, 
fmt
, 
≠
);

39 
	`va_íd
(
≠
);

40 
	}
}

47 
	$log_sys
(c⁄° *
fmt
, ...)

49 
va_li°
 
≠
;

51 
	`va_°¨t
(
≠
, 
fmt
);

52 
	`log_doô
(1, 
LOG_ERR
, 
fmt
, 
≠
);

53 
	`va_íd
(
≠
);

54 
	`exô
(2);

55 
	}
}

62 
	$log_msg
(c⁄° *
fmt
, ...)

64 
va_li°
 
≠
;

66 
	`va_°¨t
(
≠
, 
fmt
);

67 
	`log_doô
(0, 
LOG_ERR
, 
fmt
, 
≠
);

68 
	`va_íd
(
≠
);

69 
	}
}

76 
	$log_quô
(c⁄° *
fmt
, ...)

78 
va_li°
 
≠
;

80 
	`va_°¨t
(
≠
, 
fmt
);

81 
	`log_doô
(0, 
LOG_ERR
, 
fmt
, 
≠
);

82 
	`va_íd
(
≠
);

83 
	`exô
(2);

84 
	}
}

91 
	$log_doô
(
î∫oÊag
, 
¥i‹ôy
, c⁄° *
fmt
, 
va_li°
 
≠
)

93 
î∫o_ßve
;

94 
buf
[
MAXLINE
];

96 
î∫o_ßve
 = 
î∫o
;

97 
	`v¢¥ötf
(
buf
, 
MAXLINE
, 
fmt
, 
≠
);

98 i‡(
î∫oÊag
)

99 
	`¢¥ötf
(
buf
+
	`°æí
(buf), 
MAXLINE
-strlen(buf), ": %s",

100 
	`°ªº‹
(
î∫o_ßve
));

101 
	`°rˇt
(
buf
, "\n");

102 i‡(
log_to_°dîr
) {

103 
	`fÊush
(
°dout
);

104 
	`Âuts
(
buf
, 
°dîr
);

105 
	`fÊush
(
°dîr
);

107 
	`sy¶og
(
¥i‹ôy
, 
buf
);

109 
	}
}

	@lib/linux_ptyopen.c

1 
	~"≠ue.h
"

2 
	~<f˙é.h
>

4 #i‚de‡
_HAS_OPENPT


6 
	$posix_›í±
(
oÊag
)

8 
fdm
;

10 
fdm
 = 
	`›í
("/dev/±mx", 
oÊag
);

11 (
fdm
);

12 
	}
}

15 #i‚de‡
_HAS_PTSNAME


17 
	$±¢ame
(
fdm
)

19 
smö‹
;

20 
±s_«me
[16];

22 i‡(
	`io˘l
(
fdm
, 
TIOCGPTN
, &
smö‹
) < 0)

23 (
NULL
);

24 
	`¢¥ötf
(
±s_«me
, ’ts_«me), "/dev/±s/%d", 
smö‹
);

25 (
±s_«me
);

26 
	}
}

29 #i‚de‡
_HAS_GRANTPT


31 
	$gø¡±
(
fdm
)

33 *
±s_«me
;

35 
±s_«me
 = 
	`±¢ame
(
fdm
);

36 (
	`chmod
(
±s_«me
, 
S_IRUSR
 | 
S_IWUSR
 | 
S_IWGRP
));

37 
	}
}

40 #i‚de‡
_HAS_UNLOCKPT


42 
	$u∆ock±
(
fdm
)

44 
lock
 = 0;

46 (
	`io˘l
(
fdm
, 
TIOCSPTLCK
, &
lock
));

47 
	}
}

51 
	$±ym_›í
(*
±s_«me
, 
±s_«mesz
)

53 *
±r
;

54 
fdm
;

61 
	`°∫˝y
(
±s_«me
, "/dev/±mx", 
±s_«mesz
);

62 
±s_«me
[
±s_«mesz
 - 1] = '\0';

64 
fdm
 = 
	`posix_›í±
(
O_RDWR
);

65 i‡(
fdm
 < 0)

67 i‡(
	`gø¡±
(
fdm
) < 0) {

68 
	`˛o£
(
fdm
);

71 i‡(
	`u∆ock±
(
fdm
) < 0) {

72 
	`˛o£
(
fdm
);

75 i‡((
±r
 = 
	`±¢ame
(
fdm
)Ë=
NULL
) {

76 
	`˛o£
(
fdm
);

84 
	`°∫˝y
(
±s_«me
, 
±r
, 
±s_«mesz
);

85 
±s_«me
[
±s_«mesz
 - 1] = '\0';

86 (
fdm
);

87 
	}
}

90 
	$±ys_›í
(*
±s_«me
)

92 
fds
;

94 i‡((
fds
 = 
	`›í
(
±s_«me
, 
O_RDWR
)) < 0)

96 (
fds
);

97 
	}
}

	@lib/lockreg.c

1 
	~"≠ue.h
"

2 
	~<f˙é.h
>

5 
	$lock_ªg
(
fd
, 
cmd
, 
ty≥
, 
off_t
 
off£t
, 
whí˚
, off_à
Àn
)

7 
Êock
 
lock
;

9 
lock
.
l_ty≥
 = 
ty≥
;

10 
lock
.
l_°¨t
 = 
off£t
;

11 
lock
.
l_whí˚
 = 
whí˚
;

12 
lock
.
l_Àn
 = 
Àn
;

14 (
	`f˙é
(
fd
, 
cmd
, &
lock
));

15 
	}
}

	@lib/locktest.c

1 
	~"≠ue.h
"

2 
	~<f˙é.h
>

4 
pid_t


5 
	$lock_ã°
(
fd
, 
ty≥
, 
off_t
 
off£t
, 
whí˚
, off_à
Àn
)

7 
Êock
 
lock
;

9 
lock
.
l_ty≥
 = 
ty≥
;

10 
lock
.
l_°¨t
 = 
off£t
;

11 
lock
.
l_whí˚
 = 
whí˚
;

12 
lock
.
l_Àn
 = 
Àn
;

14 i‡(
	`f˙é
(
fd
, 
F_GETLK
, &
lock
) < 0)

15 
	`îr_sys
("fcntlÉrror");

17 i‡(
lock
.
l_ty≥
 =
F_UNLCK
)

19 (
lock
.
l_pid
);

20 
	}
}

	@lib/nspipe.c

3 
	~"≠ue.h
"

4 
	~<sys/sockë.h
>

5 
	~<sys/un.h
>

8 
	$ns_pùe
(c⁄° *
«me
, 
fd
[2])

10 
Àn
;

11 
sockaddr_un
 
unix_addr
;

13 i‡(
	`s_pùe
(
fd
) < 0)

16 
	`u∆ök
(
«me
);

18 
	`mem£t
(&
unix_addr
, 0, (unix_addr));

19 
unix_addr
.
sun_Ámûy
 = 
AF_UNIX
;

20 
	`°r˝y
(
unix_addr
.
sun_∑th
, 
«me
);

21 
Àn
 = 
	`°æí
(
unix_addr
.
sun_∑th
Ë+ (unix_addr.
sun_Ámûy
);

23 (
	`böd
(
fd
[0], (
sockaddr
 *Ë&
unix_addr
, 
Àn
));

25 
	}
}

	@lib/openmax.c

1 
	~"≠ue.h
"

2 
	~<î∫o.h
>

3 
	~<limôs.h
>

5 #ifdef 
OPEN_MAX


6 
	g›ímax
 = 
OPEN_MAX
;

8 
	g›ímax
 = 0;

15 
	#OPEN_MAX_GUESS
 256

	)

18 
	$›í_max
()

20 i‡(
›ímax
 == 0) {

21 
î∫o
 = 0;

22 i‡((
›ímax
 = 
	`sysc⁄f
(
_SC_OPEN_MAX
)) < 0) {

23 i‡(
î∫o
 == 0)

24 
›ímax
 = 
OPEN_MAX_GUESS
;

26 
	`îr_sys
("sysconfÉrror for _SC_OPEN_MAX");

30 (
›ímax
);

31 
	}
}

	@lib/pathalloc.c

1 
	~"≠ue.h
"

2 
	~<î∫o.h
>

3 
	~<limôs.h
>

5 #ifdef 
PATH_MAX


6 
	g∑thmax
 = 
PATH_MAX
;

8 
	g∑thmax
 = 0;

11 
	#SUSV3
 200112L

	)

13 
	gposix_vîsi⁄
 = 0;

16 
	#PATH_MAX_GUESS
 1024

	)

19 
	$∑th_Æloc
(*
sizï
)

21 *
±r
;

22 
size
;

24 i‡(
posix_vîsi⁄
 == 0)

25 
posix_vîsi⁄
 = 
	`sysc⁄f
(
_SC_VERSION
);

27 i‡(
∑thmax
 == 0) {

28 
î∫o
 = 0;

29 i‡((
∑thmax
 = 
	`∑thc⁄f
("/", 
_PC_PATH_MAX
)) < 0) {

30 i‡(
î∫o
 == 0)

31 
∑thmax
 = 
PATH_MAX_GUESS
;

33 
	`îr_sys
("pathconfÉrror for _PC_PATH_MAX");

35 
∑thmax
++;

38 i‡(
posix_vîsi⁄
 < 
SUSV3
)

39 
size
 = 
∑thmax
 + 1;

41 
size
 = 
∑thmax
;

43 i‡((
±r
 = 
	`mÆloc
(
size
)Ë=
NULL
)

44 
	`îr_sys
("mallocÉrror forÖathname");

46 i‡(
sizï
 !
NULL
)

47 *
sizï
 = 
size
;

48 (
±r
);

49 
	}
}

	@lib/popen.c

1 
	~"≠ue.h
"

2 
	~<î∫o.h
>

3 
	~<f˙é.h
>

4 
	~<sys/waô.h
>

9 
pid_t
 *
	gchûdpid
 = 
NULL
;

14 
	gmaxfd
;

16 
FILE
 *

17 
	$p›í
(c⁄° *
cmd°rög
, c⁄° *
ty≥
)

19 
i
;

20 
pfd
[2];

21 
pid_t
 
pid
;

22 
FILE
 *
Â
;

25 i‡((
ty≥
[0] != 'r' &&Åype[0] != 'w') ||Åype[1] != 0) {

26 
î∫o
 = 
EINVAL
;

27 (
NULL
);

30 i‡(
chûdpid
 =
NULL
) {

32 
maxfd
 = 
	`›í_max
();

33 i‡((
chûdpid
 = 
	`ˇŒoc
(
maxfd
, (
pid_t
))Ë=
NULL
)

34 (
NULL
);

37 i‡(
	`pùe
(
pfd
) < 0)

38 (
NULL
);

40 i‡((
pid
 = 
	`f‹k
()) < 0) {

41 (
NULL
);

42 } i‡(
pid
 == 0) {

43 i‡(*
ty≥
 == 'r') {

44 
	`˛o£
(
pfd
[0]);

45 i‡(
pfd
[1] !
STDOUT_FILENO
) {

46 
	`dup2
(
pfd
[1], 
STDOUT_FILENO
);

47 
	`˛o£
(
pfd
[1]);

50 
	`˛o£
(
pfd
[1]);

51 i‡(
pfd
[0] !
STDIN_FILENO
) {

52 
	`dup2
(
pfd
[0], 
STDIN_FILENO
);

53 
	`˛o£
(
pfd
[0]);

58 
i
 = 0; i < 
maxfd
; i++)

59 i‡(
chûdpid
[
i
] > 0)

60 
	`˛o£
(
i
);

62 
	`exe˛
("/bö/sh", "sh", "-c", 
cmd°rög
, (*)0);

63 
	`_exô
(127);

67 i‡(*
ty≥
 == 'r') {

68 
	`˛o£
(
pfd
[1]);

69 i‡((
Â
 = 
	`fd›í
(
pfd
[0], 
ty≥
)Ë=
NULL
)

70 (
NULL
);

72 
	`˛o£
(
pfd
[0]);

73 i‡((
Â
 = 
	`fd›í
(
pfd
[1], 
ty≥
)Ë=
NULL
)

74 (
NULL
);

77 
chûdpid
[
	`fûío
(
Â
)] = 
pid
;

78 (
Â
);

79 
	}
}

82 
	$p˛o£
(
FILE
 *
Â
)

84 
fd
, 
°©
;

85 
pid_t
 
pid
;

87 i‡(
chûdpid
 =
NULL
) {

88 
î∫o
 = 
EINVAL
;

92 
fd
 = 
	`fûío
(
Â
);

93 i‡((
pid
 = 
chûdpid
[
fd
]) == 0) {

94 
î∫o
 = 
EINVAL
;

98 
chûdpid
[
fd
] = 0;

99 i‡(
	`f˛o£
(
Â
Ë=
EOF
)

102 
	`waôpid
(
pid
, &
°©
, 0) < 0)

103 i‡(
î∫o
 !
EINTR
)

106 (
°©
);

107 
	}
}

	@lib/prexit.c

1 
	~"≠ue.h
"

2 
	~<sys/waô.h
>

5 
	$¥_exô
(
°©us
)

7 i‡(
	`WIFEXITED
(
°©us
))

8 
	`¥ötf
("normalÅermination,Éxit status = %d\n",

9 
	`WEXITSTATUS
(
°©us
));

10 i‡(
	`WIFSIGNALED
(
°©us
))

11 
	`¥ötf
("abnormalÅermination, signalÇumber = %d%s\n",

12 
	`WTERMSIG
(
°©us
),

13 #ifdef 
WCOREDUMP


14 
	`WCOREDUMP
(
°©us
) ? " (core file generated)" : "");

18 i‡(
	`WIFSTOPPED
(
°©us
))

19 
	`¥ötf
("child stopped, signalÇumber = %d\n",

20 
	`WSTOPSIG
(
°©us
));

21 
	}
}

	@lib/prmask.c

1 
	~"≠ue.h
"

2 
	~<î∫o.h
>

5 
	$¥_mask
(c⁄° *
°r
)

7 
sig£t_t
 
sig£t
;

8 
î∫o_ßve
;

10 
î∫o_ßve
 = 
î∫o
;

11 i‡(
	`sig¥ocmask
(0, 
NULL
, &
sig£t
) < 0)

12 
	`îr_sys
("sigprocmaskÉrror");

14 
	`¥ötf
("%s", 
°r
);

15 i‡(
	`sigismembî
(&
sig£t
, 
SIGINT
)Ë
	`¥ötf
("SIGINT ");

16 i‡(
	`sigismembî
(&
sig£t
, 
SIGQUIT
)Ë
	`¥ötf
("SIGQUIT ");

17 i‡(
	`sigismembî
(&
sig£t
, 
SIGUSR1
)Ë
	`¥ötf
("SIGUSR1 ");

18 i‡(
	`sigismembî
(&
sig£t
, 
SIGALRM
)Ë
	`¥ötf
("SIGALRM ");

22 
	`¥ötf
("\n");

23 
î∫o
 = 
î∫o_ßve
;

24 
	}
}

	@lib/ptyfork.c

1 
	~"≠ue.h
"

2 
	~<ãrmios.h
>

3 #i‚def 
TIOCGWINSZ


4 
	~<sys/io˘l.h
>

7 
pid_t


8 
	$±y_f‹k
(*
±rfdm
, *
¶ave_«me
, 
¶ave_«mesz
,

9 c⁄° 
ãrmios
 *
¶ave_ãrmios
,

10 c⁄° 
wösize
 *
¶ave_wösize
)

12 
fdm
, 
fds
;

13 
pid_t
 
pid
;

14 
±s_«me
[20];

16 i‡((
fdm
 = 
	`±ym_›í
(
±s_«me
, (pts_name))) < 0)

17 
	`îr_sys
("ˇn'à›í ma°îÖty: %s,Éº‹ %d", 
±s_«me
, 
fdm
);

19 i‡(
¶ave_«me
 !
NULL
) {

24 
	`°∫˝y
(
¶ave_«me
, 
±s_«me
, 
¶ave_«mesz
);

25 
¶ave_«me
[
¶ave_«mesz
 - 1] = '\0';

28 i‡((
pid
 = 
	`f‹k
()) < 0) {

30 } i‡(
pid
 == 0) {

31 i‡(
	`£tsid
() < 0)

32 
	`îr_sys
("setsidÉrror");

37 i‡((
fds
 = 
	`±ys_›í
(
±s_«me
)) < 0)

38 
	`îr_sys
("can't open slaveÖty");

39 
	`˛o£
(
fdm
);

41 #if 
	`deföed
(
TIOCSCTTY
)

45 i‡(
	`io˘l
(
fds
, 
TIOCSCTTY
, (*)0) < 0)

46 
	`îr_sys
("TIOCSCTTYÉrror");

51 i‡(
¶ave_ãrmios
 !
NULL
) {

52 i‡(
	`tc£èâr
(
fds
, 
TCSANOW
, 
¶ave_ãrmios
) < 0)

53 
	`îr_sys
("tcsetattrÉrror on slaveÖty");

55 i‡(
¶ave_wösize
 !
NULL
) {

56 i‡(
	`io˘l
(
fds
, 
TIOCSWINSZ
, 
¶ave_wösize
) < 0)

57 
	`îr_sys
("TIOCSWINSZÉrror on slaveÖty");

63 i‡(
	`dup2
(
fds
, 
STDIN_FILENO
) != STDIN_FILENO)

64 
	`îr_sys
("dup2ÉrrorÅo stdin");

65 i‡(
	`dup2
(
fds
, 
STDOUT_FILENO
) != STDOUT_FILENO)

66 
	`îr_sys
("dup2ÉrrorÅo stdout");

67 i‡(
	`dup2
(
fds
, 
STDERR_FILENO
) != STDERR_FILENO)

68 
	`îr_sys
("dup2ÉrrorÅo stderr");

69 i‡(
fds
 !
STDIN_FILENO
 && fd†!
STDOUT_FILENO
 &&

70 
fds
 !
STDERR_FILENO
)

71 
	`˛o£
(
fds
);

74 *
±rfdm
 = 
fdm
;

75 (
pid
);

77 
	}
}

	@lib/readn.c

1 
	~"≠ue.h
"

3 
ssize_t


4 
	$ªadn
(
fd
, *
±r
, 
size_t
 
n
)

6 
size_t
 
∆e·
;

7 
ssize_t
 
ƒód
;

9 
∆e·
 = 
n
;

10 
∆e·
 > 0) {

11 i‡((
ƒód
 = 
	`ªad
(
fd
, 
±r
, 
∆e·
)) < 0) {

12 i‡(
∆e·
 =
n
)

16 } i‡(
ƒód
 == 0) {

19 
∆e·
 -
ƒód
;

20 
±r
 +
ƒód
;

22 (
n
 - 
∆e·
);

23 
	}
}

	@lib/recvfd.c

1 
	~"≠ue.h
"

2 #ifde‡
MACOS


3 
	~<sys/uio.h
>

5 
	~<sys/sockë.h
>

9 
	#CONTROLLEN
 
	`CMSG_LEN
(())

	)

11 
cmsghdr
 *
	gcm±r
 = 
NULL
;

19 
ªcv_fd
(
fd
, 
	$ssize_t
 (*
u£rfunc
)(, c⁄° *, 
size_t
))

21 
√wfd
, 
ƒ
, 
°©us
;

22 *
±r
;

23 
buf
[
MAXLINE
];

24 
iovec
 
iov
[1];

25 
msghdr
 
msg
;

27 
°©us
 = -1;

29 
iov
[0].
iov_ba£
 = 
buf
;

30 
iov
[0].
iov_Àn
 = (
buf
);

31 
msg
.
msg_iov
 = 
iov
;

32 
msg
.
msg_iovÀn
 = 1;

33 
msg
.
msg_«me
 = 
NULL
;

34 
msg
.
msg_«mñí
 = 0;

35 i‡(
cm±r
 =
NULL
 && (cm±∏
	`mÆloc
(
CONTROLLEN
)) == NULL)

37 
msg
.
msg_c⁄åﬁ
 = 
cm±r
;

38 
msg
.
msg_c⁄åﬁÀn
 = 
CONTROLLEN
;

39 i‡((
ƒ
 = 
	`ªcvmsg
(
fd
, &
msg
, 0)) < 0) {

40 
	`îr_sys
("recvmsgÉrror");

41 } i‡(
ƒ
 == 0) {

42 
	`îr_ªt
("connection closed by server");

51 
±r
 = 
buf
;Öå < &buf[
ƒ
]; ) {

52 i‡(*
±r
++ == 0) {

53 i‡(
±r
 !&
buf
[
ƒ
-1])

54 
	`îr_dump
("message formatÉrror");

55 
°©us
 = *
±r
 & 0xFF;

56 i‡(
°©us
 == 0) {

57 i‡(
msg
.
msg_c⁄åﬁÀn
 !
CONTROLLEN
)

58 
	`îr_dump
("status = 0 butÇo fd");

59 
√wfd
 = *(*)
	`CMSG_DATA
(
cm±r
);

61 
√wfd
 = -
°©us
;

63 
ƒ
 -= 2;

66 i‡(
ƒ
 > 0 && (*
u£rfunc
)(
STDERR_FILENO
, 
buf
,Çr) !=Çr)

68 i‡(
°©us
 >= 0)

69 (
√wfd
);

71 
	}
}

	@lib/semaph.c

30 
	~"≠ue.h
"

31 
	~<sys/ùc.h
>

32 
	~<sys/£m.h
>

33 
	~<î∫o.h
>

35 
£m_›
(, );

36 
£m_¸óã
(
key_t
, );

37 
£m_›í
(
key_t
);

38 
£m_rm
();

39 
£m_˛o£
();

40 
£m_waô
();

41 
£m_sig«l
();

43 
	#BIGCOUNT
 10000

	)

49 
£mbuf
 
	g›_lock
[2] = {

51 2, 1, 
SEM_UNDO


56 
£mbuf
 
	g›_íd¸óã
[2] = {

57 1, -1, 
SEM_UNDO
,

60 2, -1, 
SEM_UNDO


63 
£mbuf
 
	g›_›í
[1] = {

64 1, -1, 
SEM_UNDO


67 
£mbuf
 
	g›_˛o£
[3] = {

69 2, 1, 
SEM_UNDO
,

70 1, 1, 
SEM_UNDO


73 
£mbuf
 
	g›_u∆ock
[1] = {

74 2, -1, 
SEM_UNDO


77 
£mbuf
 
	g›_›
[1] = {

78 0, 99, 
SEM_UNDO


90 
	$£m_¸óã
(
key_t
 
key
, 
öôvÆ
)

92 
id
, 
£mvÆ
;

93 
	u£mun
 {

94 
vÆ
;

95 
£mid_ds
 *
buf
;

96 
ush‹t
 *
¨øy
;

97 } 
£m˘l_¨g
;

99 i‡(
key
 =
IPC_PRIVATE
)

102 i‡(
key
 =(
key_t
) -1)

105 
agaö
:

106 i‡((
id
 = 
	`£mgë
(
key
, 3, 0666 | 
IPC_CREAT
)) < 0)

124 i‡(
	`£m›
(
id
, &
›_lock
[0], 2) < 0) {

125 i‡(
î∫o
 =
EINVAL
)

126 
agaö
;

127 
	`îr_sys
("can'tÜock");

135 i‡((
£mvÆ
 = 
	`£m˘l
(
id
, 1, 
GETVAL
, 0)) < 0)

136 
	`îr_sys
("can't GETVAL");

138 i‡(
£mvÆ
 == 0) {

146 
£m˘l_¨g
.
vÆ
 = 
öôvÆ
;

147 i‡(
	`£m˘l
(
id
, 0, 
SETVAL
, 
£m˘l_¨g
) < 0)

148 
	`îr_sys
("can SETVAL[0]");

150 
£m˘l_¨g
.
vÆ
 = 
BIGCOUNT
;

151 i‡(
	`£m˘l
(
id
, 1, 
SETVAL
, 
£m˘l_¨g
) < 0)

152 
	`îr_sys
("can SETVAL[1]");

159 i‡(
	`£m›
(
id
, &
›_íd¸óã
[0], 2) < 0)

160 
	`îr_sys
("can'tÉnd create");

162 (
id
);

163 
	}
}

175 
	$£m_›í
(
key_t
 
key
)

177 
id
;

179 i‡(
key
 =
IPC_PRIVATE
)

182 i‡(
key
 =(
key_t
) -1)

185 i‡((
id
 = 
	`£mgë
(
key
, 3, 0)) < 0)

193 i‡(
	`£m›
(
id
, &
›_›í
[0], 1) < 0)

194 
	`îr_sys
("can't open");

196 (
id
);

197 
	}
}

208 
	$£m_rm
(
id
)

210 i‡(
	`£m˘l
(
id
, 0, 
IPC_RMID
, 0) < 0)

211 
	`îr_sys
("can't IPC_RMID");

212 
	}
}

223 
	$£m_˛o£
(
id
)

225 
£mvÆ
;

232 i‡(
	`£m›
(
id
, &
›_˛o£
[0], 3) < 0)

233 
	`îr_sys
("can't semop");

243 i‡((
£mvÆ
 = 
	`£m˘l
(
id
, 1, 
GETVAL
, 0)) < 0)

244 
	`îr_sys
("can't GETVAL");

246 i‡(
£mvÆ
 > 
BIGCOUNT
)

247 
	`îr_dump
("sem[1] > BIGCOUNT");

248 i‡(
£mvÆ
 =
BIGCOUNT
)

249 
	`£m_rm
(
id
);

251 i‡(
	`£m›
(
id
, &
›_u∆ock
[0], 1) < 0)

252 
	`îr_sys
("can't unlock");

253 
	}
}

262 
	$£m_waô
(
id
)

264 
	`£m_›
(
id
, -1);

265 
	}
}

273 
	$£m_sig«l
(
id
)

275 
	`£m_›
(
id
, 1);

276 
	}
}

284 
	$£m_›
(
id
, 
vÆue
)

286 i‡((
›_›
[0].
£m_›
 = 
vÆue
) == 0)

287 
	`îr_sys
("can't have value == 0");

289 i‡(
	`£m›
(
id
, &
›_›
[0], 1) < 0)

290 
	`îr_sys
("sem_opÉrror");

291 
	}
}

	@lib/senderr.c

1 
	~"≠ue.h
"

9 
	$£nd_îr
(
fd
, 
îrcode
, c⁄° *
msg
)

11 
n
;

13 i‡((
n
 = 
	`°æí
(
msg
)) > 0)

14 i‡(
	`wrôí
(
fd
, 
msg
, 
n
) !=Ç)

17 i‡(
îrcode
 >= 0)

18 
îrcode
 = -1;

20 i‡(
	`£nd_fd
(
fd
, 
îrcode
) < 0)

24 
	}
}

	@lib/sendfd.c

1 
	~"≠ue.h
"

2 #ifde‡
MACOS


3 
	~<sys/uio.h
>

5 
	~<sys/sockë.h
>

8 
	#CONTROLLEN
 
	`CMSG_LEN
(())

	)

10 
cmsghdr
 *
	gcm±r
 = 
NULL
;

17 
	$£nd_fd
(
fd
, 
fd_to_£nd
)

19 
iovec
 
iov
[1];

20 
msghdr
 
msg
;

21 
buf
[2];

23 
iov
[0].
iov_ba£
 = 
buf
;

24 
iov
[0].
iov_Àn
 = 2;

25 
msg
.
msg_iov
 = 
iov
;

26 
msg
.
msg_iovÀn
 = 1;

27 
msg
.
msg_«me
 = 
NULL
;

28 
msg
.
msg_«mñí
 = 0;

29 i‡(
fd_to_£nd
 < 0) {

30 
msg
.
msg_c⁄åﬁ
 = 
NULL
;

31 
msg
.
msg_c⁄åﬁÀn
 = 0;

32 
buf
[1] = -
fd_to_£nd
;

33 i‡(
buf
[1] == 0)

34 
buf
[1] = 1;

36 i‡(
cm±r
 =
NULL
 && (cm±∏
	`mÆloc
(
CONTROLLEN
)) == NULL)

38 
cm±r
->
cmsg_Àvñ
 = 
SOL_SOCKET
;

39 
cm±r
->
cmsg_ty≥
 = 
SCM_RIGHTS
;

40 
cm±r
->
cmsg_Àn
 = 
CONTROLLEN
;

41 
msg
.
msg_c⁄åﬁ
 = 
cm±r
;

42 
msg
.
msg_c⁄åﬁÀn
 = 
CONTROLLEN
;

43 *(*)
	`CMSG_DATA
(
cm±r
Ë
fd_to_£nd
;

44 
buf
[1] = 0;

46 
buf
[0] = 0;

47 i‡(
	`£ndmsg
(
fd
, &
msg
, 0) != 2)

50 
	}
}

	@lib/servaccept.c

1 
	~"≠ue.h
"

2 
	~<sys/sockë.h
>

3 
	~<sys/un.h
>

4 
	~<time.h
>

5 
	~<î∫o.h
>

7 
	#STALE
 30

	)

16 
	$£rv_ac˚±
(
li°ífd
, 
uid_t
 *
uid±r
)

18 
˛ifd
, 
Àn
, 
îr
, 
rvÆ
;

19 
time_t
 
°Æëime
;

20 
sockaddr_un
 
un
;

21 
°©
 
°©buf
;

23 
Àn
 = (
un
);

24 i‡((
˛ifd
 = 
	`ac˚±
(
li°ífd
, (
sockaddr
 *)&
un
, &
Àn
)) < 0)

28 
Àn
 -
	`off£tof
(
sockaddr_un
, 
sun_∑th
);

29 
un
.
sun_∑th
[
Àn
] = 0;

31 i‡(
	`°©
(
un
.
sun_∑th
, &
°©buf
) < 0) {

32 
rvÆ
 = -2;

33 
îrout
;

35 #ifdef 
S_ISSOCK


36 i‡(
	`S_ISSOCK
(
°©buf
.
°_mode
) == 0) {

37 
rvÆ
 = -3;

38 
îrout
;

41 i‡((
°©buf
.
°_mode
 & (
S_IRWXG
 | 
S_IRWXO
)) ||

42 (
°©buf
.
°_mode
 & 
S_IRWXU
) != S_IRWXU) {

43 
rvÆ
 = -4;

44 
îrout
;

47 
°Æëime
 = 
	`time
(
NULL
Ë- 
STALE
;

48 i‡(
°©buf
.
°_©ime
 < 
°Æëime
 ||

49 
°©buf
.
°_˘ime
 < 
°Æëime
 ||

50 
°©buf
.
°_mtime
 < 
°Æëime
) {

51 
rvÆ
 = -5;

52 
îrout
;

55 i‡(
uid±r
 !
NULL
)

56 *
uid±r
 = 
°©buf
.
°_uid
;

57 
	`u∆ök
(
un
.
sun_∑th
);

58 (
˛ifd
);

60 
îrout
:

61 
îr
 = 
î∫o
;

62 
	`˛o£
(
˛ifd
);

63 
î∫o
 = 
îr
;

64 (
rvÆ
);

65 
	}
}

	@lib/servlisten.c

1 
	~"≠ue.h
"

2 
	~<sys/sockë.h
>

3 
	~<sys/un.h
>

4 
	~<î∫o.h
>

6 
	#QLEN
 10

	)

13 
	$£rv_li°í
(c⁄° *
«me
)

15 
fd
, 
Àn
, 
îr
, 
rvÆ
;

16 
sockaddr_un
 
un
;

19 i‡((
fd
 = 
	`sockë
(
AF_UNIX
, 
SOCK_STREAM
, 0)) < 0)

22 
	`u∆ök
(
«me
);

25 
	`mem£t
(&
un
, 0, (un));

26 
un
.
sun_Ámûy
 = 
AF_UNIX
;

27 
	`°r˝y
(
un
.
sun_∑th
, 
«me
);

28 
Àn
 = 
	`off£tof
(
sockaddr_un
, 
sun_∑th
Ë+ 
	`°æí
(
«me
);

31 i‡(
	`böd
(
fd
, (
sockaddr
 *)&
un
, 
Àn
) < 0) {

32 
rvÆ
 = -2;

33 
îrout
;

36 i‡(
	`li°í
(
fd
, 
QLEN
) < 0) {

37 
rvÆ
 = -3;

38 
îrout
;

40 (
fd
);

42 
îrout
:

43 
îr
 = 
î∫o
;

44 
	`˛o£
(
fd
);

45 
î∫o
 = 
îr
;

46 (
rvÆ
);

47 
	}
}

	@lib/setfl.c

1 
	~"≠ue.h
"

2 
	~<f˙é.h
>

5 
	$£t_Ê
(
fd
, 
Êags
)

7 
vÆ
;

9 i‡((
vÆ
 = 
	`f˙é
(
fd
, 
F_GETFL
, 0)) < 0)

10 
	`îr_sys
("fcntl F_GETFLÉrror");

12 
vÆ
 |
Êags
;

14 i‡(
	`f˙é
(
fd
, 
F_SETFL
, 
vÆ
) < 0)

15 
	`îr_sys
("fcntl F_SETFLÉrror");

16 
	}
}

	@lib/signal.c

1 
	~"≠ue.h
"

4 
Sigfunc
 *

5 
	$sig«l
(
signo
, 
Sigfunc
 *
func
)

7 
siga˘i⁄
 
a˘
, 
ﬂ˘
;

9 
a˘
.
ß_h™dÀr
 = 
func
;

10 
	`sigem±y£t
(&
a˘
.
ß_mask
);

11 
a˘
.
ß_Êags
 = 0;

12 i‡(
signo
 =
SIGALRM
) {

13 #ifdef 
SA_INTERRUPT


14 
a˘
.
ß_Êags
 |
SA_INTERRUPT
;

17 #ifdef 
SA_RESTART


18 
a˘
.
ß_Êags
 |
SA_RESTART
;

21 i‡(
	`siga˘i⁄
(
signo
, &
a˘
, &
ﬂ˘
) < 0)

22 (
SIG_ERR
);

23 (
ﬂ˘
.
ß_h™dÀr
);

24 
	}
}

	@lib/signalintr.c

1 
	~"≠ue.h
"

3 
Sigfunc
 *

4 
	$sig«l_öå
(
signo
, 
Sigfunc
 *
func
)

6 
siga˘i⁄
 
a˘
, 
ﬂ˘
;

8 
a˘
.
ß_h™dÀr
 = 
func
;

9 
	`sigem±y£t
(&
a˘
.
ß_mask
);

10 
a˘
.
ß_Êags
 = 0;

11 #ifdef 
SA_INTERRUPT


12 
a˘
.
ß_Êags
 |
SA_INTERRUPT
;

14 i‡(
	`siga˘i⁄
(
signo
, &
a˘
, &
ﬂ˘
) < 0)

15 (
SIG_ERR
);

16 (
ﬂ˘
.
ß_h™dÀr
);

17 
	}
}

	@lib/sleep.c

1 
	~"≠ue.h
"

4 
	$sig_Ærm
(
signo
)

7 
	}
}

10 
	$¶ìp
(
n£cs
)

12 
siga˘i⁄
 
√wa˘
, 
ﬁda˘
;

13 
sig£t_t
 
√wmask
, 
ﬁdmask
, 
su•mask
;

14 
un¶ït
;

17 
√wa˘
.
ß_h™dÀr
 = 
sig_Ærm
;

18 
	`sigem±y£t
(&
√wa˘
.
ß_mask
);

19 
√wa˘
.
ß_Êags
 = 0;

20 
	`siga˘i⁄
(
SIGALRM
, &
√wa˘
, &
ﬁda˘
);

23 
	`sigem±y£t
(&
√wmask
);

24 
	`sigadd£t
(&
√wmask
, 
SIGALRM
);

25 
	`sig¥ocmask
(
SIG_BLOCK
, &
√wmask
, &
ﬁdmask
);

27 
	`Æ¨m
(
n£cs
);

29 
su•mask
 = 
ﬁdmask
;

30 
	`sigdñ£t
(&
su•mask
, 
SIGALRM
);

31 
	`sigsu•íd
(&
su•mask
);

35 
un¶ït
 = 
	`Æ¨m
(0);

36 
	`siga˘i⁄
(
SIGALRM
, &
ﬁda˘
, 
NULL
);

39 
	`sig¥ocmask
(
SIG_SETMASK
, &
ﬁdmask
, 
NULL
);

40 (
un¶ït
);

41 
	}
}

	@lib/sleepus.c

1 
	~"≠ue.h
"

2 
	~<sys/time.h
>

5 
	$¶ìp_us
(
nu£cs
)

7 
timevÆ
 
tvÆ
;

9 
tvÆ
.
tv_£c
 = 
nu£cs
 / 1000000;

10 
tvÆ
.
tv_u£c
 = 
nu£cs
 % 1000000;

11 
	`£À˘
(0, 
NULL
, NULL, NULL, &
tvÆ
);

12 
	}
}

	@lib/spipe.c

1 
	~"≠ue.h
"

2 
	~<sys/sockë.h
>

9 
	$s_pùe
(
fd
[2])

11 (
	`sockë∑ú
(
AF_UNIX
, 
SOCK_STREAM
, 0, 
fd
));

12 
	}
}

	@lib/tellwait.c

1 
	~"≠ue.h
"

3 vﬁ©ûê
sig_©omic_t
 
	gsigÊag
;

4 
sig£t_t
 
	g√wmask
, 
	gﬁdmask
, 
	gzîomask
;

7 
	$sig_u§
(
signo
)

9 
sigÊag
 = 1;

10 
	}
}

13 
	$TELL_WAIT
()

15 i‡(
	`sig«l
(
SIGUSR1
, 
sig_u§
Ë=
SIG_ERR
)

16 
	`îr_sys
("signal(SIGUSR1)Érror");

17 i‡(
	`sig«l
(
SIGUSR2
, 
sig_u§
Ë=
SIG_ERR
)

18 
	`îr_sys
("signal(SIGUSR2)Érror");

19 
	`sigem±y£t
(&
zîomask
);

20 
	`sigem±y£t
(&
√wmask
);

21 
	`sigadd£t
(&
√wmask
, 
SIGUSR1
);

22 
	`sigadd£t
(&
√wmask
, 
SIGUSR2
);

27 i‡(
	`sig¥ocmask
(
SIG_BLOCK
, &
√wmask
, &
ﬁdmask
) < 0)

28 
	`îr_sys
("SIG_BLOCKÉrror");

29 
	}
}

32 
	$TELL_PARENT
(
pid_t
 
pid
)

34 
	`kûl
(
pid
, 
SIGUSR2
);

35 
	}
}

38 
	$WAIT_PARENT
()

40 
sigÊag
 == 0)

41 
	`sigsu•íd
(&
zîomask
);

42 
sigÊag
 = 0;

47 i‡(
	`sig¥ocmask
(
SIG_SETMASK
, &
ﬁdmask
, 
NULL
) < 0)

48 
	`îr_sys
("SIG_SETMASKÉrror");

49 
	}
}

52 
	$TELL_CHILD
(
pid_t
 
pid
)

54 
	`kûl
(
pid
, 
SIGUSR1
);

55 
	}
}

58 
	$WAIT_CHILD
()

60 
sigÊag
 == 0)

61 
	`sigsu•íd
(&
zîomask
);

62 
sigÊag
 = 0;

67 i‡(
	`sig¥ocmask
(
SIG_SETMASK
, &
ﬁdmask
, 
NULL
) < 0)

68 
	`îr_sys
("SIG_SETMASKÉrror");

69 
	}
}

	@lib/ttymodes.c

1 
	~"≠ue.h
"

2 
	~<ãrmios.h
>

3 
	~<î∫o.h
>

5 
ãrmios
 
	gßve_ãrmios
;

6 
	gâyßvefd
 = -1;

7 íum { 
	mRESET
, 
	mRAW
, 
	mCBREAK
 } 
	gây°©e
 = 
RESET
;

10 
	$ây_cbªak
(
fd
)

12 
îr
;

13 
ãrmios
 
buf
;

15 i‡(
ây°©e
 !
RESET
) {

16 
î∫o
 = 
EINVAL
;

19 i‡(
	`tcgë©å
(
fd
, &
buf
) < 0)

21 
ßve_ãrmios
 = 
buf
;

26 
buf
.
c_lÊag
 &~(
ECHO
 | 
ICANON
);

31 
buf
.
c_cc
[
VMIN
] = 1;

32 
buf
.
c_cc
[
VTIME
] = 0;

33 i‡(
	`tc£èâr
(
fd
, 
TCSAFLUSH
, &
buf
) < 0)

40 i‡(
	`tcgë©å
(
fd
, &
buf
) < 0) {

41 
îr
 = 
î∫o
;

42 
	`tc£èâr
(
fd
, 
TCSAFLUSH
, &
ßve_ãrmios
);

43 
î∫o
 = 
îr
;

46 i‡((
buf
.
c_lÊag
 & (
ECHO
 | 
ICANON
)Ë|| buf.
c_cc
[
VMIN
] != 1 ||

47 
buf
.
c_cc
[
VTIME
] != 0) {

52 
	`tc£èâr
(
fd
, 
TCSAFLUSH
, &
ßve_ãrmios
);

53 
î∫o
 = 
EINVAL
;

57 
ây°©e
 = 
CBREAK
;

58 
âyßvefd
 = 
fd
;

60 
	}
}

63 
	$ây_øw
(
fd
)

65 
îr
;

66 
ãrmios
 
buf
;

68 i‡(
ây°©e
 !
RESET
) {

69 
î∫o
 = 
EINVAL
;

72 i‡(
	`tcgë©å
(
fd
, &
buf
) < 0)

74 
ßve_ãrmios
 = 
buf
;

80 
buf
.
c_lÊag
 &~(
ECHO
 | 
ICANON
 | 
IEXTEN
 | 
ISIG
);

87 
buf
.
c_iÊag
 &~(
BRKINT
 | 
ICRNL
 | 
INPCK
 | 
ISTRIP
 | 
IXON
);

92 
buf
.
c_cÊag
 &~(
CSIZE
 | 
PARENB
);

97 
buf
.
c_cÊag
 |
CS8
;

102 
buf
.
c_oÊag
 &~(
OPOST
);

107 
buf
.
c_cc
[
VMIN
] = 1;

108 
buf
.
c_cc
[
VTIME
] = 0;

109 i‡(
	`tc£èâr
(
fd
, 
TCSAFLUSH
, &
buf
) < 0)

116 i‡(
	`tcgë©å
(
fd
, &
buf
) < 0) {

117 
îr
 = 
î∫o
;

118 
	`tc£èâr
(
fd
, 
TCSAFLUSH
, &
ßve_ãrmios
);

119 
î∫o
 = 
îr
;

122 i‡((
buf
.
c_lÊag
 & (
ECHO
 | 
ICANON
 | 
IEXTEN
 | 
ISIG
)) ||

123 (
buf
.
c_iÊag
 & (
BRKINT
 | 
ICRNL
 | 
INPCK
 | 
ISTRIP
 | 
IXON
)) ||

124 (
buf
.
c_cÊag
 & (
CSIZE
 | 
PARENB
 | 
CS8
)) != CS8 ||

125 (
buf
.
c_oÊag
 & 
OPOST
Ë|| buf.
c_cc
[
VMIN
] != 1 ||

126 
buf
.
c_cc
[
VTIME
] != 0) {

131 
	`tc£èâr
(
fd
, 
TCSAFLUSH
, &
ßve_ãrmios
);

132 
î∫o
 = 
EINVAL
;

136 
ây°©e
 = 
RAW
;

137 
âyßvefd
 = 
fd
;

139 
	}
}

142 
	$ây_ª£t
(
fd
)

144 i‡(
ây°©e
 =
RESET
)

146 i‡(
	`tc£èâr
(
fd
, 
TCSAFLUSH
, &
ßve_ãrmios
) < 0)

148 
ây°©e
 = 
RESET
;

150 
	}
}

153 
	$ây_©exô
()

155 i‡(
âyßvefd
 >= 0)

156 
	`ây_ª£t
(
âyßvefd
);

157 
	}
}

159 
ãrmios
 *

160 
	$ây_ãrmios
()

162 (&
ßve_ãrmios
);

163 
	}
}

	@lib/writen.c

1 
	~"≠ue.h
"

3 
ssize_t


4 
	$wrôí
(
fd
, c⁄° *
±r
, 
size_t
 
n
)

6 
size_t
 
∆e·
;

7 
ssize_t
 
nwrôãn
;

9 
∆e·
 = 
n
;

10 
∆e·
 > 0) {

11 i‡((
nwrôãn
 = 
	`wrôe
(
fd
, 
±r
, 
∆e·
)) < 0) {

12 i‡(
∆e·
 =
n
)

16 } i‡(
nwrôãn
 == 0) {

19 
∆e·
 -
nwrôãn
;

20 
±r
 +
nwrôãn
;

22 (
n
 - 
∆e·
);

23 
	}
}

	@lock/deadlock.c

1 
	~"≠ue.h
"

2 
	~<f˙é.h
>

5 
	$lockabyã
(c⁄° *
«me
, 
fd
, 
off_t
 
off£t
)

7 i‡(
	`wrôew_lock
(
fd
, 
off£t
, 
SEEK_SET
, 1) < 0)

8 
	`îr_sys
("%s: wrôew_lockÉº‹", 
«me
);

9 
	`¥ötf
("%s: gŸÅhêlock, byã %ld\n", 
«me
, 
off£t
);

10 
	}
}

13 
	$maö
()

15 
fd
;

16 
pid_t
 
pid
;

21 i‡((
fd
 = 
	`¸ót
("ãm∂ock", 
FILE_MODE
)) < 0)

22 
	`îr_sys
("creatÉrror");

23 i‡(
	`wrôe
(
fd
, "ab", 2) != 2)

24 
	`îr_sys
("writeÉrror");

26 
	`TELL_WAIT
();

27 i‡((
pid
 = 
	`f‹k
()) < 0) {

28 
	`îr_sys
("forkÉrror");

29 } i‡(
pid
 == 0) {

30 
	`lockabyã
("chûd", 
fd
, 0);

31 
	`TELL_PARENT
(
	`gëµid
());

32 
	`WAIT_PARENT
();

33 
	`lockabyã
("chûd", 
fd
, 1);

35 
	`lockabyã
("∑ª¡", 
fd
, 1);

36 
	`TELL_CHILD
(
pid
);

37 
	`WAIT_CHILD
();

38 
	`lockabyã
("∑ª¡", 
fd
, 0);

40 
	`exô
(0);

41 
	}
}

	@lock/mandatory.c

1 
	~"≠ue.h
"

2 
	~<î∫o.h
>

3 
	~<f˙é.h
>

4 
	~<sys/waô.h
>

7 
	$maö
(
¨gc
, *
¨gv
[])

9 
fd
;

10 
pid_t
 
pid
;

11 
buf
[5];

12 
°©
 
°©buf
;

14 i‡(
¨gc
 != 2) {

15 
	`Ârötf
(
°dîr
, "ußge: %†fûíame\n", 
¨gv
[0]);

16 
	`exô
(1);

18 i‡((
fd
 = 
	`›í
(
¨gv
[1], 
O_RDWR
 | 
O_CREAT
 | 
O_TRUNC
, 
FILE_MODE
)) < 0)

19 
	`îr_sys
("openÉrror");

20 i‡(
	`wrôe
(
fd
, "abcdef", 6) != 6)

21 
	`îr_sys
("writeÉrror");

24 i‡(
	`f°©
(
fd
, &
°©buf
) < 0)

25 
	`îr_sys
("fstatÉrror");

26 i‡(
	`fchmod
(
fd
, (
°©buf
.
°_mode
 & ~
S_IXGRP
Ë| 
S_ISGID
) < 0)

27 
	`îr_sys
("fchmodÉrror");

29 
	`TELL_WAIT
();

31 i‡((
pid
 = 
	`f‹k
()) < 0) {

32 
	`îr_sys
("forkÉrror");

33 } i‡(
pid
 > 0) {

35 i‡(
	`wrôe_lock
(
fd
, 0, 
SEEK_SET
, 0) < 0)

36 
	`îr_sys
("write_lockÉrror");

38 
	`TELL_CHILD
(
pid
);

40 i‡(
	`waôpid
(
pid
, 
NULL
, 0) < 0)

41 
	`îr_sys
("waitpidÉrror");

43 
	`WAIT_PARENT
();

45 
	`£t_Ê
(
fd
, 
O_NONBLOCK
);

48 i‡(
	`ªad_lock
(
fd
, 0, 
SEEK_SET
, 0) != -1)

49 
	`îr_sys
("child:Ñead_lock succeeded");

50 
	`¥ötf
("read_lock ofálready-lockedÑegionÑeturns %d\n",

51 
î∫o
);

54 i‡(
	`l£ek
(
fd
, 0, 
SEEK_SET
) == -1)

55 
	`îr_sys
("lseekÉrror");

56 i‡(
	`ªad
(
fd
, 
buf
, 2) < 0)

57 
	`îr_ªt
("read failed (mandatoryÜocking works)");

59 
	`¥ötf
("read OK (no mandatoryÜocking), buf = %2.2s\n",

60 
buf
);

62 
	`exô
(0);

63 
	}
}

	@mycat/fgetsfputs.c

1 
	~"≠ue.h
"

4 
	$maö
()

6 
buf
[
MAXLINE
];

8 
	`fgës
(
buf
, 
MAXLINE
, 
°dö
Ë!
NULL
)

9 i‡(
	`Âuts
(
buf
, 
°dout
Ë=
EOF
)

10 
	`îr_sys
("outputÉrror");

12 i‡(
	`„º‹
(
°dö
))

13 
	`îr_sys
("inputÉrror");

15 
	`exô
(0);

16 
	}
}

	@mycat/getcputc.c

1 
	~"≠ue.h
"

4 
	$maö
()

6 
c
;

8 (
c
 = 
	`gëc
(
°dö
)Ë!
EOF
)

9 i‡(
	`putc
(
c
, 
°dout
Ë=
EOF
)

10 
	`îr_sys
("outputÉrror");

12 i‡(
	`„º‹
(
°dö
))

13 
	`îr_sys
("inputÉrror");

15 
	`exô
(0);

16 
	}
}

	@mycat/mycat.c

1 
	~"≠ue.h
"

3 
	#BUFFSIZE
 4096

	)

6 
	$maö
()

8 
n
;

9 
buf
[
BUFFSIZE
];

11 (
n
 = 
	`ªad
(
STDIN_FILENO
, 
buf
, 
BUFFSIZE
)) > 0)

12 i‡(
	`wrôe
(
STDOUT_FILENO
, 
buf
, 
n
) !=Ç)

13 
	`îr_sys
("writeÉrror");

15 i‡(
n
 < 0)

16 
	`îr_sys
("readÉrror");

18 
	`exô
(0);

19 
	}
}

	@open.fe/main.c

1 
	~"›í.h
"

2 
	~<f˙é.h
>

4 
	#BUFFSIZE
 8192

	)

7 
	$maö
(
¨gc
, *
¨gv
[])

9 
n
, 
fd
;

10 
buf
[
BUFFSIZE
], 
löe
[
MAXLINE
];

13 
	`fgës
(
löe
, 
MAXLINE
, 
°dö
Ë!
NULL
) {

14 i‡(
löe
[
	`°æí
(line) - 1] == '\n')

15 
löe
[
	`°æí
(line) - 1] = 0;

18 i‡((
fd
 = 
	`cs›í
(
löe
, 
O_RDONLY
)) < 0)

22 (
n
 = 
	`ªad
(
fd
, 
buf
, 
BUFFSIZE
)) > 0)

23 i‡(
	`wrôe
(
STDOUT_FILENO
, 
buf
, 
n
) !=Ç)

24 
	`îr_sys
("writeÉrror");

25 i‡(
n
 < 0)

26 
	`îr_sys
("readÉrror");

27 
	`˛o£
(
fd
);

30 
	`exô
(0);

31 
	}
}

	@open.fe/open.c

1 
	~"›í.h
"

2 
	~<sys/uio.h
>

9 
	$cs›í
(*
«me
, 
oÊag
)

11 
pid_t
 
pid
;

12 
Àn
;

13 
buf
[10];

14 
iovec
 
iov
[3];

15 
fd
[2] = { -1, -1 };

17 i‡(
fd
[0] < 0) {

18 i‡(
	`s_pùe
(
fd
) < 0)

19 
	`îr_sys
("s_pipeÉrror");

20 i‡((
pid
 = 
	`f‹k
()) < 0) {

21 
	`îr_sys
("forkÉrror");

22 } i‡(
pid
 == 0) {

23 
	`˛o£
(
fd
[0]);

24 i‡(
fd
[1] !
STDIN_FILENO
 &&

25 
	`dup2
(
fd
[1], 
STDIN_FILENO
) != STDIN_FILENO)

26 
	`îr_sys
("dup2ÉrrorÅo stdin");

27 i‡(
fd
[1] !
STDOUT_FILENO
 &&

28 
	`dup2
(
fd
[1], 
STDOUT_FILENO
) != STDOUT_FILENO)

29 
	`îr_sys
("dup2ÉrrorÅo stdout");

30 i‡(
	`exe˛
("./opend", "opend", (*)0) < 0)

31 
	`îr_sys
("execlÉrror");

33 
	`˛o£
(
fd
[1]);

35 
	`•rötf
(
buf
, " %d", 
oÊag
);

36 
iov
[0].
iov_ba£
 = 
CL_OPEN
 " ";

37 
iov
[0].
iov_Àn
 = 
	`°æí
(
CL_OPEN
) + 1;

38 
iov
[1].
iov_ba£
 = 
«me
;

39 
iov
[1].
iov_Àn
 = 
	`°æí
(
«me
);

40 
iov
[2].
iov_ba£
 = 
buf
;

41 
iov
[2].
iov_Àn
 = 
	`°æí
(
buf
) + 1;

42 
Àn
 = 
iov
[0].
iov_Àn
 + iov[1].iov_len + iov[2].iov_len;

43 i‡(
	`wrôev
(
fd
[0], &
iov
[0], 3Ë!
Àn
)

44 
	`îr_sys
("writevÉrror");

47 (
	`ªcv_fd
(
fd
[0], 
wrôe
));

48 
	}
}

	@open.fe/open.h

1 
	~"≠ue.h
"

2 
	~<î∫o.h
>

4 
	#CL_OPEN
 "›í"

	)

6 
cs›í
(*, );

	@open/open.c

1 
	~"›í.h
"

2 
	~<sys/uio.h
>

9 
	$cs›í
(*
«me
, 
oÊag
)

11 
Àn
;

12 
buf
[10];

13 
iovec
 
iov
[3];

14 
csfd
 = -1;

16 i‡(
csfd
 < 0) {

17 i‡((
csfd
 = 
	`˛i_c⁄n
(
CS_OPEN
)) < 0)

18 
	`îr_sys
("cli_connÉrror");

21 
	`•rötf
(
buf
, " %d", 
oÊag
);

22 
iov
[0].
iov_ba£
 = 
CL_OPEN
 " ";

23 
iov
[0].
iov_Àn
 = 
	`°æí
(
CL_OPEN
) + 1;

24 
iov
[1].
iov_ba£
 = 
«me
;

25 
iov
[1].
iov_Àn
 = 
	`°æí
(
«me
);

26 
iov
[2].
iov_ba£
 = 
buf
;

27 
iov
[2].
iov_Àn
 = 
	`°æí
(
buf
) + 1;

28 
Àn
 = 
iov
[0].
iov_Àn
 + iov[1].iov_len + iov[2].iov_len;

29 i‡(
	`wrôev
(
csfd
, &
iov
[0], 3Ë!
Àn
)

30 
	`îr_sys
("writevÉrror");

33 (
	`ªcv_fd
(
csfd
, 
wrôe
));

34 
	}
}

	@open/open.h

1 
	~"≠ue.h
"

2 
	~<î∫o.h
>

4 
	#CL_OPEN
 "›í"

	)

5 
	#CS_OPEN
 "/home/ßr/›íd"

	)

7 
cs›í
(*, );

	@opend.fe/cliargs.c

1 
	~"›íd.h
"

9 
	$˛i_¨gs
(
¨gc
, **
¨gv
)

11 i‡(
¨gc
 !3 || 
	`°rcmp
(
¨gv
[0], 
CL_OPEN
) != 0) {

12 
	`°r˝y
(
îrmsg
, "usage: <pathname> <oflag>\n");

15 
∑th«me
 = 
¨gv
[1];

16 
oÊag
 = 
	`©oi
(
¨gv
[2]);

18 
	}
}

	@opend.fe/main.c

1 
	~"›íd.h
"

3 
	gîrmsg
[
MAXLINE
];

4 
	goÊag
;

5 *
	g∑th«me
;

8 
	$maö
()

10 
ƒód
;

11 
buf
[
MAXLINE
];

14 i‡((
ƒód
 = 
	`ªad
(
STDIN_FILENO
, 
buf
, 
MAXLINE
)) < 0)

15 
	`îr_sys
("readÉrror on streamÖipe");

16 i‡(
ƒód
 == 0)

18 
	`ªque°
(
buf
, 
ƒód
, 
STDOUT_FILENO
);

20 
	`exô
(0);

21 
	}
}

	@opend.fe/opend.h

1 
	~"≠ue.h
"

2 
	~<î∫o.h
>

4 
	#CL_OPEN
 "›í"

	)

6 
îrmsg
[];

7 
oÊag
;

8 *
∑th«me
;

10 
˛i_¨gs
(, **);

11 
ªque°
(*, , );

	@opend.fe/request.c

1 
	~"›íd.h
"

2 
	~<f˙é.h
>

5 
	$ªque°
(*
buf
, 
ƒód
, 
fd
)

7 
√wfd
;

9 i‡(
buf
[
ƒód
-1] != 0) {

10 
	`•rötf
(
îrmsg
, "requestÇotÇullÅerminated: %*.*s\n",

11 
ƒód
,Çªad, 
buf
);

12 
	`£nd_îr
(
fd
, -1, 
îrmsg
);

15 i‡(
	`buf_¨gs
(
buf
, 
˛i_¨gs
) < 0) {

16 
	`£nd_îr
(
fd
, -1, 
îrmsg
);

19 i‡((
√wfd
 = 
	`›í
(
∑th«me
, 
oÊag
)) < 0) {

20 
	`•rötf
(
îrmsg
, "ˇn'à›í %s: %s\n", 
∑th«me
,

21 
	`°ªº‹
(
î∫o
));

22 
	`£nd_îr
(
fd
, -1, 
îrmsg
);

25 i‡(
	`£nd_fd
(
fd
, 
√wfd
) < 0)

26 
	`îr_sys
("send_fdÉrror");

27 
	`˛o£
(
√wfd
);

28 
	}
}

	@opend/client.c

1 
	~"›íd.h
"

3 
	#NALLOC
 10

	)

6 
	$˛õ¡_Æloc
()

8 
i
;

10 i‡(
˛õ¡
 =
NULL
)

11 
˛õ¡
 = 
	`mÆloc
(
NALLOC
 * (
Clõ¡
));

13 
˛õ¡
 = 
	`ªÆloc
(˛õ¡, (
˛õ¡_size
+
NALLOC
)*(
Clõ¡
));

14 i‡(
˛õ¡
 =
NULL
)

15 
	`îr_sys
("can'tálloc for clientárray");

18 
i
 = 
˛õ¡_size
; i < clõ¡_sizê+ 
NALLOC
; i++)

19 
˛õ¡
[
i
].
fd
 = -1;

21 
˛õ¡_size
 +
NALLOC
;

22 
	}
}

28 
	$˛õ¡_add
(
fd
, 
uid_t
 
uid
)

30 
i
;

32 i‡(
˛õ¡
 =
NULL
)

33 
	`˛õ¡_Æloc
();

34 
agaö
:

35 
i
 = 0; i < 
˛õ¡_size
; i++) {

36 i‡(
˛õ¡
[
i
].
fd
 == -1) {

37 
˛õ¡
[
i
].
fd
 = fd;

38 
˛õ¡
[
i
].
uid
 = uid;

39 (
i
);

44 
	`˛õ¡_Æloc
();

45 
agaö
;

46 
	}
}

52 
	$˛õ¡_dñ
(
fd
)

54 
i
;

56 
i
 = 0; i < 
˛õ¡_size
; i++) {

57 i‡(
˛õ¡
[
i
].
fd
 == fd) {

58 
˛õ¡
[
i
].
fd
 = -1;

62 
	`log_quô
("ˇn'àföd clõ¡É¡ry f‹ fd %d", 
fd
);

63 
	}
}

	@opend/loop.poll.c

1 
	~"›íd.h
"

2 
	~<pﬁl.h
>

3 #i‡!
deföed
(
BSD
Ë&& !deföed(
MACOS
)

4 
	~<°r›ts.h
>

8 
	$lo›
()

10 
i
, 
maxi
, 
li°ífd
, 
˛ifd
, 
ƒód
;

11 
buf
[
MAXLINE
];

12 
uid_t
 
uid
;

13 
pﬁlfd
 *pollfd;

15 i‡((
pﬁlfd
 = 
	`mÆloc
(
	`›í_max
(Ë* (pﬁlfd))Ë=
NULL
)

16 
	`îr_sys
("mallocÉrror");

19 i‡((
li°ífd
 = 
	`£rv_li°í
(
CS_OPEN
)) < 0)

20 
	`log_sys
("serv_listenÉrror");

21 
	`˛õ¡_add
(
li°ífd
, 0);

22 
pﬁlfd
[0].
fd
 = 
li°ífd
;

23 
pﬁlfd
[0].
evíts
 = 
POLLIN
;

24 
maxi
 = 0;

27 i‡(
	`pﬁl
(
pﬁlfd
, 
maxi
 + 1, -1) < 0)

28 
	`log_sys
("pollÉrror");

30 i‡(
pﬁlfd
[0].
ªvíts
 & 
POLLIN
) {

32 i‡((
˛ifd
 = 
	`£rv_ac˚±
(
li°ífd
, &
uid
)) < 0)

33 
	`log_sys
("£rv_ac˚±Éº‹: %d", 
˛ifd
);

34 
i
 = 
	`˛õ¡_add
(
˛ifd
, 
uid
);

35 
pﬁlfd
[
i
].
fd
 = 
˛ifd
;

36 
pﬁlfd
[
i
].
evíts
 = 
POLLIN
;

37 i‡(
i
 > 
maxi
)

38 
maxi
 = 
i
;

39 
	`log_msg
("√w c⁄√˘i⁄: uid %d, fd %d", 
uid
, 
˛ifd
);

42 
i
 = 1; i <
maxi
; i++) {

43 i‡((
˛ifd
 = 
˛õ¡
[
i
].
fd
) < 0)

45 i‡(
pﬁlfd
[
i
].
ªvíts
 & 
POLLHUP
) {

46 
hungup
;

47 } i‡(
pﬁlfd
[
i
].
ªvíts
 & 
POLLIN
) {

49 i‡((
ƒód
 = 
	`ªad
(
˛ifd
, 
buf
, 
MAXLINE
)) < 0) {

50 
	`log_sys
("ªadÉº‹ o¿fd %d", 
˛ifd
);

51 } i‡(
ƒód
 == 0) {

52 
hungup
:

53 
	`log_msg
("closed: uid %d, fd %d",

54 
˛õ¡
[
i
].
uid
, 
˛ifd
);

55 
	`˛õ¡_dñ
(
˛ifd
);

56 
pﬁlfd
[
i
].
fd
 = -1;

57 
	`˛o£
(
˛ifd
);

59 
	`ªque°
(
buf
, 
ƒód
, 
˛ifd
, 
˛õ¡
[
i
].
uid
);

64 
	}
}

	@opend/loop.select.c

1 
	~"›íd.h
"

2 
	~<sys/time.h
>

3 
	~<sys/£À˘.h
>

6 
	$lo›
()

8 
i
, 
n
, 
maxfd
, 
maxi
, 
li°ífd
, 
˛ifd
, 
ƒód
;

9 
buf
[
MAXLINE
];

10 
uid_t
 
uid
;

11 
fd_£t
 
r£t
, 
Æl£t
;

13 
	`FD_ZERO
(&
Æl£t
);

16 i‡((
li°ífd
 = 
	`£rv_li°í
(
CS_OPEN
)) < 0)

17 
	`log_sys
("serv_listenÉrror");

18 
	`FD_SET
(
li°ífd
, &
Æl£t
);

19 
maxfd
 = 
li°ífd
;

20 
maxi
 = -1;

23 
r£t
 = 
Æl£t
;

24 i‡((
n
 = 
	`£À˘
(
maxfd
 + 1, &
r£t
, 
NULL
, NULL, NULL)) < 0)

25 
	`log_sys
("selectÉrror");

27 i‡(
	`FD_ISSET
(
li°ífd
, &
r£t
)) {

29 i‡((
˛ifd
 = 
	`£rv_ac˚±
(
li°ífd
, &
uid
)) < 0)

30 
	`log_sys
("£rv_ac˚±Éº‹: %d", 
˛ifd
);

31 
i
 = 
	`˛õ¡_add
(
˛ifd
, 
uid
);

32 
	`FD_SET
(
˛ifd
, &
Æl£t
);

33 i‡(
˛ifd
 > 
maxfd
)

34 
maxfd
 = 
˛ifd
;

35 i‡(
i
 > 
maxi
)

36 
maxi
 = 
i
;

37 
	`log_msg
("√w c⁄√˘i⁄: uid %d, fd %d", 
uid
, 
˛ifd
);

41 
i
 = 0; i <
maxi
; i++) {

42 i‡((
˛ifd
 = 
˛õ¡
[
i
].
fd
) < 0)

44 i‡(
	`FD_ISSET
(
˛ifd
, &
r£t
)) {

46 i‡((
ƒód
 = 
	`ªad
(
˛ifd
, 
buf
, 
MAXLINE
)) < 0) {

47 
	`log_sys
("ªadÉº‹ o¿fd %d", 
˛ifd
);

48 } i‡(
ƒód
 == 0) {

49 
	`log_msg
("closed: uid %d, fd %d",

50 
˛õ¡
[
i
].
uid
, 
˛ifd
);

51 
	`˛õ¡_dñ
(
˛ifd
);

52 
	`FD_CLR
(
˛ifd
, &
Æl£t
);

53 
	`˛o£
(
˛ifd
);

55 
	`ªque°
(
buf
, 
ƒód
, 
˛ifd
, 
˛õ¡
[
i
].
uid
);

60 
	}
}

	@opend/main.c

1 
	~"›íd.h
"

2 
	~<sy¶og.h
>

4 
	gdebug
, 
	goÊag
, 
	g˛õ¡_size
, 
	glog_to_°dîr
;

5 
	gîrmsg
[
MAXLINE
];

6 *
	g∑th«me
;

7 
Clõ¡
 *
	g˛õ¡
 = 
NULL
;

10 
	$maö
(
¨gc
, *
¨gv
[])

12 
c
;

14 
	`log_›í
("›í.£rv", 
LOG_PID
, 
LOG_USER
);

16 
›ãº
 = 0;

17 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "d")Ë!
EOF
) {

18 
c
) {

20 
debug
 = 
log_to_°dîr
 = 1;

24 
	`îr_quô
("uƒecognized o±i⁄: -%c", 
›t›t
);

28 i‡(
debug
 == 0)

29 
	`d´m⁄ize
("opend");

31 
	`lo›
();

32 
	}
}

	@opend/opend.h

1 
	~"≠ue.h
"

2 
	~<î∫o.h
>

4 
	#CS_OPEN
 "/home/ßr/›íd"

	)

5 
	#CL_OPEN
 "›í"

	)

7 
debug
;

8 
îrmsg
[];

9 
oÊag
;

10 *
∑th«me
;

13 
	mfd
;

14 
uid_t
 
	muid
;

15 } 
	tClõ¡
;

17 
Clõ¡
 *
˛õ¡
;

18 
˛õ¡_size
;

20 
˛i_¨gs
(, **);

21 
˛õ¡_add
(, 
uid_t
);

22 
˛õ¡_dñ
();

23 
lo›
();

24 
ªque°
(*, , , 
uid_t
);

	@opend/request.c

1 
	~"›íd.h
"

2 
	~<f˙é.h
>

5 
	$ªque°
(*
buf
, 
ƒód
, 
˛ifd
, 
uid_t
 
uid
)

7 
√wfd
;

9 i‡(
buf
[
ƒód
-1] != 0) {

10 
	`•rötf
(
îrmsg
,

12 
uid
, 
ƒód
,Çªad, 
buf
);

13 
	`£nd_îr
(
˛ifd
, -1, 
îrmsg
);

16 
	`log_msg
("ªque°: %s, from uid %d", 
buf
, 
uid
);

19 i‡(
	`buf_¨gs
(
buf
, 
˛i_¨gs
) < 0) {

20 
	`£nd_îr
(
˛ifd
, -1, 
îrmsg
);

21 
	`log_msg
(
îrmsg
);

25 i‡((
√wfd
 = 
	`›í
(
∑th«me
, 
oÊag
)) < 0) {

26 
	`•rötf
(
îrmsg
, "can't open %s: %s\n",

27 
∑th«me
, 
	`°ªº‹
(
î∫o
));

28 
	`£nd_îr
(
˛ifd
, -1, 
îrmsg
);

29 
	`log_msg
(
îrmsg
);

34 i‡(
	`£nd_fd
(
˛ifd
, 
√wfd
) < 0)

35 
	`log_sys
("send_fdÉrror");

36 
	`log_msg
("£¡ fd %d ovî fd %d f‹ %s", 
√wfd
, 
˛ifd
, 
∑th«me
);

37 
	`˛o£
(
√wfd
);

38 
	}
}

	@proc/echoall.c

1 
	~"≠ue.h
"

4 
	$maö
(
¨gc
, *
¨gv
[])

6 
i
;

7 **
±r
;

8 **
ívú⁄
;

10 
i
 = 0; i < 
¨gc
; i++)

11 
	`¥ötf
("¨gv[%d]: %s\n", 
i
, 
¨gv
[i]);

13 
±r
 = 
ívú⁄
; *ptr != 0;Ötr++)

14 
	`¥ötf
("%s\n", *
±r
);

16 
	`exô
(0);

17 
	}
}

	@proc/echoarg.c

1 
	~"≠ue.h
"

4 
	$maö
(
¨gc
, *
¨gv
[])

6 
i
;

8 
i
 = 0; i < 
¨gc
; i++)

9 
	`¥ötf
("¨gv[%d]: %s\n", 
i
, 
¨gv
[i]);

10 
	`exô
(0);

11 
	}
}

	@proc/exec1.c

1 
	~"≠ue.h
"

2 
	~<sys/waô.h
>

4 *
	gív_öô
[] = { "USER=unknown", "PATH=/tmp", 
NULL
 };

7 
	$maö
()

9 
pid_t
 
pid
;

11 i‡((
pid
 = 
	`f‹k
()) < 0) {

12 
	`îr_sys
("forkÉrror");

13 } i‡(
pid
 == 0) {

14 i‡(
	`exe˛e
("/home/sar/bin/echoall", "echoall", "myarg1",

15 "MY ARG2", (*)0, 
ív_öô
) < 0)

16 
	`îr_sys
("execleÉrror");

19 i‡(
	`waôpid
(
pid
, 
NULL
, 0) < 0)

20 
	`îr_sys
("waitÉrror");

22 i‡((
pid
 = 
	`f‹k
()) < 0) {

23 
	`îr_sys
("forkÉrror");

24 } i‡(
pid
 == 0) {

25 i‡(
	`exe˛p
("echoall", "echoall", "only 1árg", (*)0) < 0)

26 
	`îr_sys
("execlpÉrror");

29 
	`exô
(0);

30 
	}
}

	@proc/exec2.c

1 
	~"≠ue.h
"

2 
	~<sys/waô.h
>

5 
	$maö
()

7 
pid_t
 
pid
;

9 i‡((
pid
 = 
	`f‹k
()) < 0) {

10 
	`îr_sys
("forkÉrror");

11 } i‡(
pid
 == 0) {

12 i‡(
	`exe˛
("/home/sar/bin/testinterp",

14 
	`îr_sys
("execlÉrror");

16 i‡(
	`waôpid
(
pid
, 
NULL
, 0) < 0)

17 
	`îr_sys
("waitpidÉrror");

18 
	`exô
(0);

19 
	}
}

	@proc/fork1.c

1 
	~"≠ue.h
"

3 
	gglob
 = 6;

4 
	gbuf
[] = "a writeÅo stdout\n";

7 
	$maö
()

9 
v¨
;

10 
pid_t
 
pid
;

12 
v¨
 = 88;

13 i‡(
	`wrôe
(
STDOUT_FILENO
, 
buf
, (buf)-1) != (buf)-1)

14 
	`îr_sys
("writeÉrror");

15 
	`¥ötf
("before fork\n");

17 i‡((
pid
 = 
	`f‹k
()) < 0) {

18 
	`îr_sys
("forkÉrror");

19 } i‡(
pid
 == 0) {

20 
glob
++;

21 
v¨
++;

23 
	`¶ìp
(2);

26 
	`¥ötf
("pid = %d, glob = %d, v¨ = %d\n", 
	`gëpid
(), 
glob
, 
v¨
);

27 
	`exô
(0);

28 
	}
}

	@proc/fork2.c

1 
	~"≠ue.h
"

2 
	~<sys/waô.h
>

5 
	$maö
()

7 
pid_t
 
pid
;

9 i‡((
pid
 = 
	`f‹k
()) < 0) {

10 
	`îr_sys
("forkÉrror");

11 } i‡(
pid
 == 0) {

12 i‡((
pid
 = 
	`f‹k
()) < 0)

13 
	`îr_sys
("forkÉrror");

14 i‡(
pid
 > 0)

15 
	`exô
(0);

23 
	`¶ìp
(2);

24 
	`¥ötf
("£c⁄d chûd,Ö¨íàpid = %d\n", 
	`gëµid
());

25 
	`exô
(0);

28 i‡(
	`waôpid
(
pid
, 
NULL
, 0) !=Öid)

29 
	`îr_sys
("waitpidÉrror");

35 
	`exô
(0);

36 
	}
}

	@proc/pracct.c

1 
	~"≠ue.h
"

2 
	~<sys/ac˘.h
>

4 #ifde‡
HAS_SA_STAT


5 
	#FMT
 "%-*.*†É = %6ld, ch¨†%7ld, sèà%3u: %¯%¯%¯%c\n"

	)

7 
	#FMT
 "%-*.*†É = %6ld, ch¨†%7ld, %¯%¯%¯%c\n"

	)

9 #i‚de‡
HAS_ACORE


10 
	#ACORE
 0

	)

12 #i‚de‡
HAS_AXSIG


13 
	#AXSIG
 0

	)

17 
	$com±2ul⁄g
(
comp_t
 
com±ime
)

19 
vÆ
;

20 
exp
;

22 
vÆ
 = 
com±ime
 & 0x1fff;

23 
exp
 = (
com±ime
 >> 13) & 7;

24 
exp
-- > 0)

25 
vÆ
 *= 8;

26 (
vÆ
);

27 
	}
}

29 
	$maö
(
¨gc
, *
¨gv
[])

31 
ac˘
 
acd©a
;

32 
FILE
 *
Â
;

34 i‡(
¨gc
 != 2)

35 
	`îr_quô
("usage:Öracct filename");

36 i‡((
Â
 = 
	`f›í
(
¨gv
[1], "r")Ë=
NULL
)

37 
	`îr_sys
("ˇn'à›í %s", 
¨gv
[1]);

38 
	`‰ód
(&
acd©a
, ◊cd©a), 1, 
Â
) == 1) {

39 
	`¥ötf
(
FMT
, ()(
acd©a
.
ac_comm
),

40 ()(
acd©a
.
ac_comm
),ácdata.ac_comm,

41 
	`com±2ul⁄g
(
acd©a
.
ac_ëime
), com±2ul⁄g◊cd©a.
ac_io
),

42 #ifde‡
HAS_SA_STAT


43 (Ë
acd©a
.
ac_°©
,

45 
acd©a
.
ac_Êag
 & 
ACORE
 ? 'D' : ' ',

46 
acd©a
.
ac_Êag
 & 
AXSIG
 ? 'X' : ' ',

47 
acd©a
.
ac_Êag
 & 
AFORK
 ? 'F' : ' ',

48 
acd©a
.
ac_Êag
 & 
ASU
 ? 'S' : ' ');

50 i‡(
	`„º‹
(
Â
))

51 
	`îr_sys
("readÉrror");

52 
	`exô
(0);

53 
	}
}

	@proc/pruids.c

1 
	~"≠ue.h
"

4 
	$maö
()

6 
	`¥ötf
("ªÆ uid = %d,Éf„˘ivêuid = %d\n", 
	`gëuid
(), 
	`gëeuid
());

7 
	`exô
(0);

8 
	}
}

	@proc/shell1.c

1 
	~"≠ue.h
"

2 
	~<sys/waô.h
>

5 
	$maö
()

7 
buf
[
MAXLINE
];

8 
pid_t
 
pid
;

9 
°©us
;

11 
	`¥ötf
("%% ");

12 
	`fgës
(
buf
, 
MAXLINE
, 
°dö
Ë!
NULL
) {

13 i‡(
buf
[
	`°æí
(buf) - 1] == '\n')

14 
buf
[
	`°æí
(buf) - 1] = 0;

16 i‡((
pid
 = 
	`f‹k
()) < 0) {

17 
	`îr_sys
("forkÉrror");

18 } i‡(
pid
 == 0) {

19 
	`exe˛p
(
buf
, buf, (*)0);

20 
	`îr_ªt
("couldn'àexecuã: %s", 
buf
);

21 
	`exô
(127);

25 i‡((
pid
 = 
	`waôpid
’id, &
°©us
, 0)) < 0)

26 
	`îr_sys
("waitpidÉrror");

27 
	`¥ötf
("%% ");

29 
	`exô
(0);

30 
	}
}

	@proc/shell2.c

1 
	~"≠ue.h
"

2 
	~<sys/waô.h
>

4 
sig_öt
();

7 
	$maö
()

9 
buf
[
MAXLINE
];

10 
pid_t
 
pid
;

11 
°©us
;

13 i‡(
	`sig«l
(
SIGINT
, 
sig_öt
Ë=
SIG_ERR
)

14 
	`îr_sys
("signalÉrror");

16 
	`¥ötf
("%% ");

17 
	`fgës
(
buf
, 
MAXLINE
, 
°dö
Ë!
NULL
) {

18 i‡(
buf
[
	`°æí
(buf) - 1] == '\n')

19 
buf
[
	`°æí
(buf) - 1] = 0;

21 i‡((
pid
 = 
	`f‹k
()) < 0) {

22 
	`îr_sys
("forkÉrror");

23 } i‡(
pid
 == 0) {

24 
	`exe˛p
(
buf
, buf, (*)0);

25 
	`îr_ªt
("couldn'àexecuã: %s", 
buf
);

26 
	`exô
(127);

30 i‡((
pid
 = 
	`waôpid
’id, &
°©us
, 0)) < 0)

31 
	`îr_sys
("waitpidÉrror");

32 
	`¥ötf
("%% ");

34 
	`exô
(0);

35 
	}
}

38 
	$sig_öt
(
signo
)

40 
	`¥ötf
("interrupt\n%% ");

41 
	}
}

	@proc/system.c

1 
	~<sys/waô.h
>

2 
	~<î∫o.h
>

3 
	~<uni°d.h
>

6 
	$sy°em
(c⁄° *
cmd°rög
)

8 
pid_t
 
pid
;

9 
°©us
;

11 i‡(
cmd°rög
 =
NULL
)

14 i‡((
pid
 = 
	`f‹k
()) < 0) {

15 
°©us
 = -1;

16 } i‡(
pid
 == 0) {

17 
	`exe˛
("/bö/sh", "sh", "-c", 
cmd°rög
, (*)0);

18 
	`_exô
(127);

20 
	`waôpid
(
pid
, &
°©us
, 0) < 0) {

21 i‡(
î∫o
 !
EINTR
) {

22 
°©us
 = -1;

28 (
°©us
);

29 
	}
}

	@proc/systest1.c

1 
	~"≠ue.h
"

2 
	~<sys/waô.h
>

5 
	$maö
()

7 
°©us
;

9 i‡((
°©us
 = 
	`sy°em
("date")) < 0)

10 
	`îr_sys
("system()Érror");

11 
	`¥_exô
(
°©us
);

13 i‡((
°©us
 = 
	`sy°em
("nosuchcommand")) < 0)

14 
	`îr_sys
("system()Érror");

15 
	`¥_exô
(
°©us
);

17 i‡((
°©us
 = 
	`sy°em
("who;Éxit 44")) < 0)

18 
	`îr_sys
("system()Érror");

19 
	`¥_exô
(
°©us
);

21 
	`exô
(0);

22 
	}
}

	@proc/systest2.c

1 
	~"≠ue.h
"

4 
	$sig_öt
(
signo
)

6 
	`¥ötf
("caught SIGINT\n");

7 
	}
}

10 
	$sig_chld
(
signo
)

12 
	`¥ötf
("caught SIGCHLD\n");

13 
	}
}

16 
	$maö
()

18 i‡(
	`sig«l
(
SIGINT
, 
sig_öt
Ë=
SIG_ERR
)

19 
	`îr_sys
("signal(SIGINT)Érror");

20 i‡(
	`sig«l
(
SIGCHLD
, 
sig_chld
Ë=
SIG_ERR
)

21 
	`îr_sys
("signal(SIGCHLD)Érror");

22 i‡(
	`sy°em
("/bin/ed") < 0)

23 
	`îr_sys
("system()Érror");

24 
	`exô
(0);

25 
	}
}

	@proc/systest3.c

1 
	~"≠ue.h
"

4 
	$maö
(
¨gc
, *
¨gv
[])

6 
°©us
;

8 i‡(
¨gc
 < 2)

9 
	`îr_quô
("command-lineárgumentÑequired");

11 i‡((
°©us
 = 
	`sy°em
(
¨gv
[1])) < 0)

12 
	`îr_sys
("system()Érror");

13 
	`¥_exô
(
°©us
);

15 
	`exô
(0);

16 
	}
}

	@proc/tellwait1.c

1 
	~"≠ue.h
"

3 
ch¨©©ime
(*);

6 
	$maö
()

8 
pid_t
 
pid
;

10 i‡((
pid
 = 
	`f‹k
()) < 0) {

11 
	`îr_sys
("forkÉrror");

12 } i‡(
pid
 == 0) {

13 
	`ch¨©©ime
("output from child\n");

15 
	`ch¨©©ime
("output fromÖarent\n");

17 
	`exô
(0);

18 
	}
}

21 
	$ch¨©©ime
(*
°r
)

23 *
±r
;

24 
c
;

26 
	`£tbuf
(
°dout
, 
NULL
);

27 
±r
 = 
°r
; (
c
 = *ptr++) != 0; )

28 
	`putc
(
c
, 
°dout
);

29 
	}
}

	@proc/tellwait2.c

1 
	~"≠ue.h
"

3 
ch¨©©ime
(*);

6 
	$maö
()

8 
pid_t
 
pid
;

10 
	`TELL_WAIT
();

12 i‡((
pid
 = 
	`f‹k
()) < 0) {

13 
	`îr_sys
("forkÉrror");

14 } i‡(
pid
 == 0) {

15 
	`WAIT_PARENT
();

16 
	`ch¨©©ime
("output from child\n");

18 
	`ch¨©©ime
("output fromÖarent\n");

19 
	`TELL_CHILD
(
pid
);

21 
	`exô
(0);

22 
	}
}

25 
	$ch¨©©ime
(*
°r
)

27 *
±r
;

28 
c
;

30 
	`£tbuf
(
°dout
, 
NULL
);

31 
±r
 = 
°r
; (
c
 = *ptr++) != 0; )

32 
	`putc
(
c
, 
°dout
);

33 
	}
}

	@proc/test1.c

1 
	~"≠ue.h
"

4 
	$maö
()

6 
pid_t
 
pid
;

8 i‡((
pid
 = 
	`f‹k
()) < 0)

9 
	`îr_sys
("forkÉrror");

10 i‡(
pid
 != 0) {

11 
	`¶ìp
(2);

12 
	`exô
(2);

16 i‡((
pid
 = 
	`f‹k
()) < 0)

17 
	`îr_sys
("forkÉrror");

18 i‡(
pid
 != 0) {

19 
	`¶ìp
(4);

20 
	`ab‹t
();

24 i‡((
pid
 = 
	`f‹k
()) < 0)

25 
	`îr_sys
("forkÉrror");

26 i‡(
pid
 != 0) {

27 
	`exe˛
("/bö/dd", "dd", "if=/ëc/ãrmˇp", "of=/dev/nuŒ", 
NULL
);

28 
	`exô
(7);

32 i‡((
pid
 = 
	`f‹k
()) < 0)

33 
	`îr_sys
("forkÉrror");

34 i‡(
pid
 != 0) {

35 
	`¶ìp
(8);

36 
	`exô
(0);

40 
	`¶ìp
(6);

41 
	`kûl
(
	`gëpid
(), 
SIGKILL
);

42 
	`exô
(6);

43 
	}
}

	@proc/times1.c

1 
	~"≠ue.h
"

2 
	~<sys/times.h
>

4 
¥_times
(
˛ock_t
, 
tms
 *, tms *);

5 
do_cmd
(*);

8 
	$maö
(
¨gc
, *
¨gv
[])

10 
i
;

12 
	`£tbuf
(
°dout
, 
NULL
);

13 
i
 = 1; i < 
¨gc
; i++)

14 
	`do_cmd
(
¨gv
[
i
]);

15 
	`exô
(0);

16 
	}
}

19 
	$do_cmd
(*
cmd
)

21 
tms
 
tms°¨t
, 
tm£nd
;

22 
˛ock_t
 
°¨t
, 
íd
;

23 
°©us
;

25 
	`¥ötf
("\ncomm™d: %s\n", 
cmd
);

27 i‡((
°¨t
 = 
	`times
(&
tms°¨t
)) == -1)

28 
	`îr_sys
("timesÉrror");

30 i‡((
°©us
 = 
	`sy°em
(
cmd
)) < 0)

31 
	`îr_sys
("system()Érror");

33 i‡((
íd
 = 
	`times
(&
tm£nd
)) == -1)

34 
	`îr_sys
("timesÉrror");

36 
	`¥_times
(
íd
-
°¨t
, &
tms°¨t
, &
tm£nd
);

37 
	`¥_exô
(
°©us
);

38 
	}
}

41 
	$¥_times
(
˛ock_t
 
ªÆ
, 
tms
 *
tms°¨t
, tm†*
tm£nd
)

43 
˛ktck
 = 0;

45 i‡(
˛ktck
 == 0)

46 i‡((
˛ktck
 = 
	`sysc⁄f
(
_SC_CLK_TCK
)) < 0)

47 
	`îr_sys
("sysconfÉrror");

48 
	`¥ötf
("Ñól: %7.2f\n", 
ªÆ
 / (Ë
˛ktck
);

49 
	`¥ötf
(" user: %7.2f\n",

50 (
tm£nd
->
tms_utime
 - 
tms°¨t
->tms_utimeË/ (Ë
˛ktck
);

51 
	`¥ötf
(" sys: %7.2f\n",

52 (
tm£nd
->
tms_°ime
 - 
tms°¨t
->tms_°imeË/ (Ë
˛ktck
);

53 
	`¥ötf
(" child user: %7.2f\n",

54 (
tm£nd
->
tms_cutime
 - 
tms°¨t
->tms_cutimeË/ (Ë
˛ktck
);

55 
	`¥ötf
(" child sys: %7.2f\n",

56 (
tm£nd
->
tms_c°ime
 - 
tms°¨t
->tms_c°imeË/ (Ë
˛ktck
);

57 
	}
}

	@proc/vfork1.c

1 
	~"≠ue.h
"

3 
	gglob
 = 6;

6 
	$maö
()

8 
v¨
;

9 
pid_t
 
pid
;

11 
v¨
 = 88;

12 
	`¥ötf
("before vfork\n");

13 i‡((
pid
 = 
	`vf‹k
()) < 0) {

14 
	`îr_sys
("vforkÉrror");

15 } i‡(
pid
 == 0) {

16 
glob
++;

17 
v¨
++;

18 
	`_exô
(0);

24 
	`¥ötf
("pid = %d, glob = %d, v¨ = %d\n", 
	`gëpid
(), 
glob
, 
v¨
);

25 
	`exô
(0);

26 
	}
}

	@proc/vfork3.c

1 
	~"≠ue.h
"

3 
f1
(), 
f2
();

6 
	$maö
()

8 
	`f1
();

9 
	`f2
();

10 
	`_exô
(0);

11 
	}
}

14 
	$f1
()

16 
pid_t
 
pid
;

18 i‡((
pid
 = 
	`vf‹k
()) < 0)

19 
	`îr_sys
("vforkÉrror");

21 
	}
}

24 
	$f2
()

26 
buf
[1000];

27 
i
;

29 
i
 = 0; i < (
buf
); i++)

30 
buf
[
i
] = 0;

31 
	}
}

	@proc/wait1.c

1 
	~"≠ue.h
"

2 
	~<sys/waô.h
>

5 
	$maö
()

7 
pid_t
 
pid
;

8 
°©us
;

10 i‡((
pid
 = 
	`f‹k
()) < 0)

11 
	`îr_sys
("forkÉrror");

12 i‡(
pid
 == 0)

13 
	`exô
(7);

15 i‡(
	`waô
(&
°©us
Ë!
pid
)

16 
	`îr_sys
("waitÉrror");

17 
	`¥_exô
(
°©us
);

19 i‡((
pid
 = 
	`f‹k
()) < 0)

20 
	`îr_sys
("forkÉrror");

21 i‡(
pid
 == 0)

22 
	`ab‹t
();

24 i‡(
	`waô
(&
°©us
Ë!
pid
)

25 
	`îr_sys
("waitÉrror");

26 
	`¥_exô
(
°©us
);

28 i‡((
pid
 = 
	`f‹k
()) < 0)

29 
	`îr_sys
("forkÉrror");

30 i‡(
pid
 == 0)

31 
°©us
 /= 0;

33 i‡(
	`waô
(&
°©us
Ë!
pid
)

34 
	`îr_sys
("waitÉrror");

35 
	`¥_exô
(
°©us
);

37 
	`exô
(0);

38 
	}
}

	@proc/zombie.c

1 
	~"≠ue.h
"

3 #ifde‡
SOLARIS


4 
	#PSCMD
 "p†-®-ÿpid,µid,s,ây,comm"

	)

6 
	#PSCMD
 "p†-ÿpid,µid,°©e,ây,comm™d"

	)

10 
	$maö
()

12 
pid_t
 
pid
;

14 i‡((
pid
 = 
	`f‹k
()) < 0)

15 
	`îr_sys
("forkÉrror");

16 i‡(
pid
 == 0)

17 
	`exô
(0);

20 
	`¶ìp
(4);

21 
	`sy°em
(
PSCMD
);

23 
	`exô
(0);

24 
	}
}

	@pty/driver.c

1 
	~"≠ue.h
"

4 
	$do_drivî
(*
drivî
)

6 
pid_t
 
chûd
;

7 
pùe
[2];

12 i‡(
	`s_pùe
(
pùe
) < 0)

13 
	`îr_sys
("can't create streamÖipe");

15 i‡((
chûd
 = 
	`f‹k
()) < 0) {

16 
	`îr_sys
("forkÉrror");

17 } i‡(
chûd
 == 0) {

18 
	`˛o£
(
pùe
[1]);

21 i‡(
	`dup2
(
pùe
[0], 
STDIN_FILENO
) != STDIN_FILENO)

22 
	`îr_sys
("dup2ÉrrorÅo stdin");

25 i‡(
	`dup2
(
pùe
[0], 
STDOUT_FILENO
) != STDOUT_FILENO)

26 
	`îr_sys
("dup2ÉrrorÅo stdout");

27 i‡(
pùe
[0] !
STDIN_FILENO
 &&Öùe[0] !
STDOUT_FILENO
)

28 
	`˛o£
(
pùe
[0]);

31 
	`exe˛p
(
drivî
, driver, (*)0);

32 
	`îr_sys
("exe˛∞îr‹ f‹: %s", 
drivî
);

35 
	`˛o£
(
pùe
[0]);

36 i‡(
	`dup2
(
pùe
[1], 
STDIN_FILENO
) != STDIN_FILENO)

37 
	`îr_sys
("dup2ÉrrorÅo stdin");

38 i‡(
	`dup2
(
pùe
[1], 
STDOUT_FILENO
) != STDOUT_FILENO)

39 
	`îr_sys
("dup2ÉrrorÅo stdout");

40 i‡(
pùe
[1] !
STDIN_FILENO
 &&Öùe[1] !
STDOUT_FILENO
)

41 
	`˛o£
(
pùe
[1]);

47 
	}
}

	@pty/loop.c

1 
	~"≠ue.h
"

3 
	#BUFFSIZE
 512

	)

5 
sig_ãrm
();

6 vﬁ©ûê
sig_©omic_t
 
	gsigˇught
;

9 
	$lo›
(
±ym
, 
ign‹ìof
)

11 
pid_t
 
chûd
;

12 
ƒód
;

13 
buf
[
BUFFSIZE
];

15 i‡((
chûd
 = 
	`f‹k
()) < 0) {

16 
	`îr_sys
("forkÉrror");

17 } i‡(
chûd
 == 0) {

19 i‡((
ƒód
 = 
	`ªad
(
STDIN_FILENO
, 
buf
, 
BUFFSIZE
)) < 0)

20 
	`îr_sys
("readÉrror from stdin");

21 i‡(
ƒód
 == 0)

23 i‡(
	`wrôí
(
±ym
, 
buf
, 
ƒód
) !=Çread)

24 
	`îr_sys
("writenÉrrorÅo masterÖty");

31 i‡(
ign‹ìof
 == 0)

32 
	`kûl
(
	`gëµid
(), 
SIGTERM
);

33 
	`exô
(0);

39 i‡(
	`sig«l_öå
(
SIGTERM
, 
sig_ãrm
Ë=
SIG_ERR
)

40 
	`îr_sys
("signal_intrÉrror for SIGTERM");

43 i‡((
ƒód
 = 
	`ªad
(
±ym
, 
buf
, 
BUFFSIZE
)) <= 0)

45 i‡(
	`wrôí
(
STDOUT_FILENO
, 
buf
, 
ƒód
) !=Çread)

46 
	`îr_sys
("writenÉrrorÅo stdout");

54 i‡(
sigˇught
 == 0)

55 
	`kûl
(
chûd
, 
SIGTERM
);

59 
	}
}

66 
	$sig_ãrm
(
signo
)

68 
sigˇught
 = 1;

69 
	}
}

	@pty/main.c

1 
	~"≠ue.h
"

2 
	~<ãrmios.h
>

3 #i‚def 
TIOCGWINSZ


4 
	~<sys/io˘l.h
>

7 #ifde‡
LINUX


8 
	#OPTSTR
 "+d:eöv"

	)

10 
	#OPTSTR
 "d:eöv"

	)

13 
£t_n€cho
();

14 
do_drivî
(*);

15 
lo›
(, );

18 
	$maö
(
¨gc
, *
¨gv
[])

20 
fdm
, 
c
, 
ign‹ìof
, 
öãø˘ive
, 
n€cho
, 
vîbo£
;

21 
pid_t
 
pid
;

22 *
drivî
;

23 
¶ave_«me
[20];

24 
ãrmios
 
‹ig_ãrmios
;

25 
wösize
 
size
;

27 
öãø˘ive
 = 
	`ißây
(
STDIN_FILENO
);

28 
ign‹ìof
 = 0;

29 
n€cho
 = 0;

30 
vîbo£
 = 0;

31 
drivî
 = 
NULL
;

33 
›ãº
 = 0;

34 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, 
OPTSTR
)Ë!
EOF
) {

35 
c
) {

37 
drivî
 = 
›èrg
;

41 
n€cho
 = 1;

45 
ign‹ìof
 = 1;

49 
öãø˘ive
 = 0;

53 
vîbo£
 = 1;

57 
	`îr_quô
("uƒecognized o±i⁄: -%c", 
›t›t
);

60 i‡(
›töd
 >
¨gc
)

61 
	`îr_quô
("usage:Öty [ -d driver -einv ]Örogram [árg ... ]");

63 i‡(
öãø˘ive
) {

64 i‡(
	`tcgë©å
(
STDIN_FILENO
, &
‹ig_ãrmios
) < 0)

65 
	`îr_sys
("tcgetattrÉrror on stdin");

66 i‡(
	`io˘l
(
STDIN_FILENO
, 
TIOCGWINSZ
, (*Ë&
size
) < 0)

67 
	`îr_sys
("TIOCGWINSZÉrror");

68 
pid
 = 
	`±y_f‹k
(&
fdm
, 
¶ave_«me
, (slave_name),

69 &
‹ig_ãrmios
, &
size
);

71 
pid
 = 
	`±y_f‹k
(&
fdm
, 
¶ave_«me
, (slave_name),

72 
NULL
, NULL);

75 i‡(
pid
 < 0) {

76 
	`îr_sys
("forkÉrror");

77 } i‡(
pid
 == 0) {

78 i‡(
n€cho
)

79 
	`£t_n€cho
(
STDIN_FILENO
);

81 i‡(
	`execvp
(
¨gv
[
›töd
], &argv[optind]) < 0)

82 
	`îr_sys
("ˇn'àexecuã: %s", 
¨gv
[
›töd
]);

85 i‡(
vîbo£
) {

86 
	`Ârötf
(
°dîr
, "¶avê«mê%s\n", 
¶ave_«me
);

87 i‡(
drivî
 !
NULL
)

88 
	`Ârötf
(
°dîr
, "drivî = %s\n", 
drivî
);

91 i‡(
öãø˘ive
 && 
drivî
 =
NULL
) {

92 i‡(
	`ây_øw
(
STDIN_FILENO
) < 0)

93 
	`îr_sys
("tty_rawÉrror");

94 i‡(
	`©exô
(
ây_©exô
) < 0)

95 
	`îr_sys
("atexitÉrror");

98 i‡(
drivî
)

99 
	`do_drivî
(
drivî
);

101 
	`lo›
(
fdm
, 
ign‹ìof
);

103 
	`exô
(0);

104 
	}
}

107 
	$£t_n€cho
(
fd
)

109 
ãrmios
 
°îmios
;

111 i‡(
	`tcgë©å
(
fd
, &
°îmios
) < 0)

112 
	`îr_sys
("tcgetattrÉrror");

114 
°îmios
.
c_lÊag
 &~(
ECHO
 | 
ECHOE
 | 
ECHOK
 | 
ECHONL
);

119 
°îmios
.
c_oÊag
 &~(
ONLCR
);

121 i‡(
	`tc£èâr
(
fd
, 
TCSANOW
, &
°îmios
) < 0)

122 
	`îr_sys
("tcsetattrÉrror");

123 
	}
}

	@sess/orphan3.c

1 
	~"≠ue.h
"

2 
	~<î∫o.h
>

5 
	$sig_hup
(
signo
)

7 
	`¥ötf
("SIGHUPÑe˚ived,Öid = %d\n", 
	`gëpid
());

8 
	}
}

11 
	$¥_ids
(*
«me
)

13 
	`¥ötf
("%s:Öid = %d,Öpid = %d,Ögrp = %d,Åpgrp = %d\n",

14 
«me
, 
	`gëpid
(), 
	`gëµid
(), 
	`gëpgΩ
(), 
	`tcgëpgΩ
(
STDIN_FILENO
));

15 
	`fÊush
(
°dout
);

16 
	}
}

19 
	$maö
()

21 
c
;

22 
pid_t
 
pid
;

24 
	`¥_ids
("parent");

25 i‡((
pid
 = 
	`f‹k
()) < 0) {

26 
	`îr_sys
("forkÉrror");

27 } i‡(
pid
 > 0) {

28 
	`¶ìp
(5);

29 
	`exô
(0);

31 
	`¥_ids
("child");

32 
	`sig«l
(
SIGHUP
, 
sig_hup
);

33 
	`kûl
(
	`gëpid
(), 
SIGTSTP
);

34 
	`¥_ids
("child");

35 i‡(
	`ªad
(
STDIN_FILENO
, &
c
, 1) != 1)

36 
	`¥ötf
("readÉrror from controlling TTY,Érrno = %d\n",

37 
î∫o
);

38 
	`exô
(0);

40 
	}
}

	@signals/abort.c

1 
	~<sig«l.h
>

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<uni°d.h
>

7 
	$ab‹t
()

9 
sig£t_t
 
mask
;

10 
siga˘i⁄
 
a˘i⁄
;

15 
	`siga˘i⁄
(
SIGABRT
, 
NULL
, &
a˘i⁄
);

16 i‡(
a˘i⁄
.
ß_h™dÀr
 =
SIG_IGN
) {

17 
a˘i⁄
.
ß_h™dÀr
 = 
SIG_DFL
;

18 
	`siga˘i⁄
(
SIGABRT
, &
a˘i⁄
, 
NULL
);

20 i‡(
a˘i⁄
.
ß_h™dÀr
 =
SIG_DFL
)

21 
	`fÊush
(
NULL
);

26 
	`sigfûl£t
(&
mask
);

27 
	`sigdñ£t
(&
mask
, 
SIGABRT
);

28 
	`sig¥ocmask
(
SIG_SETMASK
, &
mask
, 
NULL
);

29 
	`kûl
(
	`gëpid
(), 
SIGABRT
);

34 
	`fÊush
(
NULL
);

35 
a˘i⁄
.
ß_h™dÀr
 = 
SIG_DFL
;

36 
	`siga˘i⁄
(
SIGABRT
, &
a˘i⁄
, 
NULL
);

37 
	`sig¥ocmask
(
SIG_SETMASK
, &
mask
, 
NULL
);

38 
	`kûl
(
	`gëpid
(), 
SIGABRT
);

39 
	`exô
(1);

40 
	}
}

	@signals/child.c

1 
	~"≠ue.h
"

2 
	~<sys/waô.h
>

4 
sig_˛d
();

7 
	$maö
()

9 
pid_t
 
pid
;

11 i‡(
	`sig«l
(
SIGCLD
, 
sig_˛d
Ë=
SIG_ERR
)

12 
	`≥º‹
("signalÉrror");

13 i‡((
pid
 = 
	`f‹k
()) < 0) {

14 
	`≥º‹
("forkÉrror");

15 } i‡(
pid
 == 0) {

16 
	`¶ìp
(2);

17 
	`_exô
(0);

19 
	`∑u£
();

20 
	`exô
(0);

21 
	}
}

24 
	$sig_˛d
(
signo
)

26 
pid_t
 
pid
;

27 
°©us
;

29 
	`¥ötf
("SIGCLDÑeceived\n");

30 i‡(
	`sig«l
(
SIGCLD
, 
sig_˛d
Ë=
SIG_ERR
)

31 
	`≥º‹
("signalÉrror");

32 i‡((
pid
 = 
	`waô
(&
°©us
)) < 0)

33 
	`≥º‹
("waitÉrror");

34 
	`¥ötf
("pid = %d\n", 
pid
);

35 
	}
}

	@signals/critical.c

1 
	~"≠ue.h
"

3 
sig_quô
();

6 
	$maö
()

8 
sig£t_t
 
√wmask
, 
ﬁdmask
, 
≥ndmask
;

10 i‡(
	`sig«l
(
SIGQUIT
, 
sig_quô
Ë=
SIG_ERR
)

11 
	`îr_sys
("can't catch SIGQUIT");

16 
	`sigem±y£t
(&
√wmask
);

17 
	`sigadd£t
(&
√wmask
, 
SIGQUIT
);

18 i‡(
	`sig¥ocmask
(
SIG_BLOCK
, &
√wmask
, &
ﬁdmask
) < 0)

19 
	`îr_sys
("SIG_BLOCKÉrror");

21 
	`¶ìp
(5);

23 i‡(
	`sig≥ndög
(&
≥ndmask
) < 0)

24 
	`îr_sys
("sigpendingÉrror");

25 i‡(
	`sigismembî
(&
≥ndmask
, 
SIGQUIT
))

26 
	`¥ötf
("\nSIGQUITÖending\n");

31 i‡(
	`sig¥ocmask
(
SIG_SETMASK
, &
ﬁdmask
, 
NULL
) < 0)

32 
	`îr_sys
("SIG_SETMASKÉrror");

33 
	`¥ötf
("SIGQUIT unblocked\n");

35 
	`¶ìp
(5);

36 
	`exô
(0);

37 
	}
}

40 
	$sig_quô
(
signo
)

42 
	`¥ötf
("caught SIGQUIT\n");

43 i‡(
	`sig«l
(
SIGQUIT
, 
SIG_DFL
Ë=
SIG_ERR
)

44 
	`îr_sys
("can'tÑeset SIGQUIT");

45 
	}
}

	@signals/mask.c

1 
	~"≠ue.h
"

2 
	~<£tjmp.h
>

3 
	~<time.h
>

5 
sig_u§1
(), 
sig_Ærm
();

6 
sigjmp_buf
 
	gjmpbuf
;

7 vﬁ©ûê
sig_©omic_t
 
	gˇnjump
;

10 
	$maö
()

12 i‡(
	`sig«l
(
SIGUSR1
, 
sig_u§1
Ë=
SIG_ERR
)

13 
	`îr_sys
("signal(SIGUSR1)Érror");

14 i‡(
	`sig«l
(
SIGALRM
, 
sig_Ærm
Ë=
SIG_ERR
)

15 
	`îr_sys
("signal(SIGALRM)Érror");

16 
	`¥_mask
("starting main: ");

18 i‡(
	`sig£tjmp
(
jmpbuf
, 1)) {

19 
	`¥_mask
("ending main: ");

20 
	`exô
(0);

22 
ˇnjump
 = 1;

25 
	`∑u£
();

26 
	}
}

29 
	$sig_u§1
(
signo
)

31 
time_t
 
°¨âime
;

33 i‡(
ˇnjump
 == 0)

36 
	`¥_mask
("starting sig_usr1: ");

37 
	`Æ¨m
(3);

38 
°¨âime
 = 
	`time
(
NULL
);

40 i‡(
	`time
(
NULL
Ë> 
°¨âime
 + 5)

42 
	`¥_mask
("finishing sig_usr1: ");

44 
ˇnjump
 = 0;

45 
	`sigl⁄gjmp
(
jmpbuf
, 1);

46 
	}
}

49 
	$sig_Ærm
(
signo
)

51 
	`¥_mask
("in sig_alrm: ");

52 
	}
}

	@signals/read1.c

1 
	~"≠ue.h
"

3 
sig_Ærm
();

6 
	$maö
()

8 
n
;

9 
löe
[
MAXLINE
];

11 i‡(
	`sig«l
(
SIGALRM
, 
sig_Ærm
Ë=
SIG_ERR
)

12 
	`îr_sys
("signal(SIGALRM)Érror");

14 
	`Æ¨m
(10);

15 i‡((
n
 = 
	`ªad
(
STDIN_FILENO
, 
löe
, 
MAXLINE
)) < 0)

16 
	`îr_sys
("readÉrror");

17 
	`Æ¨m
(0);

19 
	`wrôe
(
STDOUT_FILENO
, 
löe
, 
n
);

20 
	`exô
(0);

21 
	}
}

24 
	$sig_Ærm
(
signo
)

27 
	}
}

	@signals/read2.c

1 
	~"≠ue.h
"

2 
	~<£tjmp.h
>

4 
sig_Ærm
();

5 
jmp_buf
 
	gív_Ærm
;

8 
	$maö
()

10 
n
;

11 
löe
[
MAXLINE
];

13 i‡(
	`sig«l
(
SIGALRM
, 
sig_Ærm
Ë=
SIG_ERR
)

14 
	`îr_sys
("signal(SIGALRM)Érror");

15 i‡(
	`£tjmp
(
ív_Ærm
) != 0)

16 
	`îr_quô
("readÅimeout");

18 
	`Æ¨m
(10);

19 i‡((
n
 = 
	`ªad
(
STDIN_FILENO
, 
löe
, 
MAXLINE
)) < 0)

20 
	`îr_sys
("readÉrror");

21 
	`Æ¨m
(0);

23 
	`wrôe
(
STDOUT_FILENO
, 
löe
, 
n
);

24 
	`exô
(0);

25 
	}
}

28 
	$sig_Ærm
(
signo
)

30 
	`l⁄gjmp
(
ív_Ærm
, 1);

31 
	}
}

	@signals/reenter.c

1 
	~"≠ue.h
"

2 
	~<pwd.h
>

5 
	$my_Æ¨m
(
signo
)

7 
∑sswd
 *
roŸ±r
;

9 
	`¥ötf
("in signal handler\n");

10 i‡((
roŸ±r
 = 
	`gëpw«m
("roŸ")Ë=
NULL
)

11 
	`îr_sys
("getpwnam(root)Érror");

12 
	`Æ¨m
(1);

13 
	}
}

16 
	$maö
()

18 
∑sswd
 *
±r
;

20 
	`sig«l
(
SIGALRM
, 
my_Æ¨m
);

21 
	`Æ¨m
(1);

23 i‡((
±r
 = 
	`gëpw«m
("ßr")Ë=
NULL
)

24 
	`îr_sys
("getpwnamÉrror");

25 i‡(
	`°rcmp
(
±r
->
pw_«me
, "sar") != 0)

26 
	`¥ötf
("return value corrupted!,Öw_name = %s\n",

27 
±r
->
pw_«me
);

29 
	}
}

	@signals/setops.c

1 
	~<sig«l.h
>

2 
	~<î∫o.h
>

5 
	#SIGBAD
(
signo
Ë((signoË<0 || (signoË>
NSIG
)

	)

8 
	$sigadd£t
(
sig£t_t
 *
£t
, 
signo
)

10 i‡(
	`SIGBAD
(
signo
)Ë{ 
î∫o
 = 
EINVAL
; (-1); }

12 *
£t
 |1 << (
signo
 - 1);

14 
	}
}

17 
	$sigdñ£t
(
sig£t_t
 *
£t
, 
signo
)

19 i‡(
	`SIGBAD
(
signo
)Ë{ 
î∫o
 = 
EINVAL
; (-1); }

21 *
£t
 &~(1 << (
signo
 - 1));

23 
	}
}

26 
	$sigismembî
(c⁄° 
sig£t_t
 *
£t
, 
signo
)

28 i‡(
	`SIGBAD
(
signo
)Ë{ 
î∫o
 = 
EINVAL
; (-1); }

30 ((*
£t
 & (1 << (
signo
 - 1))) != 0);

31 
	}
}

	@signals/sigtstp.c

1 
	~"≠ue.h
"

3 
	#BUFFSIZE
 1024

	)

5 
sig_t°p
();

8 
	$maö
()

10 
n
;

11 
buf
[
BUFFSIZE
];

16 i‡(
	`sig«l
(
SIGTSTP
, 
SIG_IGN
Ë=
SIG_DFL
)

17 
	`sig«l
(
SIGTSTP
, 
sig_t°p
);

19 (
n
 = 
	`ªad
(
STDIN_FILENO
, 
buf
, 
BUFFSIZE
)) > 0)

20 i‡(
	`wrôe
(
STDOUT_FILENO
, 
buf
, 
n
) !=Ç)

21 
	`îr_sys
("writeÉrror");

23 i‡(
n
 < 0)

24 
	`îr_sys
("readÉrror");

26 
	`exô
(0);

27 
	}
}

30 
	$sig_t°p
(
signo
)

32 
sig£t_t
 
mask
;

39 
	`sigem±y£t
(&
mask
);

40 
	`sigadd£t
(&
mask
, 
SIGTSTP
);

41 
	`sig¥ocmask
(
SIG_UNBLOCK
, &
mask
, 
NULL
);

43 
	`sig«l
(
SIGTSTP
, 
SIG_DFL
);

45 
	`kûl
(
	`gëpid
(), 
SIGTSTP
);

49 
	`sig«l
(
SIGTSTP
, 
sig_t°p
);

52 
	}
}

	@signals/sigusr.c

1 
	~"≠ue.h
"

3 
sig_u§
();

6 
	$maö
()

8 i‡(
	`sig«l
(
SIGUSR1
, 
sig_u§
Ë=
SIG_ERR
)

9 
	`îr_sys
("can't catch SIGUSR1");

10 i‡(
	`sig«l
(
SIGUSR2
, 
sig_u§
Ë=
SIG_ERR
)

11 
	`îr_sys
("can't catch SIGUSR2");

13 
	`∑u£
();

14 
	}
}

17 
	$sig_u§
(
signo
)

19 i‡(
signo
 =
SIGUSR1
)

20 
	`¥ötf
("received SIGUSR1\n");

21 i‡(
signo
 =
SIGUSR2
)

22 
	`¥ötf
("received SIGUSR2\n");

24 
	`îr_dump
("ª˚ived sig«»%d\n", 
signo
);

25 
	}
}

	@signals/sleep1.c

1 
	~<sig«l.h
>

2 
	~<uni°d.h
>

5 
	$sig_Ærm
(
signo
)

8 
	}
}

11 
	$¶ìp1
(
n£cs
)

13 i‡(
	`sig«l
(
SIGALRM
, 
sig_Ærm
Ë=
SIG_ERR
)

14 (
n£cs
);

15 
	`Æ¨m
(
n£cs
);

16 
	`∑u£
();

17 (
	`Æ¨m
(0));

18 
	}
}

	@signals/sleep2.c

1 
	~<£tjmp.h
>

2 
	~<sig«l.h
>

3 
	~<uni°d.h
>

5 
jmp_buf
 
	gív_Ærm
;

8 
	$sig_Ærm
(
signo
)

10 
	`l⁄gjmp
(
ív_Ærm
, 1);

11 
	}
}

14 
	$¶ìp2
(
n£cs
)

16 i‡(
	`sig«l
(
SIGALRM
, 
sig_Ærm
Ë=
SIG_ERR
)

17 (
n£cs
);

18 i‡(
	`£tjmp
(
ív_Ærm
) == 0) {

19 
	`Æ¨m
(
n£cs
);

20 
	`∑u£
();

22 (
	`Æ¨m
(0));

23 
	}
}

	@signals/suspend1.c

1 
	~"≠ue.h
"

3 
sig_öt
();

6 
	$maö
()

8 
sig£t_t
 
√wmask
, 
ﬁdmask
, 
waômask
;

10 
	`¥_mask
("program start: ");

12 i‡(
	`sig«l
(
SIGINT
, 
sig_öt
Ë=
SIG_ERR
)

13 
	`îr_sys
("signal(SIGINT)Érror");

14 
	`sigem±y£t
(&
waômask
);

15 
	`sigadd£t
(&
waômask
, 
SIGUSR1
);

16 
	`sigem±y£t
(&
√wmask
);

17 
	`sigadd£t
(&
√wmask
, 
SIGINT
);

22 i‡(
	`sig¥ocmask
(
SIG_BLOCK
, &
√wmask
, &
ﬁdmask
) < 0)

23 
	`îr_sys
("SIG_BLOCKÉrror");

28 
	`¥_mask
("in criticalÑegion: ");

33 i‡(
	`sigsu•íd
(&
waômask
) != -1)

34 
	`îr_sys
("sigsuspendÉrror");

36 
	`¥_mask
("afterÑeturn from sigsuspend: ");

41 i‡(
	`sig¥ocmask
(
SIG_SETMASK
, &
ﬁdmask
, 
NULL
) < 0)

42 
	`îr_sys
("SIG_SETMASKÉrror");

47 
	`¥_mask
("programÉxit: ");

49 
	`exô
(0);

50 
	}
}

53 
	$sig_öt
(
signo
)

55 
	`¥_mask
("\nin sig_int: ");

56 
	}
}

	@signals/suspend2.c

1 
	~"≠ue.h
"

3 vﬁ©ûê
sig_©omic_t
 
	gquôÊag
;

6 
	$sig_öt
(
signo
)

8 i‡(
signo
 =
SIGINT
)

9 
	`¥ötf
("\ninterrupt\n");

10 i‡(
signo
 =
SIGQUIT
)

11 
quôÊag
 = 1;

12 
	}
}

15 
	$maö
()

17 
sig£t_t
 
√wmask
, 
ﬁdmask
, 
zîomask
;

19 i‡(
	`sig«l
(
SIGINT
, 
sig_öt
Ë=
SIG_ERR
)

20 
	`îr_sys
("signal(SIGINT)Érror");

21 i‡(
	`sig«l
(
SIGQUIT
, 
sig_öt
Ë=
SIG_ERR
)

22 
	`îr_sys
("signal(SIGQUIT)Érror");

24 
	`sigem±y£t
(&
zîomask
);

25 
	`sigem±y£t
(&
√wmask
);

26 
	`sigadd£t
(&
√wmask
, 
SIGQUIT
);

31 i‡(
	`sig¥ocmask
(
SIG_BLOCK
, &
√wmask
, &
ﬁdmask
) < 0)

32 
	`îr_sys
("SIG_BLOCKÉrror");

34 
quôÊag
 == 0)

35 
	`sigsu•íd
(&
zîomask
);

40 
quôÊag
 = 0;

45 i‡(
	`sig¥ocmask
(
SIG_SETMASK
, &
ﬁdmask
, 
NULL
) < 0)

46 
	`îr_sys
("SIG_SETMASKÉrror");

48 
	`exô
(0);

49 
	}
}

	@signals/system.c

1 
	~<sys/waô.h
>

2 
	~<î∫o.h
>

3 
	~<sig«l.h
>

4 
	~<uni°d.h
>

7 
	$sy°em
(c⁄° *
cmd°rög
)

9 
pid_t
 
pid
;

10 
°©us
;

11 
siga˘i⁄
 
ign‹e
, 
ßveöå
, 
ßvequô
;

12 
sig£t_t
 
chldmask
, 
ßvemask
;

14 i‡(
cmd°rög
 =
NULL
)

17 
ign‹e
.
ß_h™dÀr
 = 
SIG_IGN
;

18 
	`sigem±y£t
(&
ign‹e
.
ß_mask
);

19 
ign‹e
.
ß_Êags
 = 0;

20 i‡(
	`siga˘i⁄
(
SIGINT
, &
ign‹e
, &
ßveöå
) < 0)

22 i‡(
	`siga˘i⁄
(
SIGQUIT
, &
ign‹e
, &
ßvequô
) < 0)

24 
	`sigem±y£t
(&
chldmask
);

25 
	`sigadd£t
(&
chldmask
, 
SIGCHLD
);

26 i‡(
	`sig¥ocmask
(
SIG_BLOCK
, &
chldmask
, &
ßvemask
) < 0)

29 i‡((
pid
 = 
	`f‹k
()) < 0) {

30 
°©us
 = -1;

31 } i‡(
pid
 == 0) {

33 
	`siga˘i⁄
(
SIGINT
, &
ßveöå
, 
NULL
);

34 
	`siga˘i⁄
(
SIGQUIT
, &
ßvequô
, 
NULL
);

35 
	`sig¥ocmask
(
SIG_SETMASK
, &
ßvemask
, 
NULL
);

37 
	`exe˛
("/bö/sh", "sh", "-c", 
cmd°rög
, (*)0);

38 
	`_exô
(127);

40 
	`waôpid
(
pid
, &
°©us
, 0) < 0)

41 i‡(
î∫o
 !
EINTR
) {

42 
°©us
 = -1;

48 i‡(
	`siga˘i⁄
(
SIGINT
, &
ßveöå
, 
NULL
) < 0)

50 i‡(
	`siga˘i⁄
(
SIGQUIT
, &
ßvequô
, 
NULL
) < 0)

52 i‡(
	`sig¥ocmask
(
SIG_SETMASK
, &
ßvemask
, 
NULL
) < 0)

55 (
°©us
);

56 
	}
}

	@signals/tsleep2.c

1 
	~"≠ue.h
"

3 
¶ìp2
();

4 
sig_öt
();

7 
	$maö
()

9 
un¶ït
;

11 i‡(
	`sig«l
(
SIGINT
, 
sig_öt
Ë=
SIG_ERR
)

12 
	`îr_sys
("signal(SIGINT)Érror");

13 
un¶ït
 = 
	`¶ìp2
(5);

14 
	`¥ötf
("¶ìp2Ñëu∫ed: %u\n", 
un¶ït
);

15 
	`exô
(0);

16 
	}
}

19 
	$sig_öt
(
signo
)

21 
i
, 
j
;

22 vﬁ©ûê
k
;

28 
	`¥ötf
("\nsig_int starting\n");

29 
i
 = 0; i < 300000; i++)

30 
j
 = 0; j < 4000; j++)

31 
k
 +
i
 * 
j
;

32 
	`¥ötf
("sig_int finished\n");

33 
	}
}

	@sockets/bindunix.c

1 
	~"≠ue.h
"

2 
	~<sys/sockë.h
>

3 
	~<sys/un.h
>

6 
	$maö
()

8 
fd
, 
size
;

9 
sockaddr_un
 
un
;

11 
un
.
sun_Ámûy
 = 
AF_UNIX
;

12 
	`°r˝y
(
un
.
sun_∑th
, "foo.socket");

13 i‡((
fd
 = 
	`sockë
(
AF_UNIX
, 
SOCK_STREAM
, 0)) < 0)

14 
	`îr_sys
("socket failed");

15 
size
 = 
	`off£tof
(
sockaddr_un
, 
sun_∑th
Ë+ 
	`°æí
(
un
.sun_path);

16 i‡(
	`böd
(
fd
, (
sockaddr
 *)&
un
, 
size
) < 0)

17 
	`îr_sys
("bind failed");

18 
	`¥ötf
("UNIX domain socket bound\n");

19 
	`exô
(0);

20 
	}
}

	@sockets/bo.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<öây≥s.h
>

6 
	$maö
()

8 
uöt32_t
 
i
;

9 *
˝
;

11 
i
 = 0x04030201;

12 
˝
 = (*)&
i
;

13 i‡(*
˝
 == 1)

14 
	`¥ötf
("little-endian\n");

15 i‡(*
˝
 == 4)

16 
	`¥ötf
("big-endian\n");

18 
	`¥ötf
("who knows?\n");

19 
	`exô
(0);

20 
	}
}

	@sockets/clconn.c

1 
	~"≠ue.h
"

2 
	~<sys/sockë.h
>

4 
	#MAXSLEEP
 128

	)

7 
	$c⁄√˘_ªåy
(
sockfd
, c⁄° 
sockaddr
 *
addr
, 
sockÀn_t
 
Æí
)

9 
n£c
;

14 
n£c
 = 1;Ç£¯<
MAXSLEEP
;Çsec <<= 1) {

15 i‡(
	`c⁄√˘
(
sockfd
, 
addr
, 
Æí
) == 0) {

25 i‡(
n£c
 <
MAXSLEEP
/2)

26 
	`¶ìp
(
n£c
);

29 
	}
}

	@sockets/cliconn.c

1 
	~"≠ue.h
"

2 
	~<sys/sockë.h
>

3 
	~<sys/un.h
>

4 
	~<î∫o.h
>

6 
	#CLI_PATH
 "/v¨/tmp/"

	)

7 
	#CLI_PERM
 
S_IRWXU


	)

14 
	$˛i_c⁄n
(c⁄° *
«me
)

16 
fd
, 
Àn
, 
îr
, 
rvÆ
;

17 
sockaddr_un
 
un
;

20 i‡((
fd
 = 
	`sockë
(
AF_UNIX
, 
SOCK_STREAM
, 0)) < 0)

24 
	`mem£t
(&
un
, 0, (un));

25 
un
.
sun_Ámûy
 = 
AF_UNIX
;

26 
	`•rötf
(
un
.
sun_∑th
, "%s%05d", 
CLI_PATH
, 
	`gëpid
());

27 
Àn
 = 
	`off£tof
(
sockaddr_un
, 
sun_∑th
Ë+ 
	`°æí
(
un
.sun_path);

29 
	`u∆ök
(
un
.
sun_∑th
);

30 i‡(
	`böd
(
fd
, (
sockaddr
 *)&
un
, 
Àn
) < 0) {

31 
rvÆ
 = -2;

32 
îrout
;

34 i‡(
	`chmod
(
un
.
sun_∑th
, 
CLI_PERM
) < 0) {

35 
rvÆ
 = -3;

36 
îrout
;

40 
	`mem£t
(&
un
, 0, (un));

41 
un
.
sun_Ámûy
 = 
AF_UNIX
;

42 
	`°r˝y
(
un
.
sun_∑th
, 
«me
);

43 
Àn
 = 
	`off£tof
(
sockaddr_un
, 
sun_∑th
Ë+ 
	`°æí
(
«me
);

44 i‡(
	`c⁄√˘
(
fd
, (
sockaddr
 *)&
un
, 
Àn
) < 0) {

45 
rvÆ
 = -4;

46 
îrout
;

48 (
fd
);

50 
îrout
:

51 
îr
 = 
î∫o
;

52 
	`˛o£
(
fd
);

53 
î∫o
 = 
îr
;

54 (
rvÆ
);

55 
	}
}

	@sockets/findsvc.c

1 
	~"≠ue.h
"

2 
	~<√tdb.h
>

3 
	~<¨∑/öë.h
>

4 #i‡
deföed
(
BSD
Ë|| deföed(
MACOS
)

5 
	~<sys/sockë.h
>

6 
	~<√töë/ö.h
>

10 
	$¥öt_Ámûy
(
addröfo
 *
aù
)

12 
	`¥ötf
(" family ");

13 
aù
->
ai_Ámûy
) {

14 
AF_INET
:

15 
	`¥ötf
("inet");

17 
AF_INET6
:

18 
	`¥ötf
("inet6");

20 
AF_UNIX
:

21 
	`¥ötf
("unix");

23 
AF_UNSPEC
:

24 
	`¥ötf
("unspecified");

27 
	`¥ötf
("unknown");

29 
	}
}

32 
	$¥öt_ty≥
(
addröfo
 *
aù
)

34 
	`¥ötf
("Åype ");

35 
aù
->
ai_sockty≥
) {

36 
SOCK_STREAM
:

37 
	`¥ötf
("stream");

39 
SOCK_DGRAM
:

40 
	`¥ötf
("datagram");

42 
SOCK_SEQPACKET
:

43 
	`¥ötf
("seqpacket");

45 
SOCK_RAW
:

46 
	`¥ötf
("raw");

49 
	`¥ötf
("unknow¿(%d)", 
aù
->
ai_sockty≥
);

51 
	}
}

54 
	$¥öt_¥Ÿocﬁ
(
addröfo
 *
aù
)

56 
	`¥ötf
("Örotocol ");

57 
aù
->
ai_¥Ÿocﬁ
) {

59 
	`¥ötf
("default");

61 
IPPROTO_TCP
:

62 
	`¥ötf
("TCP");

64 
IPPROTO_UDP
:

65 
	`¥ötf
("UDP");

67 
IPPROTO_RAW
:

68 
	`¥ötf
("raw");

71 
	`¥ötf
("unknow¿(%d)", 
aù
->
ai_¥Ÿocﬁ
);

73 
	}
}

76 
	$¥öt_Êags
(
addröfo
 *
aù
)

78 
	`¥ötf
("flags");

79 i‡(
aù
->
ai_Êags
 == 0) {

80 
	`¥ötf
(" 0");

82 i‡(
aù
->
ai_Êags
 & 
AI_PASSIVE
)

83 
	`¥ötf
("Öassive");

84 i‡(
aù
->
ai_Êags
 & 
AI_CANONNAME
)

85 
	`¥ötf
(" canon");

86 i‡(
aù
->
ai_Êags
 & 
AI_NUMERICHOST
)

87 
	`¥ötf
("Çumhost");

88 #i‡
	`deföed
(
AI_NUMERICSERV
)

89 i‡(
aù
->
ai_Êags
 & 
AI_NUMERICSERV
)

90 
	`¥ötf
("Çumserv");

92 #i‡
	`deföed
(
AI_V4MAPPED
)

93 i‡(
aù
->
ai_Êags
 & 
AI_V4MAPPED
)

94 
	`¥ötf
(" v4mapped");

96 #i‡
	`deföed
(
AI_ALL
)

97 i‡(
aù
->
ai_Êags
 & 
AI_ALL
)

98 
	`¥ötf
("áll");

101 
	}
}

104 
	$maö
(
¨gc
, *
¨gv
[])

106 
addröfo
 *
aûi°
, *
aù
;

107 
addröfo
 
höt
;

108 
sockaddr_ö
 *
söp
;

109 c⁄° *
addr
;

110 
îr
;

111 
abuf
[
INET_ADDRSTRLEN
];

113 i‡(
¨gc
 != 3)

114 
	`îr_quô
("ußge: %†nodíamê£rvi˚", 
¨gv
[0]);

115 
höt
.
ai_Êags
 = 
AI_CANONNAME
;

116 
höt
.
ai_Ámûy
 = 0;

117 
höt
.
ai_sockty≥
 = 0;

118 
höt
.
ai_¥Ÿocﬁ
 = 0;

119 
höt
.
ai_addæí
 = 0;

120 
höt
.
ai_ˇn⁄«me
 = 
NULL
;

121 
höt
.
ai_addr
 = 
NULL
;

122 
höt
.
ai_√xt
 = 
NULL
;

123 i‡((
îr
 = 
	`gëaddröfo
(
¨gv
[1],árgv[2], &
höt
, &
aûi°
)) != 0)

124 
	`îr_quô
("gëaddröfÿîr‹: %s", 
	`gai_°ªº‹
(
îr
));

125 
aù
 = 
aûi°
;áù !
NULL
;áù =áù->
ai_√xt
) {

126 
	`¥öt_Êags
(
aù
);

127 
	`¥öt_Ámûy
(
aù
);

128 
	`¥öt_ty≥
(
aù
);

129 
	`¥öt_¥Ÿocﬁ
(
aù
);

130 
	`¥ötf
("\n\tho° %s", 
aù
->
ai_ˇn⁄«me
?aip->ai_canonname:"-");

131 i‡(
aù
->
ai_Ámûy
 =
AF_INET
) {

132 
söp
 = (
sockaddr_ö
 *)
aù
->
ai_addr
;

133 
addr
 = 
	`öë_¡›
(
AF_INET
, &
söp
->
sö_addr
, 
abuf
,

134 
INET_ADDRSTRLEN
);

135 
	`¥ötf
("áddªs†%s", 
addr
?addr:"unknown");

136 
	`¥ötf
("Ö‹à%d", 
	`¡ohs
(
söp
->
sö_p‹t
));

138 
	`¥ötf
("\n");

140 
	`exô
(0);

141 
	}
}

	@sockets/initsrv1.c

1 
	~"≠ue.h
"

2 
	~<î∫o.h
>

3 
	~<sys/sockë.h
>

6 
	$öô£rvî
(
ty≥
, c⁄° 
sockaddr
 *
addr
, 
sockÀn_t
 
Æí
,

7 
qÀn
)

9 
fd
;

10 
îr
 = 0;

12 i‡((
fd
 = 
	`sockë
(
addr
->
ß_Ámûy
, 
ty≥
, 0)) < 0)

14 i‡(
	`böd
(
fd
, 
addr
, 
Æí
) < 0) {

15 
îr
 = 
î∫o
;

16 
îrout
;

18 i‡(
ty≥
 =
SOCK_STREAM
 ||Åy≥ =
SOCK_SEQPACKET
) {

19 i‡(
	`li°í
(
fd
, 
qÀn
) < 0) {

20 
îr
 = 
î∫o
;

21 
îrout
;

24 (
fd
);

26 
îrout
:

27 
	`˛o£
(
fd
);

28 
î∫o
 = 
îr
;

30 
	}
}

	@sockets/initsrv2.c

1 
	~"≠ue.h
"

2 
	~<î∫o.h
>

3 
	~<sys/sockë.h
>

6 
	$öô£rvî
(
ty≥
, c⁄° 
sockaddr
 *
addr
, 
sockÀn_t
 
Æí
,

7 
qÀn
)

9 
fd
, 
îr
;

10 
ªu£
 = 1;

12 i‡((
fd
 = 
	`sockë
(
addr
->
ß_Ámûy
, 
ty≥
, 0)) < 0)

14 i‡(
	`£tsock›t
(
fd
, 
SOL_SOCKET
, 
SO_REUSEADDR
, &
ªu£
,

16 
îr
 = 
î∫o
;

17 
îrout
;

19 i‡(
	`böd
(
fd
, 
addr
, 
Æí
) < 0) {

20 
îr
 = 
î∫o
;

21 
îrout
;

23 i‡(
ty≥
 =
SOCK_STREAM
 ||Åy≥ =
SOCK_SEQPACKET
) {

24 i‡(
	`li°í
(
fd
, 
qÀn
) < 0) {

25 
îr
 = 
î∫o
;

26 
îrout
;

29 (
fd
);

31 
îrout
:

32 
	`˛o£
(
fd
);

33 
î∫o
 = 
îr
;

35 
	}
}

	@sockets/recvfd.c

1 
	~"≠ue.h
"

2 #ifde‡
MACOS


3 
	~<sys/uio.h
>

5 
	~<sys/sockë.h
>

9 
	#CONTROLLEN
 
	`CMSG_LEN
(())

	)

11 
cmsghdr
 *
	gcm±r
 = 
NULL
;

19 
ªcv_fd
(
fd
, 
	$ssize_t
 (*
u£rfunc
)(, c⁄° *, 
size_t
))

21 
√wfd
, 
ƒ
, 
°©us
;

22 *
±r
;

23 
buf
[
MAXLINE
];

24 
iovec
 
iov
[1];

25 
msghdr
 
msg
;

27 
°©us
 = -1;

29 
iov
[0].
iov_ba£
 = 
buf
;

30 
iov
[0].
iov_Àn
 = (
buf
);

31 
msg
.
msg_iov
 = 
iov
;

32 
msg
.
msg_iovÀn
 = 1;

33 
msg
.
msg_«me
 = 
NULL
;

34 
msg
.
msg_«mñí
 = 0;

35 i‡(
cm±r
 =
NULL
 && (cm±∏
	`mÆloc
(
CONTROLLEN
)) == NULL)

37 
msg
.
msg_c⁄åﬁ
 = 
cm±r
;

38 
msg
.
msg_c⁄åﬁÀn
 = 
CONTROLLEN
;

39 i‡((
ƒ
 = 
	`ªcvmsg
(
fd
, &
msg
, 0)) < 0) {

40 
	`îr_sys
("recvmsgÉrror");

41 } i‡(
ƒ
 == 0) {

42 
	`îr_ªt
("connection closed by server");

51 
±r
 = 
buf
;Öå < &buf[
ƒ
]; ) {

52 i‡(*
±r
++ == 0) {

53 i‡(
±r
 !&
buf
[
ƒ
-1])

54 
	`îr_dump
("message formatÉrror");

55 
°©us
 = *
±r
 & 0xFF;

56 i‡(
°©us
 == 0) {

57 i‡(
msg
.
msg_c⁄åﬁÀn
 !
CONTROLLEN
)

58 
	`îr_dump
("status = 0 butÇo fd");

59 
√wfd
 = *(*)
	`CMSG_DATA
(
cm±r
);

61 
√wfd
 = -
°©us
;

63 
ƒ
 -= 2;

66 i‡(
ƒ
 > 0 && (*
u£rfunc
)(
STDERR_FILENO
, 
buf
,Çr) !=Çr)

68 i‡(
°©us
 >= 0)

69 (
√wfd
);

71 
	}
}

	@sockets/recvfd2.c

1 
	~"≠ue.h
"

2 
	~<sys/sockë.h
>

3 
	~<sys/un.h
>

5 #i‡
deföed
(
SCM_CREDS
)

6 
	#CREDSTRUCT
 
cmsg¸ed


	)

7 
	#CR_UID
 
cm¸ed_uid


	)

8 
	#CREDOPT
 
LOCAL_PEERCRED


	)

9 
	#SCM_CREDTYPE
 
SCM_CREDS


	)

10 #ñi‡
deföed
(
SCM_CREDENTIALS
)

11 
	#CREDSTRUCT
 
u¸ed


	)

12 
	#CR_UID
 
uid


	)

13 
	#CREDOPT
 
SO_PASSCRED


	)

14 
	#SCM_CREDTYPE
 
SCM_CREDENTIALS


	)

16 #îr‹ 
∑ssög
 
¸edítüls
 
is
 
unsuµ‹ãd
!

20 
	#RIGHTSLEN
 
	`CMSG_LEN
(())

	)

21 
	#CREDSLEN
 
	`CMSG_LEN
((
CREDSTRUCT
))

	)

22 
	#CONTROLLEN
 (
RIGHTSLEN
 + 
CREDSLEN
)

	)

24 
cmsghdr
 *
	gcm±r
 = 
NULL
;

32 
ªcv_ufd
(
fd
, 
uid_t
 *
uid±r
,

33 
	$ssize_t
 (*
u£rfunc
)(, c⁄° *, 
size_t
))

35 
cmsghdr
 *
cmp
;

36 
CREDSTRUCT
 *
¸edp
;

37 
√wfd
, 
ƒ
, 
°©us
;

38 *
±r
;

39 
buf
[
MAXLINE
];

40 
iovec
 
iov
[1];

41 
msghdr
 
msg
;

42 c⁄° 
⁄
 = 1;

44 
°©us
 = -1;

45 
√wfd
 = -1;

46 i‡(
	`£tsock›t
(
fd
, 
SOL_SOCKET
, 
CREDOPT
, &
⁄
, ()) < 0) {

47 
	`îr_ªt
("setsockopt failed");

51 
iov
[0].
iov_ba£
 = 
buf
;

52 
iov
[0].
iov_Àn
 = (
buf
);

53 
msg
.
msg_iov
 = 
iov
;

54 
msg
.
msg_iovÀn
 = 1;

55 
msg
.
msg_«me
 = 
NULL
;

56 
msg
.
msg_«mñí
 = 0;

57 i‡(
cm±r
 =
NULL
 && (cm±∏
	`mÆloc
(
CONTROLLEN
)) == NULL)

59 
msg
.
msg_c⁄åﬁ
 = 
cm±r
;

60 
msg
.
msg_c⁄åﬁÀn
 = 
CONTROLLEN
;

61 i‡((
ƒ
 = 
	`ªcvmsg
(
fd
, &
msg
, 0)) < 0) {

62 
	`îr_sys
("recvmsgÉrror");

63 } i‡(
ƒ
 == 0) {

64 
	`îr_ªt
("connection closed by server");

73 
±r
 = 
buf
;Öå < &buf[
ƒ
]; ) {

74 i‡(*
±r
++ == 0) {

75 i‡(
±r
 !&
buf
[
ƒ
-1])

76 
	`îr_dump
("message formatÉrror");

77 
°©us
 = *
±r
 & 0xFF;

78 i‡(
°©us
 == 0) {

79 i‡(
msg
.
msg_c⁄åﬁÀn
 !
CONTROLLEN
)

80 
	`îr_dump
("status = 0 butÇo fd");

83 
cmp
 = 
	`CMSG_FIRSTHDR
(&
msg
);

84 
cmp
 !
NULL
; cm∞
	`CMSG_NXTHDR
(&
msg
, cmp)) {

85 i‡(
cmp
->
cmsg_Àvñ
 !
SOL_SOCKET
)

87 
cmp
->
cmsg_ty≥
) {

88 
SCM_RIGHTS
:

89 
√wfd
 = *(*)
	`CMSG_DATA
(
cmp
);

91 
SCM_CREDTYPE
:

92 
¸edp
 = (
CREDSTRUCT
 *)
	`CMSG_DATA
(
cmp
);

93 *
uid±r
 = 
¸edp
->
CR_UID
;

97 
√wfd
 = -
°©us
;

99 
ƒ
 -= 2;

102 i‡(
ƒ
 > 0 && (*
u£rfunc
)(
STDERR_FILENO
, 
buf
,Çr) !=Çr)

104 i‡(
°©us
 >= 0)

105 (
√wfd
);

107 
	}
}

	@sockets/ruptime-dg.c

1 
	~"≠ue.h
"

2 
	~<√tdb.h
>

3 
	~<î∫o.h
>

4 
	~<sys/sockë.h
>

6 
	#BUFLEN
 128

	)

7 
	#TIMEOUT
 20

	)

10 
	$sigÆrm
(
signo
)

12 
	}
}

15 
	$¥öt_u±ime
(
sockfd
, 
addröfo
 *
aù
)

17 
n
;

18 
buf
[
BUFLEN
];

20 
buf
[0] = 0;

21 i‡(
	`£ndto
(
sockfd
, 
buf
, 1, 0, 
aù
->
ai_addr
,áù->
ai_addæí
) < 0)

22 
	`îr_sys
("sendtoÉrror");

23 
	`Æ¨m
(
TIMEOUT
);

24 i‡((
n
 = 
	`ªcv‰om
(
sockfd
, 
buf
, 
BUFLEN
, 0, 
NULL
, NULL)) < 0) {

25 i‡(
î∫o
 !
EINTR
)

26 
	`Æ¨m
(0);

27 
	`îr_sys
("recvÉrror");

29 
	`Æ¨m
(0);

30 
	`wrôe
(
STDOUT_FILENO
, 
buf
, 
n
);

31 
	}
}

34 
	$maö
(
¨gc
, *
¨gv
[])

36 
addröfo
 *
aûi°
, *
aù
;

37 
addröfo
 
höt
;

38 
sockfd
, 
îr
;

39 
siga˘i⁄
 
ß
;

41 i‡(
¨gc
 != 2)

42 
	`îr_quô
("usage:Ñuptime hostname");

43 
ß
.
ß_h™dÀr
 = 
sigÆrm
;

44 
ß
.
ß_Êags
 = 0;

45 
	`sigem±y£t
(&
ß
.
ß_mask
);

46 i‡(
	`siga˘i⁄
(
SIGALRM
, &
ß
, 
NULL
) < 0)

47 
	`îr_sys
("sigactionÉrror");

48 
höt
.
ai_Êags
 = 0;

49 
höt
.
ai_Ámûy
 = 0;

50 
höt
.
ai_sockty≥
 = 
SOCK_DGRAM
;

51 
höt
.
ai_¥Ÿocﬁ
 = 0;

52 
höt
.
ai_addæí
 = 0;

53 
höt
.
ai_ˇn⁄«me
 = 
NULL
;

54 
höt
.
ai_addr
 = 
NULL
;

55 
höt
.
ai_√xt
 = 
NULL
;

56 i‡((
îr
 = 
	`gëaddröfo
(
¨gv
[1], "ru±ime", &
höt
, &
aûi°
)) != 0)

57 
	`îr_quô
("gëaddröfÿîr‹: %s", 
	`gai_°ªº‹
(
îr
));

59 
aù
 = 
aûi°
;áù !
NULL
;áù =áù->
ai_√xt
) {

60 i‡((
sockfd
 = 
	`sockë
(
aù
->
ai_Ámûy
, 
SOCK_DGRAM
, 0)) < 0) {

61 
îr
 = 
î∫o
;

63 
	`¥öt_u±ime
(
sockfd
, 
aù
);

64 
	`exô
(0);

68 
	`Ârötf
(
°dîr
, "ˇn'àc⁄è˘ %s: %s\n", 
¨gv
[1], 
	`°ªº‹
(
îr
));

69 
	`exô
(1);

70 
	}
}

	@sockets/ruptime.c

1 
	~"≠ue.h
"

2 
	~<√tdb.h
>

3 
	~<î∫o.h
>

4 
	~<sys/sockë.h
>

6 
	#MAXADDRLEN
 256

	)

7 
	#BUFLEN
 128

	)

9 
c⁄√˘_ªåy
(, c⁄° 
sockaddr
 *, 
sockÀn_t
);

12 
	$¥öt_u±ime
(
sockfd
)

14 
n
;

15 
buf
[
BUFLEN
];

17 (
n
 = 
	`ªcv
(
sockfd
, 
buf
, 
BUFLEN
, 0)) > 0)

18 
	`wrôe
(
STDOUT_FILENO
, 
buf
, 
n
);

19 i‡(
n
 < 0)

20 
	`îr_sys
("recvÉrror");

21 
	}
}

24 
	$maö
(
¨gc
, *
¨gv
[])

26 
addröfo
 *
aûi°
, *
aù
;

27 
addröfo
 
höt
;

28 
sockfd
, 
îr
;

30 i‡(
¨gc
 != 2)

31 
	`îr_quô
("usage:Ñuptime hostname");

32 
höt
.
ai_Êags
 = 0;

33 
höt
.
ai_Ámûy
 = 0;

34 
höt
.
ai_sockty≥
 = 
SOCK_STREAM
;

35 
höt
.
ai_¥Ÿocﬁ
 = 0;

36 
höt
.
ai_addæí
 = 0;

37 
höt
.
ai_ˇn⁄«me
 = 
NULL
;

38 
höt
.
ai_addr
 = 
NULL
;

39 
höt
.
ai_√xt
 = 
NULL
;

40 i‡((
îr
 = 
	`gëaddröfo
(
¨gv
[1], "ru±ime", &
höt
, &
aûi°
)) != 0)

41 
	`îr_quô
("gëaddröfÿîr‹: %s", 
	`gai_°ªº‹
(
îr
));

42 
aù
 = 
aûi°
;áù !
NULL
;áù =áù->
ai_√xt
) {

43 i‡((
sockfd
 = 
	`sockë
(
aù
->
ai_Ámûy
, 
SOCK_STREAM
, 0)) < 0)

44 
îr
 = 
î∫o
;

45 i‡(
	`c⁄√˘_ªåy
(
sockfd
, 
aù
->
ai_addr
,áù->
ai_addæí
) < 0) {

46 
îr
 = 
î∫o
;

48 
	`¥öt_u±ime
(
sockfd
);

49 
	`exô
(0);

52 
	`Ârötf
(
°dîr
, "ˇn'àc⁄√˘Åÿ%s: %s\n", 
¨gv
[1],

53 
	`°ªº‹
(
îr
));

54 
	`exô
(1);

55 
	}
}

	@sockets/ruptimed-dg.c

1 
	~"≠ue.h
"

2 
	~<√tdb.h
>

3 
	~<î∫o.h
>

4 
	~<sy¶og.h
>

5 
	~<sys/sockë.h
>

7 
	#BUFLEN
 128

	)

8 
	#MAXADDRLEN
 256

	)

10 #i‚de‡
HOST_NAME_MAX


11 
	#HOST_NAME_MAX
 256

	)

14 
öô£rvî
(, 
sockaddr
 *, 
sockÀn_t
, );

17 
	$£rve
(
sockfd
)

19 
n
;

20 
sockÀn_t
 
Æí
;

21 
FILE
 *
Â
;

22 
buf
[
BUFLEN
];

23 
abuf
[
MAXADDRLEN
];

26 
Æí
 = 
MAXADDRLEN
;

27 i‡((
n
 = 
	`ªcv‰om
(
sockfd
, 
buf
, 
BUFLEN
, 0,

28 (
sockaddr
 *)
abuf
, &
Æí
)) < 0) {

29 
	`sy¶og
(
LOG_ERR
, "ruptimed:ÑecvfromÉrror: %s",

30 
	`°ªº‹
(
î∫o
));

31 
	`exô
(1);

33 i‡((
Â
 = 
	`p›í
("/u§/bö/u±ime", "r")Ë=
NULL
) {

34 
	`•rötf
(
buf
, "îr‹: %s\n", 
	`°ªº‹
(
î∫o
));

35 
	`£ndto
(
sockfd
, 
buf
, 
	`°æí
(buf), 0,

36 (
sockaddr
 *)
abuf
, 
Æí
);

38 i‡(
	`fgës
(
buf
, 
BUFLEN
, 
Â
Ë!
NULL
)

39 
	`£ndto
(
sockfd
, 
buf
, 
	`°æí
(buf), 0,

40 (
sockaddr
 *)
abuf
, 
Æí
);

41 
	`p˛o£
(
Â
);

44 
	}
}

47 
	$maö
(
¨gc
, *
¨gv
[])

49 
addröfo
 *
aûi°
, *
aù
;

50 
addröfo
 
höt
;

51 
sockfd
, 
îr
, 
n
;

52 *
ho°
;

54 i‡(
¨gc
 != 1)

55 
	`îr_quô
("usage:Ñuptimed");

56 #ifde‡
_SC_HOST_NAME_MAX


57 
n
 = 
	`sysc⁄f
(
_SC_HOST_NAME_MAX
);

58 i‡(
n
 < 0)

60 
n
 = 
HOST_NAME_MAX
;

61 
ho°
 = 
	`mÆloc
(
n
);

62 i‡(
ho°
 =
NULL
)

63 
	`îr_sys
("mallocÉrror");

64 i‡(
	`gëho°«me
(
ho°
, 
n
) < 0)

65 
	`îr_sys
("gethostnameÉrror");

66 
	`d´m⁄ize
("ruptimed");

67 
höt
.
ai_Êags
 = 
AI_CANONNAME
;

68 
höt
.
ai_Ámûy
 = 0;

69 
höt
.
ai_sockty≥
 = 
SOCK_DGRAM
;

70 
höt
.
ai_¥Ÿocﬁ
 = 0;

71 
höt
.
ai_addæí
 = 0;

72 
höt
.
ai_ˇn⁄«me
 = 
NULL
;

73 
höt
.
ai_addr
 = 
NULL
;

74 
höt
.
ai_√xt
 = 
NULL
;

75 i‡((
îr
 = 
	`gëaddröfo
(
ho°
, "ru±ime", &
höt
, &
aûi°
)) != 0) {

76 
	`sy¶og
(
LOG_ERR
, "ruptimed: getaddrinfoÉrror: %s",

77 
	`gai_°ªº‹
(
îr
));

78 
	`exô
(1);

80 
aù
 = 
aûi°
;áù !
NULL
;áù =áù->
ai_√xt
) {

81 i‡((
sockfd
 = 
	`öô£rvî
(
SOCK_DGRAM
, 
aù
->
ai_addr
,

82 
aù
->
ai_addæí
, 0)) >= 0) {

83 
	`£rve
(
sockfd
);

84 
	`exô
(0);

87 
	`exô
(1);

88 
	}
}

	@sockets/ruptimed-fd.c

1 
	~"≠ue.h
"

2 
	~<√tdb.h
>

3 
	~<î∫o.h
>

4 
	~<sy¶og.h
>

5 
	~<f˙é.h
>

6 
	~<sys/sockë.h
>

7 
	~<sys/waô.h
>

9 
	#QLEN
 10

	)

11 #i‚de‡
HOST_NAME_MAX


12 
	#HOST_NAME_MAX
 256

	)

15 
öô£rvî
(, 
sockaddr
 *, 
sockÀn_t
, );

18 
	$£rve
(
sockfd
)

20 
˛fd
, 
°©us
;

21 
pid_t
 
pid
;

24 
˛fd
 = 
	`ac˚±
(
sockfd
, 
NULL
, NULL);

25 i‡(
˛fd
 < 0) {

26 
	`sy¶og
(
LOG_ERR
, "ruptimed:ácceptÉrror: %s",

27 
	`°ªº‹
(
î∫o
));

28 
	`exô
(1);

30 i‡((
pid
 = 
	`f‹k
()) < 0) {

31 
	`sy¶og
(
LOG_ERR
, "ruptimed: forkÉrror: %s",

32 
	`°ªº‹
(
î∫o
));

33 
	`exô
(1);

34 } i‡(
pid
 == 0) {

42 i‡(
	`dup2
(
˛fd
, 
STDOUT_FILENO
) != STDOUT_FILENO ||

43 
	`dup2
(
˛fd
, 
STDERR_FILENO
) != STDERR_FILENO) {

44 
	`sy¶og
(
LOG_ERR
, "ruptimed: unexpectedÉrror");

45 
	`exô
(1);

47 
	`˛o£
(
˛fd
);

48 
	`exe˛
("/usr/bin/uptime", "uptime", (*)0);

49 
	`sy¶og
(
LOG_ERR
, "ruptimed: unexpectedÑeturn fromÉxec: %s",

50 
	`°ªº‹
(
î∫o
));

52 
	`˛o£
(
˛fd
);

53 
	`waôpid
(
pid
, &
°©us
, 0);

56 
	}
}

59 
	$maö
(
¨gc
, *
¨gv
[])

61 
addröfo
 *
aûi°
, *
aù
;

62 
addröfo
 
höt
;

63 
sockfd
, 
îr
, 
n
;

64 *
ho°
;

66 i‡(
¨gc
 != 1)

67 
	`îr_quô
("usage:Ñuptimed");

68 #ifde‡
_SC_HOST_NAME_MAX


69 
n
 = 
	`sysc⁄f
(
_SC_HOST_NAME_MAX
);

70 i‡(
n
 < 0)

72 
n
 = 
HOST_NAME_MAX
;

73 
ho°
 = 
	`mÆloc
(
n
);

74 i‡(
ho°
 =
NULL
)

75 
	`îr_sys
("mallocÉrror");

76 i‡(
	`gëho°«me
(
ho°
, 
n
) < 0)

77 
	`îr_sys
("gethostnameÉrror");

78 
	`d´m⁄ize
("ruptimed");

79 
höt
.
ai_Êags
 = 
AI_CANONNAME
;

80 
höt
.
ai_Ámûy
 = 0;

81 
höt
.
ai_sockty≥
 = 
SOCK_STREAM
;

82 
höt
.
ai_¥Ÿocﬁ
 = 0;

83 
höt
.
ai_addæí
 = 0;

84 
höt
.
ai_ˇn⁄«me
 = 
NULL
;

85 
höt
.
ai_addr
 = 
NULL
;

86 
höt
.
ai_√xt
 = 
NULL
;

87 i‡((
îr
 = 
	`gëaddröfo
(
ho°
, "ru±ime", &
höt
, &
aûi°
)) != 0) {

88 
	`sy¶og
(
LOG_ERR
, "ruptimed: getaddrinfoÉrror: %s",

89 
	`gai_°ªº‹
(
îr
));

90 
	`exô
(1);

92 
aù
 = 
aûi°
;áù !
NULL
;áù =áù->
ai_√xt
) {

93 i‡((
sockfd
 = 
	`öô£rvî
(
SOCK_STREAM
, 
aù
->
ai_addr
,

94 
aù
->
ai_addæí
, 
QLEN
)) >= 0) {

95 
	`£rve
(
sockfd
);

96 
	`exô
(0);

99 
	`exô
(1);

100 
	}
}

	@sockets/ruptimed.c

1 
	~"≠ue.h
"

2 
	~<√tdb.h
>

3 
	~<î∫o.h
>

4 
	~<sy¶og.h
>

5 
	~<sys/sockë.h
>

7 
	#BUFLEN
 128

	)

8 
	#QLEN
 10

	)

10 #i‚de‡
HOST_NAME_MAX


11 
	#HOST_NAME_MAX
 256

	)

14 
öô£rvî
(, 
sockaddr
 *, 
sockÀn_t
, );

17 
	$£rve
(
sockfd
)

19 
˛fd
;

20 
FILE
 *
Â
;

21 
buf
[
BUFLEN
];

24 
˛fd
 = 
	`ac˚±
(
sockfd
, 
NULL
, NULL);

25 i‡(
˛fd
 < 0) {

26 
	`sy¶og
(
LOG_ERR
, "ruptimed:ácceptÉrror: %s",

27 
	`°ªº‹
(
î∫o
));

28 
	`exô
(1);

30 i‡((
Â
 = 
	`p›í
("/u§/bö/u±ime", "r")Ë=
NULL
) {

31 
	`•rötf
(
buf
, "îr‹: %s\n", 
	`°ªº‹
(
î∫o
));

32 
	`£nd
(
˛fd
, 
buf
, 
	`°æí
(buf), 0);

34 
	`fgës
(
buf
, 
BUFLEN
, 
Â
Ë!
NULL
)

35 
	`£nd
(
˛fd
, 
buf
, 
	`°æí
(buf), 0);

36 
	`p˛o£
(
Â
);

38 
	`˛o£
(
˛fd
);

40 
	}
}

43 
	$maö
(
¨gc
, *
¨gv
[])

45 
addröfo
 *
aûi°
, *
aù
;

46 
addröfo
 
höt
;

47 
sockfd
, 
îr
, 
n
;

48 *
ho°
;

50 i‡(
¨gc
 != 1)

51 
	`îr_quô
("usage:Ñuptimed");

52 #ifde‡
_SC_HOST_NAME_MAX


53 
n
 = 
	`sysc⁄f
(
_SC_HOST_NAME_MAX
);

54 i‡(
n
 < 0)

56 
n
 = 
HOST_NAME_MAX
;

57 
ho°
 = 
	`mÆloc
(
n
);

58 i‡(
ho°
 =
NULL
)

59 
	`îr_sys
("mallocÉrror");

60 i‡(
	`gëho°«me
(
ho°
, 
n
) < 0)

61 
	`îr_sys
("gethostnameÉrror");

62 
	`d´m⁄ize
("ruptimed");

63 
höt
.
ai_Êags
 = 
AI_CANONNAME
;

64 
höt
.
ai_Ámûy
 = 0;

65 
höt
.
ai_sockty≥
 = 
SOCK_STREAM
;

66 
höt
.
ai_¥Ÿocﬁ
 = 0;

67 
höt
.
ai_addæí
 = 0;

68 
höt
.
ai_ˇn⁄«me
 = 
NULL
;

69 
höt
.
ai_addr
 = 
NULL
;

70 
höt
.
ai_√xt
 = 
NULL
;

71 i‡((
îr
 = 
	`gëaddröfo
(
ho°
, "ru±ime", &
höt
, &
aûi°
)) != 0) {

72 
	`sy¶og
(
LOG_ERR
, "ruptimed: getaddrinfoÉrror: %s",

73 
	`gai_°ªº‹
(
îr
));

74 
	`exô
(1);

76 
aù
 = 
aûi°
;áù !
NULL
;áù =áù->
ai_√xt
) {

77 i‡((
sockfd
 = 
	`öô£rvî
(
SOCK_STREAM
, 
aù
->
ai_addr
,

78 
aù
->
ai_addæí
, 
QLEN
)) >= 0) {

79 
	`£rve
(
sockfd
);

80 
	`exô
(0);

83 
	`exô
(1);

84 
	}
}

	@sockets/sendfd.c

1 
	~"≠ue.h
"

2 #ifde‡
MACOS


3 
	~<sys/uio.h
>

5 
	~<sys/sockë.h
>

8 
	#CONTROLLEN
 
	`CMSG_LEN
(())

	)

10 
cmsghdr
 *
	gcm±r
 = 
NULL
;

17 
	$£nd_fd
(
fd
, 
fd_to_£nd
)

19 
iovec
 
iov
[1];

20 
msghdr
 
msg
;

21 
buf
[2];

23 
iov
[0].
iov_ba£
 = 
buf
;

24 
iov
[0].
iov_Àn
 = 2;

25 
msg
.
msg_iov
 = 
iov
;

26 
msg
.
msg_iovÀn
 = 1;

27 
msg
.
msg_«me
 = 
NULL
;

28 
msg
.
msg_«mñí
 = 0;

29 i‡(
fd_to_£nd
 < 0) {

30 
msg
.
msg_c⁄åﬁ
 = 
NULL
;

31 
msg
.
msg_c⁄åﬁÀn
 = 0;

32 
buf
[1] = -
fd_to_£nd
;

33 i‡(
buf
[1] == 0)

34 
buf
[1] = 1;

36 i‡(
cm±r
 =
NULL
 && (cm±∏
	`mÆloc
(
CONTROLLEN
)) == NULL)

38 
cm±r
->
cmsg_Àvñ
 = 
SOL_SOCKET
;

39 
cm±r
->
cmsg_ty≥
 = 
SCM_RIGHTS
;

40 
cm±r
->
cmsg_Àn
 = 
CONTROLLEN
;

41 
msg
.
msg_c⁄åﬁ
 = 
cm±r
;

42 
msg
.
msg_c⁄åﬁÀn
 = 
CONTROLLEN
;

43 *(*)
	`CMSG_DATA
(
cm±r
Ë
fd_to_£nd
;

44 
buf
[1] = 0;

46 
buf
[0] = 0;

47 i‡(
	`£ndmsg
(
fd
, &
msg
, 0) != 2)

50 
	}
}

	@sockets/sendfd2.c

1 
	~"≠ue.h
"

2 
	~<sys/sockë.h
>

4 #i‡
deföed
(
SCM_CREDS
)

5 
	#CREDSTRUCT
 
cmsg¸ed


	)

6 
	#SCM_CREDTYPE
 
SCM_CREDS


	)

7 #ñi‡
deföed
(
SCM_CREDENTIALS
)

8 
	#CREDSTRUCT
 
u¸ed


	)

9 
	#SCM_CREDTYPE
 
SCM_CREDENTIALS


	)

11 #îr‹ 
∑ssög
 
¸edítüls
 
is
 
unsuµ‹ãd
!

15 
	#RIGHTSLEN
 
	`CMSG_LEN
(())

	)

16 
	#CREDSLEN
 
	`CMSG_LEN
((
CREDSTRUCT
))

	)

17 
	#CONTROLLEN
 (
RIGHTSLEN
 + 
CREDSLEN
)

	)

19 
cmsghdr
 *
	gcm±r
 = 
NULL
;

26 
	$£nd_fd
(
fd
, 
fd_to_£nd
)

28 
CREDSTRUCT
 *
¸edp
;

29 
cmsghdr
 *
cmp
;

30 
iovec
 
iov
[1];

31 
msghdr
 
msg
;

32 
buf
[2];

34 
iov
[0].
iov_ba£
 = 
buf
;

35 
iov
[0].
iov_Àn
 = 2;

36 
msg
.
msg_iov
 = 
iov
;

37 
msg
.
msg_iovÀn
 = 1;

38 
msg
.
msg_«me
 = 
NULL
;

39 
msg
.
msg_«mñí
 = 0;

40 
msg
.
msg_Êags
 = 0;

41 i‡(
fd_to_£nd
 < 0) {

42 
msg
.
msg_c⁄åﬁ
 = 
NULL
;

43 
msg
.
msg_c⁄åﬁÀn
 = 0;

44 
buf
[1] = -
fd_to_£nd
;

45 i‡(
buf
[1] == 0)

46 
buf
[1] = 1;

48 i‡(
cm±r
 =
NULL
 && (cm±∏
	`mÆloc
(
CONTROLLEN
)) == NULL)

50 
msg
.
msg_c⁄åﬁ
 = 
cm±r
;

51 
msg
.
msg_c⁄åﬁÀn
 = 
CONTROLLEN
;

52 
cmp
 = 
cm±r
;

53 
cmp
->
cmsg_Àvñ
 = 
SOL_SOCKET
;

54 
cmp
->
cmsg_ty≥
 = 
SCM_RIGHTS
;

55 
cmp
->
cmsg_Àn
 = 
RIGHTSLEN
;

56 *(*)
	`CMSG_DATA
(
cmp
Ë
fd_to_£nd
;

58 
cmp
 = 
	`CMSG_NXTHDR
(&
msg
, cmp);

59 
cmp
->
cmsg_Àvñ
 = 
SOL_SOCKET
;

60 
cmp
->
cmsg_ty≥
 = 
SCM_CREDTYPE
;

61 
cmp
->
cmsg_Àn
 = 
CREDSLEN
;

62 
¸edp
 = (
CREDSTRUCT
 *)
	`CMSG_DATA
(
cmp
);

63 #i‡
	`deföed
(
SCM_CREDENTIALS
)

64 
¸edp
->
uid
 = 
	`gëeuid
();

65 
¸edp
->
gid
 = 
	`gëegid
();

66 
¸edp
->
pid
 = 
	`gëpid
();

68 
buf
[1] = 0;

70 
buf
[0] = 0;

71 i‡(
	`£ndmsg
(
fd
, &
msg
, 0) != 2)

74 
	}
}

	@sockets/servaccept.c

1 
	~"≠ue.h
"

2 
	~<sys/sockë.h
>

3 
	~<sys/un.h
>

4 
	~<time.h
>

5 
	~<î∫o.h
>

7 
	#STALE
 30

	)

16 
	$£rv_ac˚±
(
li°ífd
, 
uid_t
 *
uid±r
)

18 
˛ifd
, 
Àn
, 
îr
, 
rvÆ
;

19 
time_t
 
°Æëime
;

20 
sockaddr_un
 
un
;

21 
°©
 
°©buf
;

23 
Àn
 = (
un
);

24 i‡((
˛ifd
 = 
	`ac˚±
(
li°ífd
, (
sockaddr
 *)&
un
, &
Àn
)) < 0)

28 
Àn
 -
	`off£tof
(
sockaddr_un
, 
sun_∑th
);

29 
un
.
sun_∑th
[
Àn
] = 0;

31 i‡(
	`°©
(
un
.
sun_∑th
, &
°©buf
) < 0) {

32 
rvÆ
 = -2;

33 
îrout
;

35 #ifdef 
S_ISSOCK


36 i‡(
	`S_ISSOCK
(
°©buf
.
°_mode
) == 0) {

37 
rvÆ
 = -3;

38 
îrout
;

41 i‡((
°©buf
.
°_mode
 & (
S_IRWXG
 | 
S_IRWXO
)) ||

42 (
°©buf
.
°_mode
 & 
S_IRWXU
) != S_IRWXU) {

43 
rvÆ
 = -4;

44 
îrout
;

47 
°Æëime
 = 
	`time
(
NULL
Ë- 
STALE
;

48 i‡(
°©buf
.
°_©ime
 < 
°Æëime
 ||

49 
°©buf
.
°_˘ime
 < 
°Æëime
 ||

50 
°©buf
.
°_mtime
 < 
°Æëime
) {

51 
rvÆ
 = -5;

52 
îrout
;

55 i‡(
uid±r
 !
NULL
)

56 *
uid±r
 = 
°©buf
.
°_uid
;

57 
	`u∆ök
(
un
.
sun_∑th
);

58 (
˛ifd
);

60 
îrout
:

61 
îr
 = 
î∫o
;

62 
	`˛o£
(
˛ifd
);

63 
î∫o
 = 
îr
;

64 (
rvÆ
);

65 
	}
}

	@sockets/servlisten.c

1 
	~"≠ue.h
"

2 
	~<sys/sockë.h
>

3 
	~<sys/un.h
>

4 
	~<î∫o.h
>

6 
	#QLEN
 10

	)

13 
	$£rv_li°í
(c⁄° *
«me
)

15 
fd
, 
Àn
, 
îr
, 
rvÆ
;

16 
sockaddr_un
 
un
;

19 i‡((
fd
 = 
	`sockë
(
AF_UNIX
, 
SOCK_STREAM
, 0)) < 0)

22 
	`u∆ök
(
«me
);

25 
	`mem£t
(&
un
, 0, (un));

26 
un
.
sun_Ámûy
 = 
AF_UNIX
;

27 
	`°r˝y
(
un
.
sun_∑th
, 
«me
);

28 
Àn
 = 
	`off£tof
(
sockaddr_un
, 
sun_∑th
Ë+ 
	`°æí
(
«me
);

31 i‡(
	`böd
(
fd
, (
sockaddr
 *)&
un
, 
Àn
) < 0) {

32 
rvÆ
 = -2;

33 
îrout
;

36 i‡(
	`li°í
(
fd
, 
QLEN
) < 0) {

37 
rvÆ
 = -3;

38 
îrout
;

40 (
fd
);

42 
îrout
:

43 
îr
 = 
î∫o
;

44 
	`˛o£
(
fd
);

45 
î∫o
 = 
îr
;

46 (
rvÆ
);

47 
	}
}

	@sockets/spipe.c

1 
	~"≠ue.h
"

2 
	~<sys/sockë.h
>

9 
	$s_pùe
(
fd
[2])

11 (
	`sockë∑ú
(
AF_UNIX
, 
SOCK_STREAM
, 0, 
fd
));

12 
	}
}

	@stdio/buf.c

1 
	~"≠ue.h
"

3 #i‡
deföed
(
MACOS
)

4 
	#_IO_UNBUFFERED
 
__SNBF


	)

5 
	#_IO_LINE_BUF
 
__SLBF


	)

6 
	#_IO_fûe_Êags
 
_Êags


	)

7 
	#BUFFERSZ
(
Â
Ë(Â)->
_bf
.
_size


	)

9 
	#BUFFERSZ
(
Â
Ë((Â)->
_IO_buf_íd
 - (Â)->
_IO_buf_ba£
)

	)

12 
¥_°dio
(c⁄° *, 
FILE
 *);

15 
	$maö
()

17 
FILE
 *
Â
;

19 
	`Âuts
("íã∏™y ch¨a˘î\n", 
°dout
);

20 i‡(
	`gëch¨
(Ë=
EOF
)

21 
	`îr_sys
("getcharÉrror");

22 
	`Âuts
("⁄êlöêtÿ°™d¨dÉº‹\n", 
°dîr
);

24 
	`¥_°dio
("°dö", 
°dö
);

25 
	`¥_°dio
("°dout", 
°dout
);

26 
	`¥_°dio
("°dîr", 
°dîr
);

28 i‡((
Â
 = 
	`f›í
("/ëc/mŸd", "r")Ë=
NULL
)

29 
	`îr_sys
("fopenÉrror");

30 i‡(
	`gëc
(
Â
Ë=
EOF
)

31 
	`îr_sys
("getcÉrror");

32 
	`¥_°dio
("/ëc/mŸd", 
Â
);

33 
	`exô
(0);

34 
	}
}

37 
	$¥_°dio
(c⁄° *
«me
, 
FILE
 *
Â
)

39 
	`¥ötf
("°ªam = %s, ", 
«me
);

44 i‡(
Â
->
_IO_fûe_Êags
 & 
_IO_UNBUFFERED
)

45 
	`¥ötf
("unbuffered");

46 i‡(
Â
->
_IO_fûe_Êags
 & 
_IO_LINE_BUF
)

47 
	`¥ötf
("line buffered");

49 
	`¥ötf
("fully buffered");

50 
	`¥ötf
(", buf„∏sizê%d\n", 
	`BUFFERSZ
(
Â
));

51 
	}
}

	@stdio/tempfiles.c

1 
	~"≠ue.h
"

4 
	$maö
()

6 
«me
[
L_tm≤am
], 
löe
[
MAXLINE
];

7 
FILE
 *
Â
;

9 
	`¥ötf
("%s\n", 
	`tm≤am
(
NULL
));

11 
	`tm≤am
(
«me
);

12 
	`¥ötf
("%s\n", 
«me
);

14 i‡((
Â
 = 
	`tmpfûe
()Ë=
NULL
)

15 
	`îr_sys
("tmpfileÉrror");

16 
	`Âuts
("⁄êlöêo‡ouçut\n", 
Â
);

17 
	`ªwöd
(
Â
);

18 i‡(
	`fgës
(
löe
, ÷öe), 
Â
Ë=
NULL
)

19 
	`îr_sys
("fgetsÉrror");

20 
	`Âuts
(
löe
, 
°dout
);

22 
	`exô
(0);

23 
	}
}

	@stdio/tempnam.c

1 
	~"≠ue.h
"

4 
	$maö
(
¨gc
, *
¨gv
[])

6 i‡(
¨gc
 != 3)

7 
	`îr_quô
("usage:á.out <directory> <prefix>");

9 
	`¥ötf
("%s\n", 
	`ãm≤am
(
¨gv
[1][0] !' ' ?árgv[1] : 
NULL
,

10 
¨gv
[2][0] !' ' ?árgv[2] : 
NULL
));

12 
	`exô
(0);

13 
	}
}

	@streams/cliconn.c

1 
	~"≠ue.h
"

2 
	~<f˙é.h
>

3 
	~<°r›ts.h
>

10 
	$˛i_c⁄n
(c⁄° *
«me
)

12 
fd
;

15 i‡((
fd
 = 
	`›í
(
«me
, 
O_RDWR
)) < 0)

17 i‡(
	`iß°ªam
(
fd
) == 0) {

18 
	`˛o£
(
fd
);

21 (
fd
);

22 
	}
}

	@streams/isastream.c

1 
	~<°r›ts.h
>

2 
	~<uni°d.h
>

5 
	$iß°ªam
(
fd
)

7 (
	`io˘l
(
fd
, 
I_CANPUT
, 0) != -1);

8 
	}
}

	@streams/ptyopen.c

1 
	~"≠ue.h
"

2 
	~<î∫o.h
>

3 
	~<f˙é.h
>

4 
	~<°r›ts.h
>

7 
	$±ym_›í
(*
±s_«me
, 
±s_«mesz
)

9 *
±r
;

10 
fdm
;

17 
	`°∫˝y
(
±s_«me
, "/dev/±mx", 
±s_«mesz
);

18 
±s_«me
[
±s_«mesz
 - 1] = '\0';

19 i‡((
fdm
 = 
	`›í
(
±s_«me
, 
O_RDWR
)) < 0)

21 i‡(
	`gø¡±
(
fdm
) < 0) {

22 
	`˛o£
(
fdm
);

25 i‡(
	`u∆ock±
(
fdm
) < 0) {

26 
	`˛o£
(
fdm
);

29 i‡((
±r
 = 
	`±¢ame
(
fdm
)Ë=
NULL
) {

30 
	`˛o£
(
fdm
);

38 
	`°∫˝y
(
±s_«me
, 
±r
, 
±s_«mesz
);

39 
±s_«me
[
±s_«mesz
 - 1] = '\0';

40 (
fdm
);

41 
	}
}

44 
	$±ys_›í
(*
±s_«me
)

46 
fds
, 
£tup
;

51 i‡((
fds
 = 
	`›í
(
±s_«me
, 
O_RDWR
)) < 0)

57 i‡((
£tup
 = 
	`io˘l
(
fds
, 
I_FIND
, "ldterm")) < 0) {

58 
	`˛o£
(
fds
);

61 i‡(
£tup
 == 0) {

62 i‡(
	`io˘l
(
fds
, 
I_PUSH
, "ptem") < 0) {

63 
	`˛o£
(
fds
);

66 i‡(
	`io˘l
(
fds
, 
I_PUSH
, "ldterm") < 0) {

67 
	`˛o£
(
fds
);

70 i‡(
	`io˘l
(
fds
, 
I_PUSH
, "ttcompat") < 0) {

71 
	`˛o£
(
fds
);

75 (
fds
);

76 
	}
}

	@streams/recvfd.c

1 
	~"≠ue.h
"

2 
	~<°r›ts.h
>

11 
ªcv_fd
(
fd
, 
	$ssize_t
 (*
u£rfunc
)(, c⁄° *, 
size_t
))

13 
√wfd
, 
ƒód
, 
Êag
, 
°©us
;

14 *
±r
;

15 
buf
[
MAXLINE
];

16 
°rbuf
 
d©
;

17 
°ºecvfd
 
ªcvfd
;

19 
°©us
 = -1;

21 
d©
.
buf
 = buf;

22 
d©
.
maxÀn
 = 
MAXLINE
;

23 
Êag
 = 0;

24 i‡(
	`gëmsg
(
fd
, 
NULL
, &
d©
, &
Êag
) < 0)

25 
	`îr_sys
("getmsgÉrror");

26 
ƒód
 = 
d©
.
Àn
;

27 i‡(
ƒód
 == 0) {

28 
	`îr_ªt
("connection closed by server");

38 
±r
 = 
buf
;Öå < &buf[
ƒód
]; ) {

39 i‡(*
±r
++ == 0) {

40 i‡(
±r
 !&
buf
[
ƒód
-1])

41 
	`îr_dump
("message formatÉrror");

42 
°©us
 = *
±r
 & 0xFF;

43 i‡(
°©us
 == 0) {

44 i‡(
	`io˘l
(
fd
, 
I_RECVFD
, &
ªcvfd
) < 0)

46 
√wfd
 = 
ªcvfd
.
fd
;

48 
√wfd
 = -
°©us
;

50 
ƒód
 -= 2;

53 i‡(
ƒód
 > 0)

54 i‡((*
u£rfunc
)(
STDERR_FILENO
, 
buf
, 
ƒód
) !=Çread)

57 i‡(
°©us
 >= 0)

58 (
√wfd
);

60 
	}
}

	@streams/sendfd.c

1 
	~"≠ue.h
"

2 
	~<°r›ts.h
>

9 
	$£nd_fd
(
fd
, 
fd_to_£nd
)

11 
buf
[2];

13 
buf
[0] = 0;

14 i‡(
fd_to_£nd
 < 0) {

15 
buf
[1] = -
fd_to_£nd
;

16 i‡(
buf
[1] == 0)

17 
buf
[1] = 1;

19 
buf
[1] = 0;

22 i‡(
	`wrôe
(
fd
, 
buf
, 2) != 2)

25 i‡(
fd_to_£nd
 >= 0)

26 i‡(
	`io˘l
(
fd
, 
I_SENDFD
, 
fd_to_£nd
) < 0)

29 
	}
}

	@streams/servaccept.c

1 
	~"≠ue.h
"

2 
	~<°r›ts.h
>

10 
	$£rv_ac˚±
(
li°ífd
, 
uid_t
 *
uid±r
)

12 
°ºecvfd
 
ªcvfd
;

14 i‡(
	`io˘l
(
li°ífd
, 
I_RECVFD
, &
ªcvfd
) < 0)

16 i‡(
uid±r
 !
NULL
)

17 *
uid±r
 = 
ªcvfd
.
uid
;

18 (
ªcvfd
.
fd
);

19 
	}
}

	@streams/servlisten.c

1 
	~"≠ue.h
"

2 
	~<f˙é.h
>

3 
	~<°r›ts.h
>

6 
	#FIFO_MODE
 (
S_IRUSR
|
S_IWUSR
|
S_IRGRP
|
S_IWGRP
|
S_IROTH
|
S_IWOTH
)

	)

13 
	$£rv_li°í
(c⁄° *
«me
)

15 
ãmpfd
;

16 
fd
[2];

21 
	`u∆ök
(
«me
);

22 i‡((
ãmpfd
 = 
	`¸ót
(
«me
, 
FIFO_MODE
)) < 0)

24 i‡(
	`˛o£
(
ãmpfd
) < 0)

26 i‡(
	`pùe
(
fd
) < 0)

31 i‡(
	`io˘l
(
fd
[1], 
I_PUSH
, "connld") < 0) {

32 
	`˛o£
(
fd
[0]);

33 
	`˛o£
(
fd
[1]);

36 i‡(
	`Áâach
(
fd
[1], 
«me
) < 0) {

37 
	`˛o£
(
fd
[0]);

38 
	`˛o£
(
fd
[1]);

41 
	`˛o£
(
fd
[1]);

43 (
fd
[0]);

44 
	}
}

	@streams/spipe.c

1 
	~"≠ue.h
"

8 
	$s_pùe
(
fd
[2])

10 (
	`pùe
(
fd
));

11 
	}
}

	@streams/strlist.c

1 
	~"≠ue.h
"

2 
	~<f˙é.h
>

3 
	~<°r›ts.h
>

4 
	~<sys/c⁄f.h
>

7 
	$maö
(
¨gc
, *
¨gv
[])

9 
fd
, 
i
, 
nmods
;

10 
°r_li°
 
li°
;

12 i‡(
¨gc
 != 2)

13 
	`îr_quô
("ußge: %†<∑th«me>", 
¨gv
[0]);

15 i‡((
fd
 = 
	`›í
(
¨gv
[1], 
O_RDONLY
)) < 0)

16 
	`îr_sys
("ˇn'à›í %s", 
¨gv
[1]);

17 i‡(
	`iß°ªam
(
fd
) == 0)

18 
	`îr_quô
("%†i†nŸá såóm", 
¨gv
[1]);

23 i‡((
nmods
 = 
	`io˘l
(
fd
, 
I_LIST
, (*) 0)) < 0)

24 
	`îr_sys
("I_LISTÉrror forÇmods");

25 
	`¥ötf
("#moduÀ†%d\n", 
nmods
);

30 
li°
.
¶_modli°
 = 
	`ˇŒoc
(
nmods
, (
°r_mli°
));

31 i‡(
li°
.
¶_modli°
 =
NULL
)

32 
	`îr_sys
("callocÉrror");

33 
li°
.
¶_nmods
 = 
nmods
;

38 i‡(
	`io˘l
(
fd
, 
I_LIST
, &
li°
) < 0)

39 
	`îr_sys
("I_LISTÉrror forÜist");

44 
i
 = 1; i <
nmods
; i++)

45 
	`¥ötf
(" %s: %s\n", (
i
 =
nmods
) ? "driver" : "module",

46 
li°
.
¶_modli°
++->
l_«me
);

48 
	`exô
(0);

49 
	}
}

	@streams/t_isastream.c

1 
	~"≠ue.h
"

2 
	~<f˙é.h
>

5 
	$maö
(
¨gc
, *
¨gv
[])

7 
i
, 
fd
;

9 
i
 = 1; i < 
¨gc
; i++) {

10 i‡((
fd
 = 
	`›í
(
¨gv
[
i
], 
O_RDONLY
)) < 0) {

11 
	`îr_ªt
("%s: c™'à›í", 
¨gv
[
i
]);

15 i‡(
	`iß°ªam
(
fd
) == 0)

16 
	`îr_ªt
("%s:ÇŸá såóm", 
¨gv
[
i
]);

18 
	`îr_msg
("%s: såóm†devi˚", 
¨gv
[
i
]);

21 
	`exô
(0);

22 
	}
}

	@termios/csize.c

1 
	~"≠ue.h
"

2 
	~<ãrmios.h
>

5 
	$maö
()

7 
ãrmios
 
ãrm
;

9 i‡(
	`tcgë©å
(
STDIN_FILENO
, &
ãrm
) < 0)

10 
	`îr_sys
("tcgetattrÉrror");

12 
ãrm
.
c_cÊag
 & 
CSIZE
) {

13 
CS5
:

14 
	`¥ötf
("5 bits/byte\n");

16 
CS6
:

17 
	`¥ötf
("6 bits/byte\n");

19 
CS7
:

20 
	`¥ötf
("7 bits/byte\n");

22 
CS8
:

23 
	`¥ötf
("8 bits/byte\n");

26 
	`¥ötf
("unknown bits/byte\n");

29 
ãrm
.
c_cÊag
 &~
CSIZE
;

30 
ãrm
.
c_cÊag
 |
CS8
;

31 i‡(
	`tc£èâr
(
STDIN_FILENO
, 
TCSANOW
, &
ãrm
) < 0)

32 
	`îr_sys
("tcsetattrÉrror");

34 
	`exô
(0);

35 
	}
}

	@termios/ctermid.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

4 
	g˘îmid_«me
[
L_˘îmid
];

7 
	$˘îmid
(*
°r
)

9 i‡(
°r
 =
NULL
)

10 
°r
 = 
˘îmid_«me
;

11 (
	`°r˝y
(
°r
, "/dev/tty"));

12 
	}
}

	@termios/getpass.c

1 
	~<sig«l.h
>

2 
	~<°dio.h
>

3 
	~<ãrmios.h
>

5 
	#MAX_PASS_LEN
 8

	)

8 
	$gë∑ss
(c⁄° *
¥om±
)

10 
buf
[
MAX_PASS_LEN
 + 1];

11 *
±r
;

12 
sig£t_t
 
sig
, 
osig
;

13 
ãrmios
 
ts
, 
Ÿs
;

14 
FILE
 *
Â
;

15 
c
;

17 i‡((
Â
 = 
	`f›í
(
	`˘îmid
(
NULL
), "r+")) == NULL)

18 (
NULL
);

19 
	`£tbuf
(
Â
, 
NULL
);

21 
	`sigem±y£t
(&
sig
);

22 
	`sigadd£t
(&
sig
, 
SIGINT
);

23 
	`sigadd£t
(&
sig
, 
SIGTSTP
);

24 
	`sig¥ocmask
(
SIG_BLOCK
, &
sig
, &
osig
);

26 
	`tcgë©å
(
	`fûío
(
Â
), &
ts
);

27 
Ÿs
 = 
ts
;

28 
ts
.
c_lÊag
 &~(
ECHO
 | 
ECHOE
 | 
ECHOK
 | 
ECHONL
);

29 
	`tc£èâr
(
	`fûío
(
Â
), 
TCSAFLUSH
, &
ts
);

30 
	`Âuts
(
¥om±
, 
Â
);

32 
±r
 = 
buf
;

33 (
c
 = 
	`gëc
(
Â
)Ë!
EOF
 && c != '\n')

34 i‡(
±r
 < &
buf
[
MAX_PASS_LEN
])

35 *
±r
++ = 
c
;

36 *
±r
 = 0;

37 
	`putc
('\n', 
Â
);

39 
	`tc£èâr
(
	`fûío
(
Â
), 
TCSAFLUSH
, &
Ÿs
);

40 
	`sig¥ocmask
(
SIG_SETMASK
, &
osig
, 
NULL
);

41 
	`f˛o£
(
Â
);

42 (
buf
);

43 
	}
}

	@termios/isatty.c

1 
	~<ãrmios.h
>

4 
	$ißây
(
fd
)

6 
ãrmios
 
ts
;

8 (
	`tcgë©å
(
fd
, &
ts
) != -1);

9 
	}
}

	@termios/settty.c

1 
	~"≠ue.h
"

2 
	~<ãrmios.h
>

5 
	$maö
()

7 
ãrmios
 
ãrm
;

8 
vdißbÀ
;

10 i‡(
	`ißây
(
STDIN_FILENO
) == 0)

11 
	`îr_quô
("standard input isÇotáÅerminal device");

13 i‡((
vdißbÀ
 = 
	`Â©hc⁄f
(
STDIN_FILENO
, 
_PC_VDISABLE
)) < 0)

14 
	`îr_quô
("fpathconfÉrror or _POSIX_VDISABLEÇot inÉffect");

16 i‡(
	`tcgë©å
(
STDIN_FILENO
, &
ãrm
) < 0)

17 
	`îr_sys
("tcgetattrÉrror");

19 
ãrm
.
c_cc
[
VINTR
] = 
vdißbÀ
;

20 
ãrm
.
c_cc
[
VEOF
] = 2;

22 i‡(
	`tc£èâr
(
STDIN_FILENO
, 
TCSAFLUSH
, &
ãrm
) < 0)

23 
	`îr_sys
("tcsetattrÉrror");

25 
	`exô
(0);

26 
	}
}

	@termios/t_getpass.c

1 
	~"≠ue.h
"

3 *
gë∑ss
(const *);

6 
	$maö
()

8 *
±r
;

10 i‡((
±r
 = 
	`gë∑ss
("E¡îÖassw‹d:")Ë=
NULL
)

11 
	`îr_sys
("getpassÉrror");

12 
	`¥ötf
("∑ssw‹d: %s\n", 
±r
);

16 *
±r
 != 0)

17 *
±r
++ = 0;

18 
	`exô
(0);

19 
	}
}

	@termios/t_isatty.c

1 
	~"≠ue.h
"

4 
	$maö
()

6 
	`¥ötf
("fd 0: %s\n", 
	`ißây
(0) ? "tty" : "notáÅty");

7 
	`¥ötf
("fd 1: %s\n", 
	`ißây
(1) ? "tty" : "notáÅty");

8 
	`¥ötf
("fd 2: %s\n", 
	`ißây
(2) ? "tty" : "notáÅty");

9 
	`exô
(0);

10 
	}
}

	@termios/t_raw.c

1 
	~"≠ue.h
"

4 
	$sig_ˇtch
(
signo
)

6 
	`¥ötf
("signal caught\n");

7 
	`ây_ª£t
(
STDIN_FILENO
);

8 
	`exô
(0);

9 
	}
}

12 
	$maö
()

14 
i
;

15 
c
;

17 i‡(
	`sig«l
(
SIGINT
, 
sig_ˇtch
Ë=
SIG_ERR
)

18 
	`îr_sys
("signal(SIGINT)Érror");

19 i‡(
	`sig«l
(
SIGQUIT
, 
sig_ˇtch
Ë=
SIG_ERR
)

20 
	`îr_sys
("signal(SIGQUIT)Érror");

21 i‡(
	`sig«l
(
SIGTERM
, 
sig_ˇtch
Ë=
SIG_ERR
)

22 
	`îr_sys
("signal(SIGTERM)Érror");

24 i‡(
	`ây_øw
(
STDIN_FILENO
) < 0)

25 
	`îr_sys
("tty_rawÉrror");

26 
	`¥ötf
("EnterÑaw mode characters,Åerminate with DELETE\n");

27 (
i
 = 
	`ªad
(
STDIN_FILENO
, &
c
, 1)) == 1) {

28 i‡((
c
 &= 255) == 0177)

30 
	`¥ötf
("%o\n", 
c
);

32 i‡(
	`ây_ª£t
(
STDIN_FILENO
) < 0)

33 
	`îr_sys
("tty_resetÉrror");

34 i‡(
i
 <= 0)

35 
	`îr_sys
("readÉrror");

36 i‡(
	`ây_cbªak
(
STDIN_FILENO
) < 0)

37 
	`îr_sys
("tty_cbreakÉrror");

38 
	`¥ötf
("\nEnter cbreak mode characters,Åerminate with SIGINT\n");

39 (
i
 = 
	`ªad
(
STDIN_FILENO
, &
c
, 1)) == 1) {

40 
c
 &= 255;

41 
	`¥ötf
("%o\n", 
c
);

43 i‡(
	`ây_ª£t
(
STDIN_FILENO
) < 0)

44 
	`îr_sys
("tty_resetÉrror");

45 i‡(
i
 <= 0)

46 
	`îr_sys
("readÉrror");

48 
	`exô
(0);

49 
	}
}

	@termios/t_ttyname.c

1 
	~"≠ue.h
"

4 
	$maö
()

6 *
«me
;

7 i‡(
	`ißây
(0)) {

8 
«me
 = 
	`ây«me
(0);

9 i‡(
«me
 =
NULL
)

10 
«me
 = "undefined";

12 
«me
 = "notáÅty";

14 
	`¥ötf
("fd 0: %s\n", 
«me
);

15 i‡(
	`ißây
(1)) {

16 
«me
 = 
	`ây«me
(1);

17 i‡(
«me
 =
NULL
)

18 
«me
 = "undefined";

20 
«me
 = "notáÅty";

22 
	`¥ötf
("fd 1: %s\n", 
«me
);

23 i‡(
	`ißây
(2)) {

24 
«me
 = 
	`ây«me
(2);

25 i‡(
«me
 =
NULL
)

26 
«me
 = "undefined";

28 
«me
 = "notáÅty";

30 
	`¥ötf
("fd 2: %s\n", 
«me
);

31 
	`exô
(0);

32 
	}
}

	@termios/ttyname.c

1 
	~<sys/°©.h
>

2 
	~<dúít.h
>

3 
	~<limôs.h
>

4 
	~<°rög.h
>

5 
	~<ãrmios.h
>

6 
	~<uni°d.h
>

7 
	~<°dlib.h
>

9 
	sdevdú
 {

10 
devdú
 *
	md_√xt
;

11 *
	md_«me
;

14 
devdú
 *
	ghód
;

15 
devdú
 *
	gèû
;

16 
	g∑th«me
[
_POSIX_PATH_MAX
 + 1];

19 
	$add
(*
dú«me
)

21 
devdú
 *
ddp
;

22 
Àn
;

24 
Àn
 = 
	`°æí
(
dú«me
);

29 i‡((
dú«me
[
Àn
-1] == '.') && (dirname[len-2] == '/' ||

30 (
dú«me
[
Àn
-2] == '.' && dirname[len-3] == '/')))

32 i‡(
	`°rcmp
(
dú«me
, "/dev/fd") == 0)

34 
ddp
 = 
	`mÆloc
((
devdú
));

35 i‡(
ddp
 =
NULL
)

38 
ddp
->
d_«me
 = 
	`°rdup
(
dú«me
);

39 i‡(
ddp
->
d_«me
 =
NULL
) {

40 
	`‰ì
(
ddp
);

43 
ddp
->
d_√xt
 = 
NULL
;

44 i‡(
èû
 =
NULL
) {

45 
hód
 = 
ddp
;

46 
èû
 = 
ddp
;

48 
èû
->
d_√xt
 = 
ddp
;

49 
èû
 = 
ddp
;

51 
	}
}

54 
	$˛ónup
()

56 
devdú
 *
ddp
, *
nddp
;

58 
ddp
 = 
hód
;

59 
ddp
 !
NULL
) {

60 
nddp
 = 
ddp
->
d_√xt
;

61 
	`‰ì
(
ddp
->
d_«me
);

62 
	`‰ì
(
ddp
);

63 
ddp
 = 
nddp
;

65 
hód
 = 
NULL
;

66 
èû
 = 
NULL
;

67 
	}
}

70 
	$£¨chdú
(*
dú«me
, 
°©
 *
fd°©p
)

72 
°©
 
dev°©
;

73 
DIR
 *
dp
;

74 
devÀn
;

75 
dúít
 *
dúp
;

77 
	`°r˝y
(
∑th«me
, 
dú«me
);

78 i‡((
dp
 = 
	`›ídú
(
dú«me
)Ë=
NULL
)

79 (
NULL
);

80 
	`°rˇt
(
∑th«me
, "/");

81 
devÀn
 = 
	`°æí
(
∑th«me
);

82 (
dúp
 = 
	`ªaddú
(
dp
)Ë!
NULL
) {

83 
	`°∫˝y
(
∑th«me
 + 
devÀn
, 
dúp
->
d_«me
,

84 
_POSIX_PATH_MAX
 - 
devÀn
);

89 i‡(
	`°rcmp
(
∑th«me
, "/dev/stdin") == 0 ||

90 
	`°rcmp
(
∑th«me
, "/dev/stdout") == 0 ||

91 
	`°rcmp
(
∑th«me
, "/dev/stderr") == 0)

93 i‡(
	`°©
(
∑th«me
, &
dev°©
) < 0)

95 i‡(
	`S_ISDIR
(
dev°©
.
°_mode
)) {

96 
	`add
(
∑th«me
);

99 i‡(
dev°©
.
°_öo
 =
fd°©p
->st_ino &&

100 
dev°©
.
°_dev
 =
fd°©p
->st_dev) {

101 
	`˛o£dú
(
dp
);

102 (
∑th«me
);

106 
	`˛o£dú
(
dp
);

107 (
NULL
);

108 
	}
}

111 
	$ây«me
(
fd
)

113 
°©
 
fd°©
;

114 
devdú
 *
ddp
;

115 *
rvÆ
;

117 i‡(
	`ißây
(
fd
) == 0)

118 (
NULL
);

119 i‡(
	`f°©
(
fd
, &
fd°©
) < 0)

120 (
NULL
);

121 i‡(
	`S_ISCHR
(
fd°©
.
°_mode
) == 0)

122 (
NULL
);

124 
rvÆ
 = 
	`£¨chdú
("/dev", &
fd°©
);

125 i‡(
rvÆ
 =
NULL
) {

126 
ddp
 = 
hód
; dd∞!
NULL
; dd∞ddp->
d_√xt
)

127 i‡((
rvÆ
 = 
	`£¨chdú
(
ddp
->
d_«me
, &
fd°©
)Ë!
NULL
)

131 
	`˛ónup
();

132 (
rvÆ
);

133 
	}
}

	@termios/winch.c

1 
	~"≠ue.h
"

2 
	~<ãrmios.h
>

3 #i‚def 
TIOCGWINSZ


4 
	~<sys/io˘l.h
>

8 
	$¥_wösize
(
fd
)

10 
wösize
 
size
;

12 i‡(
	`io˘l
(
fd
, 
TIOCGWINSZ
, (*Ë&
size
) < 0)

13 
	`îr_sys
("TIOCGWINSZÉrror");

14 
	`¥ötf
("%dÑows, %d cﬁumns\n", 
size
.
ws_row
, size.
ws_cﬁ
);

15 
	}
}

18 
	$sig_wöch
(
signo
)

20 
	`¥ötf
("SIGWINCHÑeceived\n");

21 
	`¥_wösize
(
STDIN_FILENO
);

22 
	}
}

25 
	$maö
()

27 i‡(
	`ißây
(
STDIN_FILENO
) == 0)

28 
	`exô
(1);

29 i‡(
	`sig«l
(
SIGWINCH
, 
sig_wöch
Ë=
SIG_ERR
)

30 
	`îr_sys
("signalÉrror");

31 
	`¥_wösize
(
STDIN_FILENO
);

33 
	`∑u£
();

34 
	}
}

	@threadctl/atfork.c

1 
	~"≠ue.h
"

2 
	~<±hªad.h
>

4 
±hªad_muãx_t
 
	glock1
 = 
PTHREAD_MUTEX_INITIALIZER
;

5 
±hªad_muãx_t
 
	glock2
 = 
PTHREAD_MUTEX_INITIALIZER
;

8 
	$¥ï¨e
()

10 
	`¥ötf
("preparingÜocks...\n");

11 
	`±hªad_muãx_lock
(&
lock1
);

12 
	`±hªad_muãx_lock
(&
lock2
);

13 
	}
}

16 
	$∑ª¡
()

18 
	`¥ötf
("parent unlockingÜocks...\n");

19 
	`±hªad_muãx_u∆ock
(&
lock1
);

20 
	`±hªad_muãx_u∆ock
(&
lock2
);

21 
	}
}

24 
	$chûd
()

26 
	`¥ötf
("child unlockingÜocks...\n");

27 
	`±hªad_muãx_u∆ock
(&
lock1
);

28 
	`±hªad_muãx_u∆ock
(&
lock2
);

29 
	}
}

32 
	$thr_‚
(*
¨g
)

34 
	`¥ötf
("thread started...\n");

35 
	`∑u£
();

37 
	}
}

40 
	$maö
()

42 
îr
;

43 
pid_t
 
pid
;

44 
±hªad_t
 
tid
;

46 #i‡
	`deföed
(
BSD
Ë|| deföed(
MACOS
)

47 
	`¥ötf
("pthread_atfork is unsupported\n");

49 i‡((
îr
 = 
	`±hªad_©f‹k
(
¥ï¨e
, 
∑ª¡
, 
chûd
)) != 0)

50 
	`îr_exô
(
îr
, "can't install fork handlers");

51 
îr
 = 
	`±hªad_¸óã
(&
tid
, 
NULL
, 
thr_‚
, 0);

52 i‡(
îr
 != 0)

53 
	`îr_exô
(
îr
, "can't createÅhread");

54 
	`¶ìp
(2);

55 
	`¥ötf
("parentáboutÅo fork...\n");

56 i‡((
pid
 = 
	`f‹k
()) < 0)

57 
	`îr_quô
("fork failed");

58 i‡(
pid
 == 0)

59 
	`¥ötf
("childÑeturned from fork\n");

61 
	`¥ötf
("parentÑeturned from fork\n");

63 
	`exô
(0);

64 
	}
}

	@threadctl/detach.c

1 
	~"≠ue.h
"

2 
	~<±hªad.h
>

5 
makëhªad
(*(*
‚
)(*), *
¨g
)

7 
	gîr
;

8 
±hªad_t
 
	gtid
;

9 
±hªad_©å_t
 
	g©å
;

11 
	gîr
 = 
±hªad_©å_öô
(&
©å
);

12 i‡(
	gîr
 != 0)

13 (
îr
);

14 
	gîr
 = 
±hªad_©å_£tdëach°©e
(&
©å
, 
PTHREAD_CREATE_DETACHED
);

15 i‡(
	gîr
 == 0)

16 
îr
 = 
±hªad_¸óã
(&
tid
, &
©å
, 
‚
, 
¨g
);

17 
±hªad_©å_de°roy
(&
©å
);

18 (
	gîr
);

	@threadctl/getenv1.c

1 
	~<limôs.h
>

2 
	~<°rög.h
>

4 
	gívbuf
[
ARG_MAX
];

6 **
ívú⁄
;

9 
	$gëív
(c⁄° *
«me
)

11 
i
, 
Àn
;

13 
Àn
 = 
	`°æí
(
«me
);

14 
i
 = 0; 
ívú⁄
[i] !
NULL
; i++) {

15 i‡((
	`°∫cmp
(
«me
, 
ívú⁄
[
i
], 
Àn
) == 0) &&

16 (
ívú⁄
[
i
][
Àn
] == '=')) {

17 
	`°r˝y
(
ívbuf
, &
ívú⁄
[
i
][
Àn
+1]);

18 (
ívbuf
);

21 (
NULL
);

22 
	}
}

	@threadctl/getenv2.c

1 
	~<°rög.h
>

2 
	~<î∫o.h
>

3 
	~<±hªad.h
>

4 
	~<°dlib.h
>

6 **
ívú⁄
;

8 
±hªad_muãx_t
 
	gív_muãx
;

9 
±hªad_⁄˚_t
 
	göô_d⁄e
 = 
PTHREAD_ONCE_INIT
;

12 
	$thªad_öô
()

14 
±hªad_muãx©å_t
 
©å
;

16 
	`±hªad_muãx©å_öô
(&
©å
);

17 
	`±hªad_muãx©å_£ây≥
(&
©å
, 
PTHREAD_MUTEX_RECURSIVE
);

18 
	`±hªad_muãx_öô
(&
ív_muãx
, &
©å
);

19 
	`±hªad_muãx©å_de°roy
(&
©å
);

20 
	}
}

23 
	$gëív_r
(c⁄° *
«me
, *
buf
, 
buÊí
)

25 
i
, 
Àn
, 
ﬁí
;

27 
	`±hªad_⁄˚
(&
öô_d⁄e
, 
thªad_öô
);

28 
Àn
 = 
	`°æí
(
«me
);

29 
	`±hªad_muãx_lock
(&
ív_muãx
);

30 
i
 = 0; 
ívú⁄
[i] !
NULL
; i++) {

31 i‡((
	`°∫cmp
(
«me
, 
ívú⁄
[
i
], 
Àn
) == 0) &&

32 (
ívú⁄
[
i
][
Àn
] == '=')) {

33 
ﬁí
 = 
	`°æí
(&
ívú⁄
[
i
][
Àn
+1]);

34 i‡(
ﬁí
 >
buÊí
) {

35 
	`±hªad_muãx_u∆ock
(&
ív_muãx
);

36 (
ENOSPC
);

38 
	`°r˝y
(
buf
, &
ívú⁄
[
i
][
Àn
+1]);

39 
	`±hªad_muãx_u∆ock
(&
ív_muãx
);

43 
	`±hªad_muãx_u∆ock
(&
ív_muãx
);

44 (
ENOENT
);

45 
	}
}

	@threadctl/getenv3.c

1 
	~<limôs.h
>

2 
	~<°rög.h
>

3 
	~<±hªad.h
>

4 
	~<°dlib.h
>

6 
±hªad_key_t
 
	gkey
;

7 
±hªad_⁄˚_t
 
	göô_d⁄e
 = 
PTHREAD_ONCE_INIT
;

8 
±hªad_muãx_t
 
	gív_muãx
 = 
PTHREAD_MUTEX_INITIALIZER
;

10 **
ívú⁄
;

13 
	$thªad_öô
()

15 
	`±hªad_key_¸óã
(&
key
, 
‰ì
);

16 
	}
}

19 
	$gëív
(c⁄° *
«me
)

21 
i
, 
Àn
;

22 *
ívbuf
;

24 
	`±hªad_⁄˚
(&
öô_d⁄e
, 
thªad_öô
);

25 
	`±hªad_muãx_lock
(&
ív_muãx
);

26 
ívbuf
 = (*)
	`±hªad_gë•ecific
(
key
);

27 i‡(
ívbuf
 =
NULL
) {

28 
ívbuf
 = 
	`mÆloc
(
ARG_MAX
);

29 i‡(
ívbuf
 =
NULL
) {

30 
	`±hªad_muãx_u∆ock
(&
ív_muãx
);

31 (
NULL
);

33 
	`±hªad_£t•ecific
(
key
, 
ívbuf
);

35 
Àn
 = 
	`°æí
(
«me
);

36 
i
 = 0; 
ívú⁄
[i] !
NULL
; i++) {

37 i‡((
	`°∫cmp
(
«me
, 
ívú⁄
[
i
], 
Àn
) == 0) &&

38 (
ívú⁄
[
i
][
Àn
] == '=')) {

39 
	`°r˝y
(
ívbuf
, &
ívú⁄
[
i
][
Àn
+1]);

40 
	`±hªad_muãx_u∆ock
(&
ív_muãx
);

41 (
ívbuf
);

44 
	`±hªad_muãx_u∆ock
(&
ív_muãx
);

45 (
NULL
);

46 
	}
}

	@threadctl/suspend.c

1 
	~"≠ue.h
"

2 
	~<±hªad.h
>

4 
	gquôÊag
;

5 
sig£t_t
 
	gmask
;

7 
±hªad_muãx_t
 
	glock
 = 
PTHREAD_MUTEX_INITIALIZER
;

8 
±hªad_c⁄d_t
 
	gwaôloc
 = 
PTHREAD_COND_INITIALIZER
;

11 
	$thr_‚
(*
¨g
)

13 
îr
, 
signo
;

16 
îr
 = 
	`sigwaô
(&
mask
, &
signo
);

17 i‡(
îr
 != 0)

18 
	`îr_exô
(
îr
, "sigwait failed");

19 
signo
) {

20 
SIGINT
:

21 
	`¥ötf
("\ninterrupt\n");

24 
SIGQUIT
:

25 
	`±hªad_muãx_lock
(&
lock
);

26 
quôÊag
 = 1;

27 
	`±hªad_muãx_u∆ock
(&
lock
);

28 
	`±hªad_c⁄d_sig«l
(&
waôloc
);

32 
	`¥ötf
("u√x≥˘ed sig«»%d\n", 
signo
);

33 
	`exô
(1);

36 
	}
}

39 
	$maö
()

41 
îr
;

42 
sig£t_t
 
ﬁdmask
;

43 
±hªad_t
 
tid
;

45 
	`sigem±y£t
(&
mask
);

46 
	`sigadd£t
(&
mask
, 
SIGINT
);

47 
	`sigadd£t
(&
mask
, 
SIGQUIT
);

48 i‡((
îr
 = 
	`±hªad_sigmask
(
SIG_BLOCK
, &
mask
, &
ﬁdmask
)) != 0)

49 
	`îr_exô
(
îr
, "SIG_BLOCKÉrror");

51 
îr
 = 
	`±hªad_¸óã
(&
tid
, 
NULL
, 
thr_‚
, 0);

52 i‡(
îr
 != 0)

53 
	`îr_exô
(
îr
, "can't createÅhread");

55 
	`±hªad_muãx_lock
(&
lock
);

56 
quôÊag
 == 0)

57 
	`±hªad_c⁄d_waô
(&
waôloc
, &
lock
);

58 
	`±hªad_muãx_u∆ock
(&
lock
);

61 
quôÊag
 = 0;

64 i‡(
	`sig¥ocmask
(
SIG_SETMASK
, &
ﬁdmask
, 
NULL
) < 0)

65 
	`îr_sys
("SIG_SETMASKÉrror");

66 
	`exô
(0);

67 
	}
}

	@threadctl/timeout.c

1 
	~"≠ue.h
"

2 
	~<±hªad.h
>

3 
	~<time.h
>

4 
	~<sys/time.h
>

6 
makëhªad
(*(*)(*), *);

8 
	sto_öfo
 {

9 (*
	mto_‚
)(*);

10 *
	mto_¨g
;

11 
time•ec
 
	mto_waô
;

14 
	#SECTONSEC
 1000000000

	)

15 
	#USECTONSEC
 1000

	)

18 
	$timeout_hñ≥r
(*
¨g
)

20 
to_öfo
 *
tù
;

22 
tù
 = (
to_öfo
 *)
¨g
;

23 
	`«no¶ìp
(&
tù
->
to_waô
, 
NULL
);

24 (*
tù
->
to_‚
)—ù->
to_¨g
);

26 
	}
}

29 
timeout
(c⁄° 
time•ec
 *
whí
, (*
func
)(*), *
¨g
)

31 
time•ec
 
now
;

32 
timevÆ
 
tv
;

33 
to_öfo
 *
tù
;

34 
îr
;

36 
	`gëtimeofday
(&
tv
, 
NULL
);

37 
now
.
tv_£c
 = 
tv
.tv_sec;

38 
now
.
tv_n£c
 = 
tv
.
tv_u£c
 * 
USECTONSEC
;

39 i‡((
whí
->
tv_£c
 > 
now
.tv_sec) ||

40 (
whí
->
tv_£c
 =
now
.tv_£¯&& whí->
tv_n£c
 >Çow.tv_nsec)) {

41 
tù
 = 
	`mÆloc
((
to_öfo
));

42 i‡(
tù
 !
NULL
) {

43 
tù
->
to_‚
 = 
func
;

44 
tù
->
to_¨g
 = 
¨g
;

45 
tù
->
to_waô
.
tv_£c
 = 
whí
->tv_£¯- 
now
.tv_sec;

46 i‡(
whí
->
tv_n£c
 >
now
.tv_nsec) {

47 
tù
->
to_waô
.
tv_n£c
 = 
whí
->tv_n£¯- 
now
.tv_nsec;

49 
tù
->
to_waô
.
tv_£c
--;

50 
tù
->
to_waô
.
tv_n£c
 = 
SECTONSEC
 - 
now
.tv_nsec +

51 
whí
->
tv_n£c
;

53 
îr
 = 
	`makëhªad
(
timeout_hñ≥r
, (*)
tù
);

54 i‡(
îr
 == 0)

63 (*
func
)(
¨g
);

64 
	}
}

66 
±hªad_muãx©å_t
 
	g©å
;

67 
±hªad_muãx_t
 
	gmuãx
;

70 
	$ªåy
(*
¨g
)

72 
	`±hªad_muãx_lock
(&
muãx
);

74 
	`±hªad_muãx_u∆ock
(&
muãx
);

75 
	}
}

78 
	$maö
()

80 
îr
, 
c⁄dôi⁄
, 
¨g
;

81 
time•ec
 
whí
;

83 i‡((
îr
 = 
	`±hªad_muãx©å_öô
(&
©å
)) != 0)

84 
	`îr_exô
(
îr
, "pthread_mutexattr_init failed");

85 i‡((
îr
 = 
	`±hªad_muãx©å_£ây≥
(&
©å
,

86 
PTHREAD_MUTEX_RECURSIVE
)) != 0)

87 
	`îr_exô
(
îr
, "can't setÑecursiveÅype");

88 i‡((
îr
 = 
	`±hªad_muãx_öô
(&
muãx
, &
©å
)) != 0)

89 
	`îr_exô
(
îr
, "can't createÑecursive mutex");

91 
	`±hªad_muãx_lock
(&
muãx
);

93 i‡(
c⁄dôi⁄
) {

95 
	`timeout
(&
whí
, 
ªåy
, (*)
¨g
);

98 
	`±hªad_muãx_u∆ock
(&
muãx
);

100 
	`exô
(0);

101 
	}
}

	@threads/badexit2.c

1 
	~"≠ue.h
"

2 
	~<±hªad.h
>

4 
	sfoo
 {

5 
	ma
, 
	mb
, 
	mc
, 
	md
;

9 
	$¥ötfoo
(c⁄° *
s
, c⁄° 
foo
 *
Â
)

11 
	`¥ötf
(
s
);

12 
	`¥ötf
(" såu˘uªáà0x%x\n", ()
Â
);

13 
	`¥ötf
(" foo.®%d\n", 
Â
->
a
);

14 
	`¥ötf
(" foo.b = %d\n", 
Â
->
b
);

15 
	`¥ötf
(" foo.¯%d\n", 
Â
->
c
);

16 
	`¥ötf
(" foo.d = %d\n", 
Â
->
d
);

17 
	}
}

20 
	$thr_‚1
(*
¨g
)

22 
foo
 foo = {1, 2, 3, 4};

24 
	`¥ötfoo
("thªad 1:\n", &
foo
);

25 
	`±hªad_exô
((*)&
foo
);

26 
	}
}

29 
	$thr_‚2
(*
¨g
)

31 
	`¥ötf
("thªad 2: ID i†%d\n", 
	`±hªad_£lf
());

32 
	`±hªad_exô
((*)0);

33 
	}
}

36 
	$maö
()

38 
îr
;

39 
±hªad_t
 
tid1
, 
tid2
;

40 
foo
 *
Â
;

42 
îr
 = 
	`±hªad_¸óã
(&
tid1
, 
NULL
, 
thr_‚1
, NULL);

43 i‡(
îr
 != 0)

44 
	`îr_quô
("ˇn'à¸óãÅhªad 1: %s\n", 
	`°ªº‹
(
îr
));

45 
îr
 = 
	`±hªad_joö
(
tid1
, (*)&
Â
);

46 i‡(
îr
 != 0)

47 
	`îr_quô
("ˇn'àjoö wôhÅhªad 1: %s\n", 
	`°ªº‹
(
îr
));

48 
	`¶ìp
(1);

49 
	`¥ötf
("parent starting secondÅhread\n");

50 
îr
 = 
	`±hªad_¸óã
(&
tid2
, 
NULL
, 
thr_‚2
, NULL);

51 i‡(
îr
 != 0)

52 
	`îr_quô
("ˇn'à¸óãÅhªad 2: %s\n", 
	`°ªº‹
(
îr
));

53 
	`¶ìp
(1);

54 
	`¥ötfoo
("∑ª¡:\n", 
Â
);

55 
	`exô
(0);

56 
	}
}

	@threads/cleanup.c

1 
	~"≠ue.h
"

2 
	~<±hªad.h
>

5 
	$˛ónup
(*
¨g
)

7 
	`¥ötf
("˛ónup: %s\n", (*)
¨g
);

8 
	}
}

11 
	$thr_‚1
(*
¨g
)

13 
	`¥ötf
("thread 1 start\n");

14 
	`±hªad_˛ónup_push
(
˛ónup
, "thread 1 first handler");

15 
	`±hªad_˛ónup_push
(
˛ónup
, "thread 1 second handler");

16 
	`¥ötf
("thread 1Öush complete\n");

17 i‡(
¨g
)

19 
	`±hªad_˛ónup_p›
(0);

20 
	`±hªad_˛ónup_p›
(0);

22 
	}
}

25 
	$thr_‚2
(*
¨g
)

27 
	`¥ötf
("thread 2 start\n");

28 
	`±hªad_˛ónup_push
(
˛ónup
, "thread 2 first handler");

29 
	`±hªad_˛ónup_push
(
˛ónup
, "thread 2 second handler");

30 
	`¥ötf
("thread 2Öush complete\n");

31 i‡(
¨g
)

32 
	`±hªad_exô
((*)2);

33 
	`±hªad_˛ónup_p›
(0);

34 
	`±hªad_˛ónup_p›
(0);

35 
	`±hªad_exô
((*)2);

36 
	}
}

39 
	$maö
()

41 
îr
;

42 
±hªad_t
 
tid1
, 
tid2
;

43 *
åë
;

45 
îr
 = 
	`±hªad_¸óã
(&
tid1
, 
NULL
, 
thr_‚1
, (*)1);

46 i‡(
îr
 != 0)

47 
	`îr_quô
("ˇn'à¸óãÅhªad 1: %s\n", 
	`°ªº‹
(
îr
));

48 
îr
 = 
	`±hªad_¸óã
(&
tid2
, 
NULL
, 
thr_‚2
, (*)1);

49 i‡(
îr
 != 0)

50 
	`îr_quô
("ˇn'à¸óãÅhªad 2: %s\n", 
	`°ªº‹
(
îr
));

51 
îr
 = 
	`±hªad_joö
(
tid1
, &
åë
);

52 i‡(
îr
 != 0)

53 
	`îr_quô
("ˇn'àjoö wôhÅhªad 1: %s\n", 
	`°ªº‹
(
îr
));

54 
	`¥ötf
("thªad 1Éxô codê%d\n", ()
åë
);

55 
îr
 = 
	`±hªad_joö
(
tid2
, &
åë
);

56 i‡(
îr
 != 0)

57 
	`îr_quô
("ˇn'àjoö wôhÅhªad 2: %s\n", 
	`°ªº‹
(
îr
));

58 
	`¥ötf
("thªad 2Éxô codê%d\n", ()
åë
);

59 
	`exô
(0);

60 
	}
}

	@threads/condvar.c

1 
	~<±hªad.h
>

3 
	smsg
 {

4 
msg
 *
	mm_√xt
;

8 
msg
 *
	gw‹kq
;

9 
±hªad_c⁄d_t
 
	gqªady
 = 
PTHREAD_COND_INITIALIZER
;

10 
±hªad_muãx_t
 
	gqlock
 = 
PTHREAD_MUTEX_INITIALIZER
;

13 
	$¥o˚ss_msg
()

15 
msg
 *
mp
;

18 
	`±hªad_muãx_lock
(&
qlock
);

19 
w‹kq
 =
NULL
)

20 
	`±hªad_c⁄d_waô
(&
qªady
, &
qlock
);

21 
mp
 = 
w‹kq
;

22 
w‹kq
 = 
mp
->
m_√xt
;

23 
	`±hªad_muãx_u∆ock
(&
qlock
);

26 
	}
}

29 
	$íqueue_msg
(
msg
 *
mp
)

31 
	`±hªad_muãx_lock
(&
qlock
);

32 
mp
->
m_√xt
 = 
w‹kq
;

33 
w‹kq
 = 
mp
;

34 
	`±hªad_muãx_u∆ock
(&
qlock
);

35 
	`±hªad_c⁄d_sig«l
(&
qªady
);

36 
	}
}

	@threads/exitstatus.c

1 
	~"≠ue.h
"

2 
	~<±hªad.h
>

5 
	$thr_‚1
(*
¨g
)

7 
	`¥ötf
("thread 1Ñeturning\n");

9 
	}
}

12 
	$thr_‚2
(*
¨g
)

14 
	`¥ötf
("thread 2Éxiting\n");

15 
	`±hªad_exô
((*)2);

16 
	}
}

19 
	$maö
()

21 
îr
;

22 
±hªad_t
 
tid1
, 
tid2
;

23 *
åë
;

25 
îr
 = 
	`±hªad_¸óã
(&
tid1
, 
NULL
, 
thr_‚1
, NULL);

26 i‡(
îr
 != 0)

27 
	`îr_quô
("ˇn'à¸óãÅhªad 1: %s\n", 
	`°ªº‹
(
îr
));

28 
îr
 = 
	`±hªad_¸óã
(&
tid2
, 
NULL
, 
thr_‚2
, NULL);

29 i‡(
îr
 != 0)

30 
	`îr_quô
("ˇn'à¸óãÅhªad 2: %s\n", 
	`°ªº‹
(
îr
));

31 
îr
 = 
	`±hªad_joö
(
tid1
, &
åë
);

32 i‡(
îr
 != 0)

33 
	`îr_quô
("ˇn'àjoö wôhÅhªad 1: %s\n", 
	`°ªº‹
(
îr
));

34 
	`¥ötf
("thªad 1Éxô codê%d\n", ()
åë
);

35 
îr
 = 
	`±hªad_joö
(
tid2
, &
åë
);

36 i‡(
îr
 != 0)

37 
	`îr_quô
("ˇn'àjoö wôhÅhªad 2: %s\n", 
	`°ªº‹
(
îr
));

38 
	`¥ötf
("thªad 2Éxô codê%d\n", ()
åë
);

39 
	`exô
(0);

40 
	}
}

	@threads/mutex1.c

1 
	~<°dlib.h
>

2 
	~<±hªad.h
>

4 
	sfoo
 {

5 
	mf_cou¡
;

6 
±hªad_muãx_t
 
	mf_lock
;

10 
foo
 *

11 
	$foo_Æloc
()

13 
foo
 *
Â
;

15 i‡((
Â
 = 
	`mÆloc
((
foo
))Ë!
NULL
) {

16 
Â
->
f_cou¡
 = 1;

17 i‡(
	`±hªad_muãx_öô
(&
Â
->
f_lock
, 
NULL
) != 0) {

18 
	`‰ì
(
Â
);

19 (
NULL
);

23 (
Â
);

24 
	}
}

27 
	$foo_hﬁd
(
foo
 *
Â
)

29 
	`±hªad_muãx_lock
(&
Â
->
f_lock
);

30 
Â
->
f_cou¡
++;

31 
	`±hªad_muãx_u∆ock
(&
Â
->
f_lock
);

32 
	}
}

35 
	$foo_ªÀ
(
foo
 *
Â
)

37 
	`±hªad_muãx_lock
(&
Â
->
f_lock
);

38 i‡(--
Â
->
f_cou¡
 == 0) {

39 
	`±hªad_muãx_u∆ock
(&
Â
->
f_lock
);

40 
	`±hªad_muãx_de°roy
(&
Â
->
f_lock
);

41 
	`‰ì
(
Â
);

43 
	`±hªad_muãx_u∆ock
(&
Â
->
f_lock
);

45 
	}
}

	@threads/mutex2.c

1 
	~<°dlib.h
>

2 
	~<±hªad.h
>

4 
	#NHASH
 29

	)

5 
	#HASH
(
Â
Ë((()Â)%
NHASH
)

	)

7 
foo
 *
	gfh
[
NHASH
];

9 
±hªad_muãx_t
 
	ghashlock
 = 
PTHREAD_MUTEX_INITIALIZER
;

11 
	sfoo
 {

12 
	mf_cou¡
;

13 
±hªad_muãx_t
 
	mf_lock
;

14 
foo
 *
	mf_√xt
;

15 
	mf_id
;

19 
foo
 *

20 
	$foo_Æloc
()

22 
foo
 *
Â
;

23 
idx
;

25 i‡((
Â
 = 
	`mÆloc
((
foo
))Ë!
NULL
) {

26 
Â
->
f_cou¡
 = 1;

27 i‡(
	`±hªad_muãx_öô
(&
Â
->
f_lock
, 
NULL
) != 0) {

28 
	`‰ì
(
Â
);

29 (
NULL
);

31 
idx
 = 
	`HASH
(
Â
);

32 
	`±hªad_muãx_lock
(&
hashlock
);

33 
Â
->
f_√xt
 = 
fh
[
idx
];

34 
fh
[
idx
] = 
Â
->
f_√xt
;

35 
	`±hªad_muãx_lock
(&
Â
->
f_lock
);

36 
	`±hªad_muãx_u∆ock
(&
hashlock
);

38 
	`±hªad_muãx_u∆ock
(&
Â
->
f_lock
);

40 (
Â
);

41 
	}
}

44 
	$foo_hﬁd
(
foo
 *
Â
)

46 
	`±hªad_muãx_lock
(&
Â
->
f_lock
);

47 
Â
->
f_cou¡
++;

48 
	`±hªad_muãx_u∆ock
(&
Â
->
f_lock
);

49 
	}
}

51 
foo
 *

52 
	$foo_föd
(
id
)

54 
foo
 *
Â
;

55 
idx
;

57 
idx
 = 
	`HASH
(
Â
);

58 
	`±hªad_muãx_lock
(&
hashlock
);

59 
Â
 = 
fh
[
idx
]; f∞!
NULL
; f∞Â->
f_√xt
) {

60 i‡(
Â
->
f_id
 =
id
) {

61 
	`foo_hﬁd
(
Â
);

65 
	`±hªad_muãx_u∆ock
(&
hashlock
);

66 (
Â
);

67 
	}
}

70 
	$foo_ªÀ
(
foo
 *
Â
)

72 
foo
 *
tÂ
;

73 
idx
;

75 
	`±hªad_muãx_lock
(&
Â
->
f_lock
);

76 i‡(
Â
->
f_cou¡
 == 1) {

77 
	`±hªad_muãx_u∆ock
(&
Â
->
f_lock
);

78 
	`±hªad_muãx_lock
(&
hashlock
);

79 
	`±hªad_muãx_lock
(&
Â
->
f_lock
);

81 i‡(
Â
->
f_cou¡
 != 1) {

82 
Â
->
f_cou¡
--;

83 
	`±hªad_muãx_u∆ock
(&
Â
->
f_lock
);

84 
	`±hªad_muãx_u∆ock
(&
hashlock
);

88 
idx
 = 
	`HASH
(
Â
);

89 
tÂ
 = 
fh
[
idx
];

90 i‡(
tÂ
 =
Â
) {

91 
fh
[
idx
] = 
Â
->
f_√xt
;

93 
tÂ
->
f_√xt
 !
Â
)

94 
tÂ
 =ÅÂ->
f_√xt
;

95 
tÂ
->
f_√xt
 = 
Â
->f_next;

97 
	`±hªad_muãx_u∆ock
(&
hashlock
);

98 
	`±hªad_muãx_u∆ock
(&
Â
->
f_lock
);

99 
	`±hªad_muãx_de°roy
(&
Â
->
f_lock
);

100 
	`‰ì
(
Â
);

102 
Â
->
f_cou¡
--;

103 
	`±hªad_muãx_u∆ock
(&
Â
->
f_lock
);

105 
	}
}

	@threads/mutex3.c

1 
	~<°dlib.h
>

2 
	~<±hªad.h
>

4 
	#NHASH
 29

	)

5 
	#HASH
(
Â
Ë((()Â)%
NHASH
)

	)

7 
foo
 *
	gfh
[
NHASH
];

8 
±hªad_muãx_t
 
	ghashlock
 = 
PTHREAD_MUTEX_INITIALIZER
;

10 
	sfoo
 {

11 
	mf_cou¡
;

12 
±hªad_muãx_t
 
	mf_lock
;

13 
foo
 *
	mf_√xt
;

14 
	mf_id
;

18 
foo
 *

19 
	$foo_Æloc
()

21 
foo
 *
Â
;

22 
idx
;

24 i‡((
Â
 = 
	`mÆloc
((
foo
))Ë!
NULL
) {

25 
Â
->
f_cou¡
 = 1;

26 i‡(
	`±hªad_muãx_öô
(&
Â
->
f_lock
, 
NULL
) != 0) {

27 
	`‰ì
(
Â
);

28 (
NULL
);

30 
idx
 = 
	`HASH
(
Â
);

31 
	`±hªad_muãx_lock
(&
hashlock
);

32 
Â
->
f_√xt
 = 
fh
[
idx
];

33 
fh
[
idx
] = 
Â
->
f_√xt
;

34 
	`±hªad_muãx_lock
(&
Â
->
f_lock
);

35 
	`±hªad_muãx_u∆ock
(&
hashlock
);

38 (
Â
);

39 
	}
}

42 
	$foo_hﬁd
(
foo
 *
Â
)

44 
	`±hªad_muãx_lock
(&
hashlock
);

45 
Â
->
f_cou¡
++;

46 
	`±hªad_muãx_u∆ock
(&
hashlock
);

47 
	}
}

49 
foo
 *

50 
	$foo_föd
(
id
)

52 
foo
 *
Â
;

53 
idx
;

55 
idx
 = 
	`HASH
(
Â
);

56 
	`±hªad_muãx_lock
(&
hashlock
);

57 
Â
 = 
fh
[
idx
]; f∞!
NULL
; f∞Â->
f_√xt
) {

58 i‡(
Â
->
f_id
 =
id
) {

59 
Â
->
f_cou¡
++;

63 
	`±hªad_muãx_u∆ock
(&
hashlock
);

64 (
Â
);

65 
	}
}

68 
	$foo_ªÀ
(
foo
 *
Â
)

70 
foo
 *
tÂ
;

71 
idx
;

73 
	`±hªad_muãx_lock
(&
hashlock
);

74 i‡(--
Â
->
f_cou¡
 == 0) {

75 
idx
 = 
	`HASH
(
Â
);

76 
tÂ
 = 
fh
[
idx
];

77 i‡(
tÂ
 =
Â
) {

78 
fh
[
idx
] = 
Â
->
f_√xt
;

80 
tÂ
->
f_√xt
 !
Â
)

81 
tÂ
 =ÅÂ->
f_√xt
;

82 
tÂ
->
f_√xt
 = 
Â
->f_next;

84 
	`±hªad_muãx_u∆ock
(&
hashlock
);

85 
	`±hªad_muãx_de°roy
(&
Â
->
f_lock
);

86 
	`‰ì
(
Â
);

88 
	`±hªad_muãx_u∆ock
(&
hashlock
);

90 
	}
}

	@threads/rwlock.c

1 
	~<°dlib.h
>

2 
	~<±hªad.h
>

4 
	sjob
 {

5 
job
 *
	mj_√xt
;

6 
job
 *
	mj_¥ev
;

7 
±hªad_t
 
	mj_id
;

11 
	squeue
 {

12 
job
 *
	mq_hód
;

13 
job
 *
	mq_èû
;

14 
±hªad_rwlock_t
 
	mq_lock
;

21 
	$queue_öô
(
queue
 *
qp
)

23 
îr
;

25 
qp
->
q_hód
 = 
NULL
;

26 
qp
->
q_èû
 = 
NULL
;

27 
îr
 = 
	`±hªad_rwlock_öô
(&
qp
->
q_lock
, 
NULL
);

28 i‡(
îr
 != 0)

29 (
îr
);

34 
	}
}

40 
	$job_ö£π
(
queue
 *
qp
, 
job
 *
jp
)

42 
	`±hªad_rwlock_wæock
(&
qp
->
q_lock
);

43 
jp
->
j_√xt
 = 
qp
->
q_hód
;

44 
jp
->
j_¥ev
 = 
NULL
;

45 i‡(
qp
->
q_hód
 !
NULL
)

46 
qp
->
q_hód
->
j_¥ev
 = 
jp
;

48 
qp
->
q_èû
 = 
jp
;

49 
qp
->
q_hód
 = 
jp
;

50 
	`±hªad_rwlock_u∆ock
(&
qp
->
q_lock
);

51 
	}
}

57 
	$job_≠≥nd
(
queue
 *
qp
, 
job
 *
jp
)

59 
	`±hªad_rwlock_wæock
(&
qp
->
q_lock
);

60 
jp
->
j_√xt
 = 
NULL
;

61 
jp
->
j_¥ev
 = 
qp
->
q_èû
;

62 i‡(
qp
->
q_èû
 !
NULL
)

63 
qp
->
q_èû
->
j_√xt
 = 
jp
;

65 
qp
->
q_hód
 = 
jp
;

66 
qp
->
q_èû
 = 
jp
;

67 
	`±hªad_rwlock_u∆ock
(&
qp
->
q_lock
);

68 
	}
}

74 
	$job_ªmove
(
queue
 *
qp
, 
job
 *
jp
)

76 
	`±hªad_rwlock_wæock
(&
qp
->
q_lock
);

77 i‡(
jp
 =
qp
->
q_hód
) {

78 
qp
->
q_hód
 = 
jp
->
j_√xt
;

79 i‡(
qp
->
q_èû
 =
jp
)

80 
qp
->
q_èû
 = 
NULL
;

81 } i‡(
jp
 =
qp
->
q_èû
) {

82 
qp
->
q_èû
 = 
jp
->
j_¥ev
;

83 i‡(
qp
->
q_hód
 =
jp
)

84 
qp
->
q_hód
 = 
NULL
;

86 
jp
->
j_¥ev
->
j_√xt
 = jp->j_next;

87 
jp
->
j_√xt
->
j_¥ev
 = jp->j_prev;

89 
	`±hªad_rwlock_u∆ock
(&
qp
->
q_lock
);

90 
	}
}

95 
job
 *

96 
	$job_föd
(
queue
 *
qp
, 
±hªad_t
 
id
)

98 
job
 *
jp
;

100 i‡(
	`±hªad_rwlock_rdlock
(&
qp
->
q_lock
) != 0)

101 (
NULL
);

103 
jp
 = 
qp
->
q_hód
; j∞!
NULL
; j∞jp->
j_√xt
)

104 i‡(
	`±hªad_equÆ
(
jp
->
j_id
, 
id
))

107 
	`±hªad_rwlock_u∆ock
(&
qp
->
q_lock
);

108 (
jp
);

109 
	}
}

	@threads/threadid.c

1 
	~"≠ue.h
"

2 
	~<±hªad.h
>

4 
±hªad_t
 
	g¡id
;

7 
	$¥ötids
(c⁄° *
s
)

9 
pid_t
 
pid
;

10 
±hªad_t
 
tid
;

12 
pid
 = 
	`gëpid
();

13 
tid
 = 
	`±hªad_£lf
();

14 
	`¥ötf
("%†pid %uÅid %u (0x%x)\n", 
s
, ()
pid
,

15 ()
tid
, ()tid);

16 
	}
}

19 
	$thr_‚
(*
¨g
)

21 
	`¥ötids
("newÅhread: ");

23 
	}
}

26 
	$maö
()

28 
îr
;

30 
îr
 = 
	`±hªad_¸óã
(&
¡id
, 
NULL
, 
thr_‚
, NULL);

31 i‡(
îr
 != 0)

32 
	`îr_quô
("ˇn'à¸óãÅhªad: %s\n", 
	`°ªº‹
(
îr
));

33 
	`¥ötids
("mainÅhread:");

34 
	`¶ìp
(1);

35 
	`exô
(0);

36 
	}
}

	@/usr/include/arpa/inet.h

18 #i‚de‡
_ARPA_INET_H


19 
	#_ARPA_INET_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<√töë/ö.h
>

25 #i‚de‡
__sockÀn_t_deföed


26 
__sockÀn_t
 
	tsockÀn_t
;

27 
	#__sockÀn_t_deföed


	)

30 
__BEGIN_DECLS


34 
ö_addr_t
 
	$öë_addr
 (c⁄° *
__˝
Ë
__THROW
;

37 
ö_addr_t
 
	$öë_ aof
 (
ö_addr
 
__ö
Ë
__THROW
;

41 
ö_addr
 
	$öë_makóddr
 (
ö_addr_t
 
__√t
, in_addr_à
__ho°
)

42 
__THROW
;

45 
ö_addr_t
 
	$öë_√tof
 (
ö_addr
 
__ö
Ë
__THROW
;

49 
ö_addr_t
 
	$öë_√tw‹k
 (c⁄° *
__˝
Ë
__THROW
;

53 *
	$öë_¡ﬂ
 (
ö_addr
 
__ö
Ë
__THROW
;

58 
	$öë_±⁄
 (
__af
, c⁄° *
__ª°ri˘
 
__˝
,

59 *
__ª°ri˘
 
__buf
Ë
__THROW
;

64 c⁄° *
	$öë_¡›
 (
__af
, c⁄° *
__ª°ri˘
 
__˝
,

65 *
__ª°ri˘
 
__buf
, 
sockÀn_t
 
__Àn
)

66 
__THROW
;

70 #ifde‡
__USE_MISC


73 
	$öë_©⁄
 (c⁄° *
__˝
, 
ö_addr
 *
__öp
Ë
__THROW
;

77 *
	$öë_√è
 (
ö_addr_t
 
__√t
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

82 *
	$öë_√t_¡›
 (
__af
, c⁄° *
__˝
, 
__bôs
,

83 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

88 
	$öë_√t_±⁄
 (
__af
, c⁄° *
__˝
,

89 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

94 
	$öë_nßp_addr
 (c⁄° *
__˝
,

95 *
__buf
, 
__Àn
Ë
__THROW
;

99 *
	$öë_nßp_¡ﬂ
 (
__Àn
, c⁄° *
__˝
,

100 *
__buf
Ë
__THROW
;

103 
__END_DECLS


	@/usr/include/ctype.h

22 #i‚def 
_CTYPE_H


23 
	#_CTYPE_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	g__BEGIN_DECLS


30 #i‚de‡
_ISbô


39 
	~<ídün.h
>

40 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


41 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

43 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

48 
	m_ISuµî
 = 
_ISbô
 (0),

49 
	m_ISlowî
 = 
_ISbô
 (1),

50 
	m_ISÆpha
 = 
_ISbô
 (2),

51 
	m_ISdigô
 = 
_ISbô
 (3),

52 
	m_ISxdigô
 = 
_ISbô
 (4),

53 
	m_IS•a˚
 = 
_ISbô
 (5),

54 
	m_IS¥öt
 = 
_ISbô
 (6),

55 
	m_ISgøph
 = 
_ISbô
 (7),

56 
	m_ISbœnk
 = 
_ISbô
 (8),

57 
	m_IS˙ål
 = 
_ISbô
 (9),

58 
	m_ISpun˘
 = 
_ISbô
 (10),

59 
	m_ISÆnum
 = 
_ISbô
 (11)

79 c⁄° **
	$__˘y≥_b_loc
 ()

80 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

81 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

83 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

87 #i‚de‡
__˝lu•lus


88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

90 #ñi‡
deföed
 
__USE_EXTERN_INLINES


91 
	#__is˘y≥_f
(
ty≥
) \

92 
__exã∫_ölöe
 \

93 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

95  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

96 
	}

	)
}

99 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

100 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

102 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

104 
__BEGIN_NAMESPACE_STD


110 
__ex˘y≥
 (
iß um
);

111 
__ex˘y≥
 (
ißÕha
);

112 
__ex˘y≥
 (
is˙ål
);

113 
__ex˘y≥
 (
isdigô
);

114 
__ex˘y≥
 (
i¶owî
);

115 
__ex˘y≥
 (
isgøph
);

116 
__ex˘y≥
 (
i•röt
);

117 
__ex˘y≥
 (
i•un˘
);

118 
__ex˘y≥
 (
is•a˚
);

119 
__ex˘y≥
 (
isuµî
);

120 
__ex˘y≥
 (
isxdigô
);

124 
	$tﬁowî
 (
__c
Ë
__THROW
;

127 
	$touµî
 (
__c
Ë
__THROW
;

129 
__END_NAMESPACE_STD


133 #ifdef 
__USE_ISOC99


134 
__BEGIN_NAMESPACE_C99


136 
	`__ex˘y≥
 (
isbœnk
);

138 
__END_NAMESPACE_C99


141 #ifde‡
__USE_GNU


143 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

146 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


150 
	$ißscii
 (
__c
Ë
__THROW
;

154 
	$tﬂscii
 (
__c
Ë
__THROW
;

158 
	`__ex˘y≥
 (
_touµî
);

159 
	`__ex˘y≥
 (
_tﬁowî
);

163 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

164 (
__exãnsi⁄__
 \

165 ({ 
__ªs
; \

166 i‡( (
c
) > 1) \

168 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

170 
__c
 = (
c
); \

171 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

174 
__ªs
 = 
f
 
¨gs
; \

177 
__ªs
 = (
a
)[(Ë(
c
)]; \

178 
__ªs
; 
	}
}))

	)

180 #i‡!
deföed
 
__NO_CTYPE


181 #ifde‡
__is˘y≥_f


182 
	$__is˘y≥_f
 (
Ænum
)

183 
	$__is˘y≥_f
 (
Æpha
)

184 
	$__is˘y≥_f
 (
˙ål
)

185 
	$__is˘y≥_f
 (
digô
)

186 
	$__is˘y≥_f
 (
lowî
)

187 
	$__is˘y≥_f
 (
gøph
)

188 
	$__is˘y≥_f
 (
¥öt
)

189 
	$__is˘y≥_f
 (
pun˘
)

190 
	$__is˘y≥_f
 (
•a˚
)

191 
	$__is˘y≥_f
 (
uµî
)

192 
	$__is˘y≥_f
 (
xdigô
)

193 #ifde‡
__USE_ISOC99


194 
	$__is˘y≥_f
 (
bœnk
)

196 #ñi‡
deföed
 
__is˘y≥


197 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

198 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

199 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

200 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

201 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

202 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

203 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

204 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

205 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

206 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

207 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

208 #ifde‡
__USE_ISOC99


209 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

213 #ifde‡
__USE_EXTERN_INLINES


214 
__exã∫_ölöe
 

215 
	`__NTH
 (
	$tﬁowî
 (
__c
))

217  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

218 
	}
}

220 
__exã∫_ölöe
 

221 
__NTH
 (
	$touµî
 (
__c
))

223  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

224 
	}
}

227 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


228 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

229 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

232 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


233 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

234 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

236 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

237 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

243 #ifde‡
__USE_XOPEN2K8


257 
	~<xloˇÀ.h
>

261 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

262 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

264 
	#__ex˘y≥_l
(
«me
) \

265 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

271 
__ex˘y≥_l
 (
iß um_l
);

272 
__ex˘y≥_l
 (
ißÕha_l
);

273 
__ex˘y≥_l
 (
is˙ål_l
);

274 
__ex˘y≥_l
 (
isdigô_l
);

275 
__ex˘y≥_l
 (
i¶owî_l
);

276 
__ex˘y≥_l
 (
isgøph_l
);

277 
__ex˘y≥_l
 (
i•röt_l
);

278 
__ex˘y≥_l
 (
i•un˘_l
);

279 
__ex˘y≥_l
 (
is•a˚_l
);

280 
__ex˘y≥_l
 (
isuµî_l
);

281 
__ex˘y≥_l
 (
isxdigô_l
);

283 
__ex˘y≥_l
 (
isbœnk_l
);

287 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

288 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

291 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

292 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


295 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

296 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

297 
	#__touµî_l
(
c
, 
loˇÀ
) \

298 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

299 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

300 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

304 #i‚de‡
__NO_CTYPE


305 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

306 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

307 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

308 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

309 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

310 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

311 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

312 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

313 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

314 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

315 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

317 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

319 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


320 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

321 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

324 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

325 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

326 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

327 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

328 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

329 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

330 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

331 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

332 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

333 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

334 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

336 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

338 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


339 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

340 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

347 
__END_DECLS


	@/usr/include/dirent.h

22 #i‚def 
_DIRENT_H


23 
	#_DIRENT_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 #ifde‡
__USE_XOPEN


32 #i‚de‡
__öo_t_deföed


33 #i‚de‡
__USE_FILE_OFFSET64


34 
__öo_t
 
	töo_t
;

36 
__öo64_t
 
	töo_t
;

38 
	#__öo_t_deföed


	)

40 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


41 
__öo64_t
 
	töo64_t
;

42 
	#__öo64_t_deföed


	)

61 
	~<bôs/dúít.h
>

63 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
Ë&& !deföed 
d_fûío


64 
	#d_öo
 
d_fûío


	)

81 #ifde‡
_DIRENT_HAVE_D_NAMLEN


82 
	#_D_EXACT_NAMLEN
(
d
Ë((d)->
d_«mÀn
)

	)

83 
	#_D_ALLOC_NAMLEN
(
d
Ë(
	`_D_EXACT_NAMLEN
 (dË+ 1)

	)

85 
	#_D_EXACT_NAMLEN
(
d
Ë(
	`°æí
 ((d)->
d_«me
))

	)

86 #ifde‡
_DIRENT_HAVE_D_RECLEN


87 
	#_D_ALLOC_NAMLEN
(
d
Ë(((*Ë(dË+ (d)->
d_ª˛í
Ë- &(d)->
d_«me
[0])

	)

89 
	#_D_ALLOC_NAMLEN
(
d
Ë( (d)->
d_«me
 > 1 ?  (d)->d_name : \

90 
	`_D_EXACT_NAMLEN
 (
d
Ë+ 1)

	)

95 #ifde‡
__USE_BSD


99 
	mDT_UNKNOWN
 = 0,

100 
	#DT_UNKNOWN
 
DT_UNKNOWN


	)

101 
	mDT_FIFO
 = 1,

102 
	#DT_FIFO
 
DT_FIFO


	)

103 
	mDT_CHR
 = 2,

104 
	#DT_CHR
 
DT_CHR


	)

105 
	mDT_DIR
 = 4,

106 
	#DT_DIR
 
DT_DIR


	)

107 
	mDT_BLK
 = 6,

108 
	#DT_BLK
 
DT_BLK


	)

109 
	mDT_REG
 = 8,

110 
	#DT_REG
 
DT_REG


	)

111 
	mDT_LNK
 = 10,

112 
	#DT_LNK
 
DT_LNK


	)

113 
	mDT_SOCK
 = 12,

114 
	#DT_SOCK
 
DT_SOCK


	)

115 
	mDT_WHT
 = 14

116 
	#DT_WHT
 
DT_WHT


	)

120 
	#IFTODT
(
mode
Ë(((modeË& 0170000Ë>> 12)

	)

121 
	#DTTOIF
(
dúty≥
Ë((dúty≥Ë<< 12)

	)

127 
__dú°ªam
 
	tDIR
;

134 
DIR
 *
	$›ídú
 (c⁄° *
__«me
Ë
	`__n⁄nuŒ
 ((1));

136 #ifde‡
__USE_XOPEN2K8


141 
DIR
 *
	`fd›ídú
 (
__fd
);

149 
	$˛o£dú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

161 #i‚de‡
__USE_FILE_OFFSET64


162 
dúít
 *
	$ªaddú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

164 #ifde‡
__REDIRECT


165 
dúít
 *
	`__REDIRECT
 (
ªaddú
, (
DIR
 *
__dúp
), 
ªaddú64
)

166 
	`__n⁄nuŒ
 ((1));

168 
	#ªaddú
 
ªaddú64


	)

172 #ifde‡
__USE_LARGEFILE64


173 
dúít64
 *
	$ªaddú64
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

176 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


182 #i‚de‡
__USE_FILE_OFFSET64


183 
	$ªaddú_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

184 
dúít
 *
__ª°ri˘
 
__íåy
,

185 
dúít
 **
__ª°ri˘
 
__ªsu…
)

186 
	`__n⁄nuŒ
 ((1, 2, 3));

188 #ifde‡
__REDIRECT


189 
	`__REDIRECT
 (
ªaddú_r
,

190 (
DIR
 *
__ª°ri˘
 
__dúp
,

191 
dúít
 *
__ª°ri˘
 
__íåy
,

192 
dúít
 **
__ª°ri˘
 
__ªsu…
),

193 
ªaddú64_r
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

195 
	#ªaddú_r
 
ªaddú64_r


	)

199 #ifde‡
__USE_LARGEFILE64


200 
	$ªaddú64_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

201 
dúít64
 *
__ª°ri˘
 
__íåy
,

202 
dúít64
 **
__ª°ri˘
 
__ªsu…
)

203 
	`__n⁄nuŒ
 ((1, 2, 3));

208 
	$ªwöddú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

210 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


211 
	~<bôs/ty≥s.h
>

214 
	$£ekdú
 (
DIR
 *
__dúp
, 
__pos
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

217 
	$ãŒdú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

220 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


223 
	$dúfd
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 #i‡
deföed
 
__OPTIMIZE__
 && deföed 
_DIR_dúfd


226 
	#dúfd
(
dúp
Ë
	`_DIR_dúfd
 (dúp)

	)

229 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC


230 #i‚de‡
MAXNAMLEN


232 
	~<bôs/posix1_lim.h
>

235 #ifde‡
NAME_MAX


236 
	#MAXNAMLEN
 
NAME_MAX


	)

238 
	#MAXNAMLEN
 255

	)

243 
	#__√ed_size_t


	)

244 
	~<°ddef.h
>

253 #i‚de‡
__USE_FILE_OFFSET64


254 
	`sˇndú
 (c⁄° *
__ª°ri˘
 
__dú
,

255 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

256 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

257 (*
__cmp
Ë(c⁄° 
dúít
 **,

258 c⁄° 
dúít
 **))

259 
	`__n⁄nuŒ
 ((1, 2));

261 #ifde‡
__REDIRECT


262 
	`__REDIRECT
 (
sˇndú
,

263 (c⁄° *
__ª°ri˘
 
__dú
,

264 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

265 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

266 (*
__cmp
Ë(c⁄° 
dúít
 **,

267 c⁄° 
dúít
 **)),

268 
sˇndú64
Ë
	`__n⁄nuŒ
 ((1, 2));

270 
	#sˇndú
 
sˇndú64


	)

274 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


277 
	`sˇndú64
 (c⁄° *
__ª°ri˘
 
__dú
,

278 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

279 (*
__£À˘‹
Ë(c⁄° 
dúít64
 *),

280 (*
__cmp
Ë(c⁄° 
dúít64
 **,

281 c⁄° 
dúít64
 **))

282 
	`__n⁄nuŒ
 ((1, 2));

285 #ifde‡
__USE_GNU


291 #i‚de‡
__USE_FILE_OFFSET64


292 
	`sˇndú©
 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

293 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

294 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

295 (*
__cmp
Ë(c⁄° 
dúít
 **,

296 c⁄° 
dúít
 **))

297 
	`__n⁄nuŒ
 ((2, 3));

299 #ifde‡
__REDIRECT


300 
	`__REDIRECT
 (
sˇndú©
,

301 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

302 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

303 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

304 (*
__cmp
Ë(c⁄° 
dúít
 **,

305 c⁄° 
dúít
 **)),

306 
sˇndú©64
Ë
	`__n⁄nuŒ
 ((2, 3));

308 
	#sˇndú©
 
sˇndú©64


	)

314 
	`sˇndú©64
 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

315 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

316 (*
__£À˘‹
Ë(c⁄° 
dúít64
 *),

317 (*
__cmp
Ë(c⁄° 
dúít64
 **,

318 c⁄° 
dúít64
 **))

319 
	`__n⁄nuŒ
 ((2, 3));

323 #i‚de‡
__USE_FILE_OFFSET64


324 
	$Æphas‹t
 (c⁄° 
dúít
 **
__e1
,

325 c⁄° 
dúít
 **
__e2
)

326 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

328 #ifde‡
__REDIRECT


329 
	`__REDIRECT_NTH
 (
Æphas‹t
,

330 (c⁄° 
dúít
 **
__e1
,

331 c⁄° 
dúít
 **
__e2
),

332 
Æphas‹t64
Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

334 
	#Æphas‹t
 
Æphas‹t64


	)

338 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


339 
	$Æphas‹t64
 (c⁄° 
dúít64
 **
__e1
,

340 c⁄° 
dúít64
 **
__e2
)

341 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

346 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC


351 #i‚de‡
__USE_FILE_OFFSET64


352 
__ssize_t
 
	$gëdúíåõs
 (
__fd
, *
__ª°ri˘
 
__buf
,

353 
size_t
 
__nbyãs
,

354 
__off_t
 *
__ª°ri˘
 
__ba£p
)

355 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

357 #ifde‡
__REDIRECT


358 
__ssize_t
 
	`__REDIRECT_NTH
 (
gëdúíåõs
,

359 (
__fd
, *
__ª°ri˘
 
__buf
,

360 
size_t
 
__nbyãs
,

361 
__off64_t
 *
__ª°ri˘
 
__ba£p
),

362 
gëdúíåõs64
Ë
	`__n⁄nuŒ
 ((2, 4));

364 
	#gëdúíåõs
 
gëdúíåõs64


	)

368 #ifde‡
__USE_LARGEFILE64


369 
__ssize_t
 
	$gëdúíåõs64
 (
__fd
, *
__ª°ri˘
 
__buf
,

370 
size_t
 
__nbyãs
,

371 
__off64_t
 *
__ª°ri˘
 
__ba£p
)

372 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

376 #ifde‡
__USE_GNU


378 #i‚de‡
__USE_FILE_OFFSET64


379 
	$vîsi⁄s‹t
 (c⁄° 
dúít
 **
__e1
,

380 c⁄° 
dúít
 **
__e2
)

381 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

383 #ifde‡
__REDIRECT


384 
	`__REDIRECT_NTH
 (
vîsi⁄s‹t
,

385 (c⁄° 
dúít
 **
__e1
,

386 c⁄° 
dúít
 **
__e2
),

387 
vîsi⁄s‹t64
)

388 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

390 
	#vîsi⁄s‹t
 
vîsi⁄s‹t64


	)

394 #ifde‡
__USE_LARGEFILE64


395 
	$vîsi⁄s‹t64
 (c⁄° 
dúít64
 **
__e1
,

396 c⁄° 
dúít64
 **
__e2
)

397 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

401 
__END_DECLS


	@/usr/include/errno.h

22 #i‚def 
_ERRNO_H


26 #i‚def 
__√ed_Em©h


27 
	#_ERRNO_H
 1

	)

28 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


35 
	~<bôs/î∫o.h
>

36 #unde‡
__√ed_Em©h


38 #ifdef 
_ERRNO_H


45 #i‚def 
î∫o


46 
î∫o
;

49 #ifde‡
__USE_GNU


54 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

58 
	g__END_DECLS


66 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


67 #i‚de‡
__îr‹_t_deföed


68 
	tîr‹_t
;

69 
	#__îr‹_t_deföed
 1

	)

71 #unde‡
__√ed_îr‹_t


	@/usr/include/fcntl.h

22 #i‚def 
_FCNTL_H


23 
	#_FCNTL_H
 1

	)

25 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

35 
	~<bôs/f˙é.h
>

40 #i‚de‡
__mode_t_deföed


41 
__mode_t
 
	tmode_t
;

42 
	#__mode_t_deföed


	)

45 #i‚de‡
__off_t_deföed


46 #i‚de‡
__USE_FILE_OFFSET64


47 
__off_t
 
	toff_t
;

49 
__off64_t
 
	toff_t
;

51 
	#__off_t_deföed


	)

54 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


55 
__off64_t
 
	toff64_t
;

56 
	#__off64_t_deföed


	)

59 #i‚de‡
__pid_t_deföed


60 
__pid_t
 
	tpid_t
;

61 
	#__pid_t_deföed


	)

65 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


66 
	#__√ed_time•ec


	)

67 
	~<time.h
>

68 
	~<bôs/°©.h
>

70 
	#S_IFMT
 
__S_IFMT


	)

71 
	#S_IFDIR
 
__S_IFDIR


	)

72 
	#S_IFCHR
 
__S_IFCHR


	)

73 
	#S_IFBLK
 
__S_IFBLK


	)

74 
	#S_IFREG
 
__S_IFREG


	)

75 #ifde‡
__S_IFIFO


76 
	#S_IFIFO
 
__S_IFIFO


	)

78 #ifde‡
__S_IFLNK


79 
	#S_IFLNK
 
__S_IFLNK


	)

81 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


82 
	#S_IFSOCK
 
__S_IFSOCK


	)

87 
	#S_ISUID
 
__S_ISUID


	)

88 
	#S_ISGID
 
__S_ISGID


	)

90 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


92 
	#S_ISVTX
 
__S_ISVTX


	)

95 
	#S_IRUSR
 
__S_IREAD


	)

96 
	#S_IWUSR
 
__S_IWRITE


	)

97 
	#S_IXUSR
 
__S_IEXEC


	)

99 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

101 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

102 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

103 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

105 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

107 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

108 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

109 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

111 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

114 #ifdef 
__USE_MISC


115 #i‚de‡
R_OK


118 
	#R_OK
 4

	)

119 
	#W_OK
 2

	)

120 
	#X_OK
 1

	)

121 
	#F_OK
 0

	)

126 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


127 
	#SEEK_SET
 0

	)

128 
	#SEEK_CUR
 1

	)

129 
	#SEEK_END
 2

	)

137 
f˙é
 (
__fd
, 
__cmd
, ...);

145 #i‚de‡
__USE_FILE_OFFSET64


146 
	$›í
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

148 #ifde‡
__REDIRECT


149 
	`__REDIRECT
 (
›í
, (c⁄° *
__fûe
, 
__oÊag
, ...), 
›í64
)

150 
	`__n⁄nuŒ
 ((1));

152 
	#›í
 
›í64


	)

155 #ifde‡
__USE_LARGEFILE64


156 
	$›í64
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

159 #ifde‡
__USE_ATFILE


169 #i‚de‡
__USE_FILE_OFFSET64


170 
	$›í©
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

171 
	`__n⁄nuŒ
 ((2));

173 #ifde‡
__REDIRECT


174 
	`__REDIRECT
 (
›í©
, (
__fd
, c⁄° *
__fûe
, 
__oÊag
,

175 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

177 
	#›í©
 
›í©64


	)

180 #ifde‡
__USE_LARGEFILE64


181 
	$›í©64
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

182 
	`__n⁄nuŒ
 ((2));

191 #i‚de‡
__USE_FILE_OFFSET64


192 
	$¸ót
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

194 #ifde‡
__REDIRECT


195 
	`__REDIRECT
 (
¸ót
, (c⁄° *
__fûe
, 
mode_t
 
__mode
),

196 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

198 
	#¸ót
 
¸ót64


	)

201 #ifde‡
__USE_LARGEFILE64


202 
	$¸ót64
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

205 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

206 && !
deföed
 
__USE_POSIX
))

215 
	#F_ULOCK
 0

	)

216 
	#F_LOCK
 1

	)

217 
	#F_TLOCK
 2

	)

218 
	#F_TEST
 3

	)

220 #i‚de‡
__USE_FILE_OFFSET64


221 
	`lockf
 (
__fd
, 
__cmd
, 
off_t
 
__Àn
);

223 #ifde‡
__REDIRECT


224 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

226 
	#lockf
 
lockf64


	)

229 #ifde‡
__USE_LARGEFILE64


230 
	`lockf64
 (
__fd
, 
__cmd
, 
off64_t
 
__Àn
);

234 #ifde‡
__USE_XOPEN2K


237 #i‚de‡
__USE_FILE_OFFSET64


238 
	$posix_Ádvi£
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
,

239 
__advi£
Ë
__THROW
;

241 #ifde‡
__REDIRECT_NTH


242 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

243 
__off64_t
 
__Àn
, 
__advi£
),

244 
posix_Ádvi£64
);

246 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

249 #ifde‡
__USE_LARGEFILE64


250 
	$posix_Ádvi£64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
,

251 
__advi£
Ë
__THROW
;

259 #i‚de‡
__USE_FILE_OFFSET64


260 
	`posix_ÁŒoˇã
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
);

262 #ifde‡
__REDIRECT


263 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

264 
__off64_t
 
__Àn
),

265 
posix_ÁŒoˇã64
);

267 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

270 #ifde‡
__USE_LARGEFILE64


271 
	`posix_ÁŒoˇã64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
);

277 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
 \

278 && 
deföed
 
__va_¨g_∑ck_Àn


279 
	~<bôs/f˙é2.h
>

282 
__END_DECLS


	@/usr/include/grp.h

22 #i‚def 
_GRP_H


23 
	#_GRP_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 
	#__√ed_size_t


	)

32 
	~<°ddef.h
>

36 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K
Ë&& !deföed 
__gid_t_deföed


37 
__gid_t
 
	tgid_t
;

38 
	#__gid_t_deföed


	)

42 
	sgroup


44 *
	mgr_«me
;

45 *
	mgr_∑sswd
;

46 
__gid_t
 
	mgr_gid
;

47 **
	mgr_mem
;

51 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_GNU


52 
	#__√ed_FILE


	)

53 
	~<°dio.h
>

57 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


62 
£tgª¡
 ();

65 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

66 || 
deföed
 
__USE_XOPEN2K8


71 
ídgª¡
 ();

77 
group
 *
gëgª¡
 ();

80 #ifdef 
__USE_SVID


87 
group
 *
fgëgª¡
 (
FILE
 *
__°ªam
);

90 #ifde‡
__USE_GNU


97 
putgª¡
 (c⁄° 
group
 *
__ª°ri˘
 
__p
,

98 
FILE
 *
__ª°ri˘
 
__f
);

105 
group
 *
gëgrgid
 (
__gid_t
 
__gid
);

111 
group
 *
gëg∫am
 (c⁄° *
__«me
);

113 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


115 #ifde‡
__USE_MISC


118 
	#NSS_BUFLEN_GROUP
 1024

	)

134 #ifde‡
__USE_GNU


135 
gëgª¡_r
 (
group
 *
__ª°ri˘
 
__ªsu…buf
,

136 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

137 
group
 **
__ª°ri˘
 
__ªsu…
);

144 
gëgrgid_r
 (
__gid_t
 
__gid
, 
group
 *
__ª°ri˘
 
__ªsu…buf
,

145 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

146 
group
 **
__ª°ri˘
 
__ªsu…
);

152 
gëg∫am_r
 (c⁄° *
__ª°ri˘
 
__«me
,

153 
group
 *
__ª°ri˘
 
__ªsu…buf
,

154 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

155 
group
 **
__ª°ri˘
 
__ªsu…
);

157 #ifdef 
__USE_SVID


165 
fgëgª¡_r
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

166 
group
 *
__ª°ri˘
 
__ªsu…buf
,

167 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

168 
group
 **
__ª°ri˘
 
__ªsu…
);

174 #ifdef 
__USE_BSD


176 
	#__√ed_size_t


	)

177 
	~<°ddef.h
>

180 
	$£tgroups
 (
size_t
 
__n
, c⁄° 
__gid_t
 *
__groups
Ë
__THROW
;

190 
	`gëgrou∂i°
 (c⁄° *
__u£r
, 
__gid_t
 
__group
,

191 
__gid_t
 *
__groups
, *
__ngroups
);

201 
	`öôgroups
 (c⁄° *
__u£r
, 
__gid_t
 
__group
);

205 
__END_DECLS


	@/usr/include/inttypes.h

22 #i‚de‡
_INTTYPES_H


23 
	#_INTTYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<°döt.h
>

30 #i‚de‡
____gwch¨_t_deföed


31 #ifde‡
__˝lu•lus


32 
	#__gwch¨_t
 
wch¨_t


	)

33 #ñi‡
deföed
 
__WCHAR_TYPE__


34 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

36 
	#__√ed_wch¨_t


	)

37 
	~<°ddef.h
>

38 
wch¨_t
 
	t__gwch¨_t
;

40 
	#____gwch¨_t_deföed
 1

	)

43 #i‡
__WORDSIZE
 == 64

44 
	#__PRI64_PREFIX
 "l"

	)

45 
	#__PRIPTR_PREFIX
 "l"

	)

47 
	#__PRI64_PREFIX
 "Œ"

	)

48 
	#__PRIPTR_PREFIX


	)

54 
	#PRId8
 "d"

	)

55 
	#PRId16
 "d"

	)

56 
	#PRId32
 "d"

	)

57 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

59 
	#PRIdLEAST8
 "d"

	)

60 
	#PRIdLEAST16
 "d"

	)

61 
	#PRIdLEAST32
 "d"

	)

62 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

64 
	#PRIdFAST8
 "d"

	)

65 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

66 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

67 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIi8
 "i"

	)

71 
	#PRIi16
 "i"

	)

72 
	#PRIi32
 "i"

	)

73 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

75 
	#PRIiLEAST8
 "i"

	)

76 
	#PRIiLEAST16
 "i"

	)

77 
	#PRIiLEAST32
 "i"

	)

78 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

80 
	#PRIiFAST8
 "i"

	)

81 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

82 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

83 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIo8
 "o"

	)

87 
	#PRIo16
 "o"

	)

88 
	#PRIo32
 "o"

	)

89 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

91 
	#PRIoLEAST8
 "o"

	)

92 
	#PRIoLEAST16
 "o"

	)

93 
	#PRIoLEAST32
 "o"

	)

94 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

96 
	#PRIoFAST8
 "o"

	)

97 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

98 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

99 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIu8
 "u"

	)

103 
	#PRIu16
 "u"

	)

104 
	#PRIu32
 "u"

	)

105 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

107 
	#PRIuLEAST8
 "u"

	)

108 
	#PRIuLEAST16
 "u"

	)

109 
	#PRIuLEAST32
 "u"

	)

110 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

112 
	#PRIuFAST8
 "u"

	)

113 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

114 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

115 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIx8
 "x"

	)

119 
	#PRIx16
 "x"

	)

120 
	#PRIx32
 "x"

	)

121 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

123 
	#PRIxLEAST8
 "x"

	)

124 
	#PRIxLEAST16
 "x"

	)

125 
	#PRIxLEAST32
 "x"

	)

126 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

128 
	#PRIxFAST8
 "x"

	)

129 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

130 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

131 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIX8
 "X"

	)

135 
	#PRIX16
 "X"

	)

136 
	#PRIX32
 "X"

	)

137 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

139 
	#PRIXLEAST8
 "X"

	)

140 
	#PRIXLEAST16
 "X"

	)

141 
	#PRIXLEAST32
 "X"

	)

142 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

144 
	#PRIXFAST8
 "X"

	)

145 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

146 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

147 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

151 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

152 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

153 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

154 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

155 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

156 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

160 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

161 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

162 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

163 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

164 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

165 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

171 
	#SCNd8
 "hhd"

	)

172 
	#SCNd16
 "hd"

	)

173 
	#SCNd32
 "d"

	)

174 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

176 
	#SCNdLEAST8
 "hhd"

	)

177 
	#SCNdLEAST16
 "hd"

	)

178 
	#SCNdLEAST32
 "d"

	)

179 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

181 
	#SCNdFAST8
 "hhd"

	)

182 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

183 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

184 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNi8
 "hhi"

	)

188 
	#SCNi16
 "hi"

	)

189 
	#SCNi32
 "i"

	)

190 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

192 
	#SCNiLEAST8
 "hhi"

	)

193 
	#SCNiLEAST16
 "hi"

	)

194 
	#SCNiLEAST32
 "i"

	)

195 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

197 
	#SCNiFAST8
 "hhi"

	)

198 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

199 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

200 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNu8
 "hhu"

	)

204 
	#SCNu16
 "hu"

	)

205 
	#SCNu32
 "u"

	)

206 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

208 
	#SCNuLEAST8
 "hhu"

	)

209 
	#SCNuLEAST16
 "hu"

	)

210 
	#SCNuLEAST32
 "u"

	)

211 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

213 
	#SCNuFAST8
 "hhu"

	)

214 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

215 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

216 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNo8
 "hho"

	)

220 
	#SCNo16
 "ho"

	)

221 
	#SCNo32
 "o"

	)

222 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

224 
	#SCNoLEAST8
 "hho"

	)

225 
	#SCNoLEAST16
 "ho"

	)

226 
	#SCNoLEAST32
 "o"

	)

227 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

229 
	#SCNoFAST8
 "hho"

	)

230 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

231 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

232 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNx8
 "hhx"

	)

236 
	#SCNx16
 "hx"

	)

237 
	#SCNx32
 "x"

	)

238 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

240 
	#SCNxLEAST8
 "hhx"

	)

241 
	#SCNxLEAST16
 "hx"

	)

242 
	#SCNxLEAST32
 "x"

	)

243 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

245 
	#SCNxFAST8
 "hhx"

	)

246 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

247 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

248 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

252 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

253 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

254 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

255 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

256 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

259 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

260 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

261 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

262 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

263 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

266 
	g__BEGIN_DECLS


268 #i‡
__WORDSIZE
 == 64

273 
	mquŸ
;

274 
	mªm
;

275 } 
	timaxdiv_t
;

282 
__exãnsi⁄__
 
	mquŸ
;

283 
__exãnsi⁄__
 
	mªm
;

284 } 
	timaxdiv_t
;

290 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

293 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

294 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

297 
ötmax_t
 
	$°πoimax
 (c⁄° *
__ª°ri˘
 
__≈å
,

298 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

301 
uötmax_t
 
	$°πoumax
 (c⁄° *
__ª°ri˘
 
__≈å
,

302 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

305 
ötmax_t
 
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

306 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

307 
__THROW
;

310 
uötmax_t
 
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

311 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

312 
__THROW
;

314 #ifde‡
__USE_EXTERN_INLINES


316 #i‡
__WORDSIZE
 == 64

318 
	$__°πﬁ_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

319 **
__ª°ri˘
 
__íd±r
,

320 
__ba£
, 
__group
)

321 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

323 
__exã∫_ölöe
 
ötmax_t


324 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

325 
ba£
))

327  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

328 
	}
}

330 
	$__°πoul_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

331 ** 
__ª°ri˘
 
__íd±r
,

332 
__ba£
, 
__group
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

335 
__exã∫_ölöe
 
uötmax_t


336 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

337 
ba£
))

339  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

340 
	}
}

342 
	$__wc°ﬁ_öã∫Æ
 (c⁄° 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

343 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

344 
__ba£
, 
__group
)

345 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

347 
__exã∫_ölöe
 
ötmax_t


348 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

349 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

351  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

352 
	}
}

354 
	$__wc°oul_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

355 
__ª°ri˘
 
__≈å
,

356 
__gwch¨_t
 **

357 
__ª°ri˘
 
__íd±r
,

358 
__ba£
, 
__group
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

361 
__exã∫_ölöe
 
uötmax_t


362 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

363 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

365  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

366 
	}
}

370 
__exãnsi⁄__


371 
	$__°πﬁl_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

372 **
__ª°ri˘
 
__íd±r
,

373 
__ba£
, 
__group
)

374 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

376 
__exã∫_ölöe
 
ötmax_t


377 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

378 
ba£
))

380  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

381 
	}
}

383 
__exãnsi⁄__


384 
	$__°πouŒ_öã∫Æ
 (const *

385 
__ª°ri˘
 
__≈å
,

387 
__ª°ri˘
 
__íd±r
,

388 
__ba£
,

389 
__group
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

392 
__exã∫_ölöe
 
uötmax_t


393 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

394 
ba£
))

396  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

397 
	}
}

399 
__exãnsi⁄__


400 
	$__wc°ﬁl_öã∫Æ
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

401 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

402 
__ba£
, 
__group
)

403 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

405 
__exã∫_ölöe
 
ötmax_t


406 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

407 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

409  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

410 
	}
}

413 
__exãnsi⁄__


414 
	$__wc°ouŒ_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

415 
__ª°ri˘
 
__≈å
,

416 
__gwch¨_t
 **

417 
__ª°ri˘
 
__íd±r
,

418 
__ba£
,

419 
__group
)

420 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

422 
__exã∫_ölöe
 
uötmax_t


423 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

424 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

426  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

427 
	}
}

432 
	g__END_DECLS


	@/usr/include/limits.h

22 #i‚de‡
_LIBC_LIMITS_H_


23 
	#_LIBC_LIMITS_H_
 1

	)

25 
	~<„©uªs.h
>

31 
	#MB_LEN_MAX
 16

	)

36 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

41 #i‚de‡
_LIMITS_H


42 
	#_LIMITS_H
 1

	)

44 
	~<bôs/w‹dsize.h
>

53 
	#CHAR_BIT
 8

	)

56 
	#SCHAR_MIN
 (-128)

	)

57 
	#SCHAR_MAX
 127

	)

60 
	#UCHAR_MAX
 255

	)

63 #ifde‡
__CHAR_UNSIGNED__


64 
	#CHAR_MIN
 0

	)

65 
	#CHAR_MAX
 
UCHAR_MAX


	)

67 
	#CHAR_MIN
 
SCHAR_MIN


	)

68 
	#CHAR_MAX
 
SCHAR_MAX


	)

72 
	#SHRT_MIN
 (-32768)

	)

73 
	#SHRT_MAX
 32767

	)

76 
	#USHRT_MAX
 65535

	)

79 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

80 
	#INT_MAX
 2147483647

	)

83 
	#UINT_MAX
 4294967295U

	)

86 #i‡
__WORDSIZE
 == 64

87 
	#LONG_MAX
 9223372036854775807L

	)

89 
	#LONG_MAX
 2147483647L

	)

91 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

94 #i‡
__WORDSIZE
 == 64

95 
	#ULONG_MAX
 18446744073709551615UL

	)

97 
	#ULONG_MAX
 4294967295UL

	)

100 #ifde‡
__USE_ISOC99


103 
	#LLONG_MAX
 9223372036854775807LL

	)

104 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

107 
	#ULLONG_MAX
 18446744073709551615ULL

	)

121 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


123 #ö˛ude_√xà<
limôs
.
h
>

129 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


130 #i‚de‡
LLONG_MIN


131 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

133 #i‚de‡
LLONG_MAX


134 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

136 #i‚de‡
ULLONG_MAX


137 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

141 #ifdef 
__USE_POSIX


143 
	~<bôs/posix1_lim.h
>

146 #ifdef 
__USE_POSIX2


147 
	~<bôs/posix2_lim.h
>

150 #ifdef 
__USE_XOPEN


151 
	~<bôs/x›í_lim.h
>

	@/usr/include/netdb.h

22 #i‚def 
_NETDB_H


23 
	#_NETDB_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<√töë/ö.h
>

28 
	~<°döt.h
>

29 #ifde‡
__USE_MISC


32 
	~<Ωc/√tdb.h
>

35 #ifde‡
__USE_GNU


36 
	#__√ed_sigevít_t


	)

37 
	~<bôs/sigöfo.h
>

38 
	#__√ed_time•ec


	)

39 
	~<time.h
>

42 
	~<bôs/√tdb.h
>

45 
	#_PATH_HEQUIV
 "/ëc/ho°s.equiv"

	)

46 
	#_PATH_HOSTS
 "/ëc/ho°s"

	)

47 
	#_PATH_NETWORKS
 "/ëc/√tw‹ks"

	)

48 
	#_PATH_NSSWITCH_CONF
 "/ëc/nsswôch.c⁄f"

	)

49 
	#_PATH_PROTOCOLS
 "/ëc/¥Ÿocﬁs"

	)

50 
	#_PATH_SERVICES
 "/ëc/£rvi˚s"

	)

53 
	g__BEGIN_DECLS


55 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


58 
	#h_î∫o
 (*
	`__h_î∫o_loˇti⁄
 ())

	)

61 *
	$__h_î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

65 
	#HOST_NOT_FOUND
 1

	)

66 
	#TRY_AGAIN
 2

	)

68 
	#NO_RECOVERY
 3

	)

70 
	#NO_DATA
 4

	)

73 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


74 
	#NETDB_INTERNAL
 -1

	)

75 
	#NETDB_SUCCESS
 0

	)

76 
	#NO_ADDRESS
 
NO_DATA


	)

79 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_XOPEN_EXTENDED


81 
	#IPPORT_RESERVED
 1024

	)

84 #ifde‡
__USE_GNU


86 
	#SCOPE_DELIMITER
 '%'

	)

89 #ifde‡
__USE_MISC


92 
	$hîr‹
 (c⁄° *
__°r
Ë
__THROW
;

95 c⁄° *
	$h°ªº‹
 (
__îr_num
Ë
__THROW
;

100 
	sho°ít


102 *
h_«me
;

103 **
h_Æü£s
;

104 
h_addπy≥
;

105 
h_Àngth
;

106 **
h_addr_li°
;

107 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


108 
	#h_addr
 
h_addr_li°
[0]

	)

117 
	`£tho°ít
 (
__°ay_›í
);

123 
	`ídho°ít
 ();

130 
ho°ít
 *
	`gëho°ít
 ();

137 
ho°ít
 *
	`gëho°byaddr
 (c⁄° *
__addr
, 
__sockÀn_t
 
__Àn
,

138 
__ty≥
);

144 
ho°ít
 *
	`gëho°by«me
 (c⁄° *
__«me
);

146 #ifde‡
__USE_MISC


155 
ho°ít
 *
	`gëho°by«me2
 (c⁄° *
__«me
, 
__af
);

167 
	`gëho°ít_r
 (
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

168 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

169 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

170 *
__ª°ri˘
 
__h_î∫›
);

172 
	`gëho°byaddr_r
 (c⁄° *
__ª°ri˘
 
__addr
, 
__sockÀn_t
 
__Àn
,

173 
__ty≥
,

174 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

175 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

176 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

177 *
__ª°ri˘
 
__h_î∫›
);

179 
	`gëho°by«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

180 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

181 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

182 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

183 *
__ª°ri˘
 
__h_î∫›
);

185 
	`gëho°by«me2_r
 (c⁄° *
__ª°ri˘
 
__«me
, 
__af
,

186 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

187 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

188 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

189 *
__ª°ri˘
 
__h_î∫›
);

198 
	`£äëít
 (
__°ay_›í
);

204 
	`íd√ã¡
 ();

211 
√ã¡
 *
	`gë√ã¡
 ();

218 
√ã¡
 *
	`gë√tbyaddr
 (
uöt32_t
 
__√t
, 
__ty≥
);

224 
√ã¡
 *
	`gë√tby«me
 (c⁄° *
__«me
);

226 #ifdef 
__USE_MISC


237 
	`gë√ã¡_r
 (
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

238 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

239 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

240 *
__ª°ri˘
 
__h_î∫›
);

242 
	`gë√tbyaddr_r
 (
uöt32_t
 
__√t
, 
__ty≥
,

243 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

244 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

245 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

246 *
__ª°ri˘
 
__h_î∫›
);

248 
	`gë√tby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

249 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

250 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

251 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

252 *
__ª°ri˘
 
__h_î∫›
);

257 
	s£rvít


259 *
s_«me
;

260 **
s_Æü£s
;

261 
s_p‹t
;

262 *
s_¥Ÿo
;

270 
	`£t£rvít
 (
__°ay_›í
);

276 
	`íd£rvít
 ();

283 
£rvít
 *
	`gë£rvít
 ();

290 
£rvít
 *
	`gë£rvby«me
 (c⁄° *
__«me
, c⁄° *
__¥Ÿo
);

297 
£rvít
 *
	`gë£rvbyp‹t
 (
__p‹t
, c⁄° *
__¥Ÿo
);

300 #ifdef 
__USE_MISC


308 
	`gë£rvít_r
 (
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

309 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

310 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

312 
	`gë£rvby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

313 c⁄° *
__ª°ri˘
 
__¥Ÿo
,

314 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

315 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

316 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

318 
	`gë£rvbyp‹t_r
 (
__p‹t
, c⁄° *
__ª°ri˘
 
__¥Ÿo
,

319 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

320 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

321 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

326 
	s¥Ÿ€¡


328 *
p_«me
;

329 **
p_Æü£s
;

330 
p_¥Ÿo
;

338 
	`£çrŸ€¡
 (
__°ay_›í
);

344 
	`íd¥Ÿ€¡
 ();

351 
¥Ÿ€¡
 *
	`gë¥Ÿ€¡
 ();

357 
¥Ÿ€¡
 *
	`gë¥Ÿoby«me
 (c⁄° *
__«me
);

363 
¥Ÿ€¡
 *
	`gë¥Ÿobynumbî
 (
__¥Ÿo
);

366 #ifdef 
__USE_MISC


374 
	`gë¥Ÿ€¡_r
 (
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

375 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

376 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

378 
	`gë¥Ÿoby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

379 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

380 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

381 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

383 
	`gë¥Ÿobynumbî_r
 (
__¥Ÿo
,

384 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

385 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

386 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

395 
	`£äëgª¡
 (c⁄° *
__√tgroup
);

403 
	`íd√tgª¡
 ();

412 
	`gë√tgª¡
 (**
__ª°ri˘
 
__ho°p
,

413 **
__ª°ri˘
 
__u£Ω
,

414 **
__ª°ri˘
 
__domaöp
);

423 
	`ö√tgr
 (c⁄° *
__√tgroup
, c⁄° *
__ho°
,

424 c⁄° *
__u£r
, c⁄° *
__domaö
);

432 
	`gë√tgª¡_r
 (**
__ª°ri˘
 
__ho°p
,

433 **
__ª°ri˘
 
__u£Ω
,

434 **
__ª°ri˘
 
__domaöp
,

435 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
);

439 #ifde‡
__USE_BSD


451 
	`rcmd
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

452 c⁄° *
__ª°ri˘
 
__locu£r
,

453 c⁄° *
__ª°ri˘
 
__ªmu£r
,

454 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

463 
	`rcmd_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

464 c⁄° *
__ª°ri˘
 
__locu£r
,

465 c⁄° *
__ª°ri˘
 
__ªmu£r
,

466 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

467 
ß_Ámûy_t
 
__af
);

479 
	`ªxec
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

480 c⁄° *
__ª°ri˘
 
__«me
,

481 c⁄° *
__ª°ri˘
 
__∑ss
,

482 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

491 
	`ªxec_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

492 c⁄° *
__ª°ri˘
 
__«me
,

493 c⁄° *
__ª°ri˘
 
__∑ss
,

494 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

495 
ß_Ámûy_t
 
__af
);

505 
	`ru£rok
 (c⁄° *
__rho°
, 
__su£r
,

506 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
);

515 
	`ru£rok_af
 (c⁄° *
__rho°
, 
__su£r
,

516 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
,

517 
ß_Ámûy_t
 
__af
);

528 
	`úu£rok
 (
uöt32_t
 
__øddr
, 
__su£r
,

529 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
);

539 
	`úu£rok_af
 (c⁄° *
__øddr
, 
__su£r
,

540 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
,

541 
ß_Ámûy_t
 
__af
);

551 
	`ºesvp‹t
 (*
__Æp‹t
);

560 
	`ºesvp‹t_af
 (*
__Æp‹t
, 
ß_Ámûy_t
 
__af
);

565 #ifdef 
__USE_POSIX


567 
	saddröfo


569 
ai_Êags
;

570 
ai_Ámûy
;

571 
ai_sockty≥
;

572 
ai_¥Ÿocﬁ
;

573 
sockÀn_t
 
ai_addæí
;

574 
sockaddr
 *
ai_addr
;

575 *
ai_ˇn⁄«me
;

576 
addröfo
 *
ai_√xt
;

579 #ifde‡
__USE_GNU


581 
	sgaicb


583 c⁄° *
¨_«me
;

584 c⁄° *
¨_£rvi˚
;

585 c⁄° 
addröfo
 *
¨_ªque°
;

586 
addröfo
 *
¨_ªsu…
;

588 
__ªtu∫
;

589 
__glibc_ª£rved
[5];

593 
	#GAI_WAIT
 0

	)

594 
	#GAI_NOWAIT
 1

	)

598 
	#AI_PASSIVE
 0x0001

	)

599 
	#AI_CANONNAME
 0x0002

	)

600 
	#AI_NUMERICHOST
 0x0004

	)

601 
	#AI_V4MAPPED
 0x0008

	)

602 
	#AI_ALL
 0x0010

	)

603 
	#AI_ADDRCONFIG
 0x0020

	)

605 #ifde‡
__USE_GNU


606 
	#AI_IDN
 0x0040

	)

609 
	#AI_CANONIDN
 0x0080

	)

610 
	#AI_IDN_ALLOW_UNASSIGNED
 0x0100

	)

612 
	#AI_IDN_USE_STD3_ASCII_RULES
 0x0200

	)

615 
	#AI_NUMERICSERV
 0x0400

	)

618 
	#EAI_BADFLAGS
 -1

	)

619 
	#EAI_NONAME
 -2

	)

620 
	#EAI_AGAIN
 -3

	)

621 
	#EAI_FAIL
 -4

	)

622 
	#EAI_FAMILY
 -6

	)

623 
	#EAI_SOCKTYPE
 -7

	)

624 
	#EAI_SERVICE
 -8

	)

625 
	#EAI_MEMORY
 -10

	)

626 
	#EAI_SYSTEM
 -11

	)

627 
	#EAI_OVERFLOW
 -12

	)

628 #ifde‡
__USE_GNU


629 
	#EAI_NODATA
 -5

	)

630 
	#EAI_ADDRFAMILY
 -9

	)

631 
	#EAI_INPROGRESS
 -100

	)

632 
	#EAI_CANCELED
 -101

	)

633 
	#EAI_NOTCANCELED
 -102

	)

634 
	#EAI_ALLDONE
 -103

	)

635 
	#EAI_INTR
 -104

	)

636 
	#EAI_IDN_ENCODE
 -105

	)

639 #ifde‡
__USE_MISC


640 
	#NI_MAXHOST
 1025

	)

641 
	#NI_MAXSERV
 32

	)

644 
	#NI_NUMERICHOST
 1

	)

645 
	#NI_NUMERICSERV
 2

	)

646 
	#NI_NOFQDN
 4

	)

647 
	#NI_NAMEREQD
 8

	)

648 
	#NI_DGRAM
 16

	)

649 #ifde‡
__USE_GNU


650 
	#NI_IDN
 32

	)

651 
	#NI_IDN_ALLOW_UNASSIGNED
 64

	)

653 
	#NI_IDN_USE_STD3_ASCII_RULES
 128

	)

662 
	`gëaddröfo
 (c⁄° *
__ª°ri˘
 
__«me
,

663 c⁄° *
__ª°ri˘
 
__£rvi˚
,

664 c⁄° 
addröfo
 *
__ª°ri˘
 
__ªq
,

665 
addröfo
 **
__ª°ri˘
 
__∑i
);

668 
	$‰ìaddröfo
 (
addröfo
 *
__ai
Ë
__THROW
;

671 c⁄° *
	$gai_°ªº‹
 (
__ecode
Ë
__THROW
;

677 
	`gë«meöfo
 (c⁄° 
sockaddr
 *
__ª°ri˘
 
__ß
,

678 
sockÀn_t
 
__ßÀn
, *
__ª°ri˘
 
__ho°
,

679 
sockÀn_t
 
__ho°Àn
, *
__ª°ri˘
 
__£rv
,

680 
sockÀn_t
 
__£rvÀn
, 
__Êags
);

683 #ifde‡
__USE_GNU


692 
	`gëaddröfo_a
 (
__mode
, 
gaicb
 *
__li°
[
__ª°ri˘_¨r
],

693 
__ít
, 
sigevít
 *
__ª°ri˘
 
__sig
);

703 
	`gai_su•íd
 (c⁄° 
gaicb
 *c⁄° 
__li°
[], 
__ít
,

704 c⁄° 
time•ec
 *
__timeout
);

707 
	$gai_îr‹
 (
gaicb
 *
__ªq
Ë
__THROW
;

710 
	$gai_ˇn˚l
 (
gaicb
 *
__gaicbp
Ë
__THROW
;

713 
__END_DECLS


	@/usr/include/netinet/in.h

18 #i‚def 
_NETINET_IN_H


19 
	#_NETINET_IN_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<°döt.h
>

23 
	~<sys/sockë.h
>

24 
	~<bôs/ty≥s.h
>

27 
__BEGIN_DECLS


30 
uöt32_t
 
	tö_addr_t
;

31 
	sö_addr


33 
ö_addr_t
 
	ms_addr
;

37 
	~<bôs/ö.h
>

42 
	mIPPROTO_IP
 = 0,

43 
	#IPPROTO_IP
 
IPPROTO_IP


	)

44 
	mIPPROTO_ICMP
 = 1,

45 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

46 
	mIPPROTO_IGMP
 = 2,

47 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

48 
	mIPPROTO_IPIP
 = 4,

49 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

50 
	mIPPROTO_TCP
 = 6,

51 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

52 
	mIPPROTO_EGP
 = 8,

53 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

54 
	mIPPROTO_PUP
 = 12,

55 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

56 
	mIPPROTO_UDP
 = 17,

57 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

58 
	mIPPROTO_IDP
 = 22,

59 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

60 
	mIPPROTO_TP
 = 29,

61 
	#IPPROTO_TP
 
IPPROTO_TP


	)

62 
	mIPPROTO_DCCP
 = 33,

63 
	#IPPROTO_DCCP
 
IPPROTO_DCCP


	)

64 
	mIPPROTO_IPV6
 = 41,

65 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

66 
	mIPPROTO_RSVP
 = 46,

67 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

68 
	mIPPROTO_GRE
 = 47,

69 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

70 
	mIPPROTO_ESP
 = 50,

71 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

72 
	mIPPROTO_AH
 = 51,

73 
	#IPPROTO_AH
 
IPPROTO_AH


	)

74 
	mIPPROTO_MTP
 = 92,

75 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

76 
	mIPPROTO_BEETPH
 = 94,

77 
	#IPPROTO_BEETPH
 
IPPROTO_BEETPH


	)

78 
	mIPPROTO_ENCAP
 = 98,

79 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

80 
	mIPPROTO_PIM
 = 103,

81 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

82 
	mIPPROTO_COMP
 = 108,

83 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

84 
	mIPPROTO_SCTP
 = 132,

85 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

86 
	mIPPROTO_UDPLITE
 = 136,

87 
	#IPPROTO_UDPLITE
 
IPPROTO_UDPLITE


	)

88 
	mIPPROTO_RAW
 = 255,

89 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

90 
	mIPPROTO_MAX


96 #i‚de‡
__USE_KERNEL_IPV6_DEFS


99 
	mIPPROTO_HOPOPTS
 = 0,

100 
	#IPPROTO_HOPOPTS
 
IPPROTO_HOPOPTS


	)

101 
	mIPPROTO_ROUTING
 = 43,

102 
	#IPPROTO_ROUTING
 
IPPROTO_ROUTING


	)

103 
	mIPPROTO_FRAGMENT
 = 44,

104 
	#IPPROTO_FRAGMENT
 
IPPROTO_FRAGMENT


	)

105 
	mIPPROTO_ICMPV6
 = 58,

106 
	#IPPROTO_ICMPV6
 
IPPROTO_ICMPV6


	)

107 
	mIPPROTO_NONE
 = 59,

108 
	#IPPROTO_NONE
 
IPPROTO_NONE


	)

109 
	mIPPROTO_DSTOPTS
 = 60,

110 
	#IPPROTO_DSTOPTS
 
IPPROTO_DSTOPTS


	)

111 
	mIPPROTO_MH
 = 135

112 
	#IPPROTO_MH
 
IPPROTO_MH


	)

117 
uöt16_t
 
	tö_p‹t_t
;

122 
	mIPPORT_ECHO
 = 7,

123 
	mIPPORT_DISCARD
 = 9,

124 
	mIPPORT_SYSTAT
 = 11,

125 
	mIPPORT_DAYTIME
 = 13,

126 
	mIPPORT_NETSTAT
 = 15,

127 
	mIPPORT_FTP
 = 21,

128 
	mIPPORT_TELNET
 = 23,

129 
	mIPPORT_SMTP
 = 25,

130 
	mIPPORT_TIMESERVER
 = 37,

131 
	mIPPORT_NAMESERVER
 = 42,

132 
	mIPPORT_WHOIS
 = 43,

133 
	mIPPORT_MTP
 = 57,

135 
	mIPPORT_TFTP
 = 69,

136 
	mIPPORT_RJE
 = 77,

137 
	mIPPORT_FINGER
 = 79,

138 
	mIPPORT_TTYLINK
 = 87,

139 
	mIPPORT_SUPDUP
 = 95,

142 
	mIPPORT_EXECSERVER
 = 512,

143 
	mIPPORT_LOGINSERVER
 = 513,

144 
	mIPPORT_CMDSERVER
 = 514,

145 
	mIPPORT_EFSSERVER
 = 520,

148 
	mIPPORT_BIFFUDP
 = 512,

149 
	mIPPORT_WHOSERVER
 = 513,

150 
	mIPPORT_ROUTESERVER
 = 520,

153 
	mIPPORT_RESERVED
 = 1024,

156 
	mIPPORT_USERRESERVED
 = 5000

164 
	#IN_CLASSA
(
a
Ë((((
ö_addr_t
)◊)Ë& 0x80000000Ë=0)

	)

165 
	#IN_CLASSA_NET
 0xff000000

	)

166 
	#IN_CLASSA_NSHIFT
 24

	)

167 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

168 
	#IN_CLASSA_MAX
 128

	)

170 
	#IN_CLASSB
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xc0000000Ë=0x80000000)

	)

171 
	#IN_CLASSB_NET
 0xffff0000

	)

172 
	#IN_CLASSB_NSHIFT
 16

	)

173 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

174 
	#IN_CLASSB_MAX
 65536

	)

176 
	#IN_CLASSC
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xc0000000)

	)

177 
	#IN_CLASSC_NET
 0xffffff00

	)

178 
	#IN_CLASSC_NSHIFT
 8

	)

179 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

181 
	#IN_CLASSD
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xe0000000)

	)

182 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

184 
	#IN_EXPERIMENTAL
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xe0000000)

	)

185 
	#IN_BADCLASS
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xf0000000)

	)

188 
	#INADDR_ANY
 ((
ö_addr_t
Ë0x00000000)

	)

190 
	#INADDR_BROADCAST
 ((
ö_addr_t
Ë0xffffffff)

	)

192 
	#INADDR_NONE
 ((
ö_addr_t
Ë0xffffffff)

	)

195 
	#IN_LOOPBACKNET
 127

	)

197 #i‚de‡
INADDR_LOOPBACK


198 
	#INADDR_LOOPBACK
 ((
ö_addr_t
Ë0x7f000001Ë

	)

202 
	#INADDR_UNSPEC_GROUP
 ((
ö_addr_t
Ë0xe0000000Ë

	)

203 
	#INADDR_ALLHOSTS_GROUP
 ((
ö_addr_t
Ë0xe0000001Ë

	)

204 
	#INADDR_ALLRTRS_GROUP
 ((
ö_addr_t
Ë0xe0000002Ë

	)

205 
	#INADDR_MAX_LOCAL_GROUP
 ((
ö_addr_t
Ë0xe00000ffË

	)

207 #i‚de‡
__USE_KERNEL_IPV6_DEFS


209 
	sö6_addr


213 
uöt8_t
 
	m__u6_addr8
[16];

214 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


215 
uöt16_t
 
	m__u6_addr16
[8];

216 
uöt32_t
 
	m__u6_addr32
[4];

218 } 
	m__ö6_u
;

219 
	#s6_addr
 
__ö6_u
.
__u6_addr8


	)

220 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


221 
	#s6_addr16
 
__ö6_u
.
__u6_addr16


	)

222 
	#s6_addr32
 
__ö6_u
.
__u6_addr32


	)

227 c⁄° 
ö6_addr
 
ö6addr_™y
;

228 c⁄° 
ö6_addr
 
ö6addr_lo›back
;

229 
	#IN6ADDR_ANY_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } } }

	)

230 
	#IN6ADDR_LOOPBACK_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 } } }

	)

232 
	#INET_ADDRSTRLEN
 16

	)

233 
	#INET6_ADDRSTRLEN
 46

	)

237 
	ssockaddr_ö


239 
__SOCKADDR_COMMON
 (
sö_
);

240 
ö_p‹t_t
 
	msö_p‹t
;

241 
ö_addr
 
	msö_addr
;

244 
	msö_zîo
[ (
sockaddr
) -

245 
__SOCKADDR_COMMON_SIZE
 -

246  (
ö_p‹t_t
) -

247  (
ö_addr
)];

250 #i‚de‡
__USE_KERNEL_IPV6_DEFS


252 
	ssockaddr_ö6


254 
__SOCKADDR_COMMON
 (
sö6_
);

255 
ö_p‹t_t
 
	msö6_p‹t
;

256 
uöt32_t
 
	msö6_Êowöfo
;

257 
ö6_addr
 
	msö6_addr
;

258 
uöt32_t
 
	msö6_sc›e_id
;

262 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


264 
	sù_mªq


267 
ö_addr
 
	mimr_mu…üddr
;

270 
ö_addr
 
	mimr_öãrÁ˚
;

273 
	sù_mªq_sour˚


276 
ö_addr
 
	mimr_mu…üddr
;

279 
ö_addr
 
	mimr_öãrÁ˚
;

282 
ö_addr
 
	mimr_sour˚addr
;

286 #i‚de‡
__USE_KERNEL_IPV6_DEFS


288 
	sùv6_mªq


291 
ö6_addr
 
	mùv6mr_mu…üddr
;

294 
	mùv6mr_öãrÁ˚
;

298 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


300 
	sgroup_ªq


303 
uöt32_t
 
	mgr_öãrÁ˚
;

306 
sockaddr_°‹age
 
	mgr_group
;

309 
	sgroup_sour˚_ªq


312 
uöt32_t
 
	mg§_öãrÁ˚
;

315 
sockaddr_°‹age
 
	mg§_group
;

318 
sockaddr_°‹age
 
	mg§_sour˚
;

323 
	sù_msfûãr


326 
ö_addr
 
	mimsf_mu…üddr
;

329 
ö_addr
 
	mimsf_öãrÁ˚
;

332 
uöt32_t
 
	mimsf_fmode
;

335 
uöt32_t
 
	mimsf_num§c
;

337 
ö_addr
 
	mimsf_¶i°
[1];

340 
	#IP_MSFILTER_SIZE
(
num§c
Ë( (
ù_msfûãr
) \

341 -  (
ö_addr
) \

342 + (
num§c
Ë*  (
ö_addr
))

	)

344 
	sgroup_fûãr


347 
uöt32_t
 
	mgf_öãrÁ˚
;

350 
sockaddr_°‹age
 
	mgf_group
;

353 
uöt32_t
 
	mgf_fmode
;

356 
uöt32_t
 
	mgf_num§c
;

358 
sockaddr_°‹age
 
	mgf_¶i°
[1];

361 
	#GROUP_FILTER_SIZE
(
num§c
Ë( (
group_fûãr
) \

362 -  (
sockaddr_°‹age
) \

363 + ((
num§c
) \

364 *  (
sockaddr_°‹age
)))

	)

374 
uöt32_t
 
	$¡ohl
 (
uöt32_t
 
__√é⁄g
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

375 
uöt16_t
 
	$¡ohs
 (
uöt16_t
 
__√tsh‹t
)

376 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

377 
uöt32_t
 
	$ht⁄l
 (
uöt32_t
 
__ho°l⁄g
)

378 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

379 
uöt16_t
 
	$ht⁄s
 (
uöt16_t
 
__ho°sh‹t
)

380 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

382 
	~<ídün.h
>

385 
	~<bôs/byãsw≠.h
>

387 #ifde‡
__OPTIMIZE__


391 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


394 
	#¡ohl
(
x
Ë(x)

	)

395 
	#¡ohs
(
x
Ë(x)

	)

396 
	#ht⁄l
(
x
Ë(x)

	)

397 
	#ht⁄s
(
x
Ë(x)

	)

399 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


400 
	#¡ohl
(
x
Ë
	`__bsw≠_32
 (x)

	)

401 
	#¡ohs
(
x
Ë
	`__bsw≠_16
 (x)

	)

402 
	#ht⁄l
(
x
Ë
	`__bsw≠_32
 (x)

	)

403 
	#ht⁄s
(
x
Ë
	`__bsw≠_16
 (x)

	)

408 #ifde‡
__GNUC__


409 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

410 (
__exãnsi⁄__
 \

411 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

412 
__a
->
s6_addr32
[0] == 0 \

413 && 
__a
->
s6_addr32
[1] == 0 \

414 && 
__a
->
s6_addr32
[2] == 0 \

415 && 
__a
->
s6_addr32
[3] =0; 
	}
}))

	)

417 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

418 (
__exãnsi⁄__
 \

419 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

420 
__a
->
s6_addr32
[0] == 0 \

421 && 
__a
->
s6_addr32
[1] == 0 \

422 && 
__a
->
s6_addr32
[2] == 0 \

423 && 
__a
->
s6_addr32
[3] =
	`ht⁄l
 (1); }))

	)

425 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

426 (
__exãnsi⁄__
 \

427 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

428 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„800000); }))

	)

430 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

431 (
__exãnsi⁄__
 \

432 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

433 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„c00000); }))

	)

435 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

436 (
__exãnsi⁄__
 \

437 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

438 
__a
->
s6_addr32
[0] == 0 \

439 && 
__a
->
s6_addr32
[1] == 0 \

440 && 
__a
->
s6_addr32
[2] =
	`ht⁄l
 (0xffff); }))

	)

442 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

443 (
__exãnsi⁄__
 \

444 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

445 
__a
->
s6_addr32
[0] == 0 \

446 && 
__a
->
s6_addr32
[1] == 0 \

447 && 
__a
->
s6_addr32
[2] == 0 \

448 && 
	`¡ohl
 (
__a
->
s6_addr32
[3]Ë> 1; }))

	)

450 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

451 (
__exãnsi⁄__
 \

452 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

453 c⁄° 
ö6_addr
 *
__b
 = (c⁄° ö6_add∏*Ë(
b
); \

454 
__a
->
s6_addr32
[0] =
__b
->s6_addr32[0] \

455 && 
__a
->
s6_addr32
[1] =
__b
->s6_addr32[1] \

456 && 
__a
->
s6_addr32
[2] =
__b
->s6_addr32[2] \

457 && 
__a
->
s6_addr32
[3] =
__b
->s6_addr32[3]; }))

	)

459 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

460 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

461 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

462 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

463 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =0)

	)

465 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

466 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

467 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

468 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

469 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =
	`ht⁄l
 (1))

	)

471 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

472 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

473 =
	`ht⁄l
 (0x„800000))

	)

475 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

476 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

477 =
	`ht⁄l
 (0x„c00000))

	)

479 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

480 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

481 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

482 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =
	`ht⁄l
 (0xffff)))

	)

484 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

485 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

486 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

487 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0) \

488 && (
	`¡ohl
 (((c⁄° 
uöt32_t
 *Ë(
a
))[3]Ë> 1))

	)

490 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

491 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] =((c⁄° uöt32_à*Ë(
b
))[0]) \

492 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] =((c⁄° uöt32_à*Ë(
b
))[1]) \

493 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =((c⁄° uöt32_à*Ë(
b
))[2]) \

494 && (((c⁄° 
uöt32_t
 *Ë(
a
))[3] =((c⁄° uöt32_à*Ë(
b
))[3]))

	)

497 
	#IN6_IS_ADDR_MULTICAST
(
a
Ë(((c⁄° 
uöt8_t
 *Ë◊))[0] =0xff)

	)

499 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


501 
	$bödªsvp‹t
 (
__sockfd
, 
sockaddr_ö
 *
__sock_ö
Ë
__THROW
;

504 
	$bödªsvp‹t6
 (
__sockfd
, 
sockaddr_ö6
 *
__sock_ö
)

505 
__THROW
;

509 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

510 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

511 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x1))

	)

513 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

514 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

515 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x2))

	)

517 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

518 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

519 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x5))

	)

521 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

522 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

523 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x8))

	)

525 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

526 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

527 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0xe))

	)

530 #ifde‡
__USE_GNU


531 
cmsghdr
;

534 
	sö6_pktöfo


536 
ö6_addr
 
ùi6_addr
;

537 
ùi6_ifödex
;

541 
	sù6_mtuöfo


543 
sockaddr_ö6
 
ù6m_addr
;

544 
uöt32_t
 
ù6m_mtu
;

549 
	$öë6_›ti⁄_•a˚
 (
__nbyãs
)

550 
__THROW
 
__©åibuã_dïªˇãd__
;

551 
	$öë6_›ti⁄_öô
 (*
__bp
, 
cmsghdr
 **
__cmsgp
,

552 
__ty≥
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

553 
	$öë6_›ti⁄_≠≥nd
 (
cmsghdr
 *
__cmsg
,

554 c⁄° 
uöt8_t
 *
__ty≥p
, 
__mu…x
,

555 
__∂usy
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

556 
uöt8_t
 *
	$öë6_›ti⁄_Æloc
 (
cmsghdr
 *
__cmsg
, 
__d©Æí
,

557 
__mu…x
, 
__∂usy
)

558 
__THROW
 
__©åibuã_dïªˇãd__
;

559 
	$öë6_›ti⁄_√xt
 (c⁄° 
cmsghdr
 *
__cmsg
,

560 
uöt8_t
 **
__çåp
)

561 
__THROW
 
__©åibuã_dïªˇãd__
;

562 
	$öë6_›ti⁄_föd
 (c⁄° 
cmsghdr
 *
__cmsg
,

563 
uöt8_t
 **
__çåp
, 
__ty≥
)

564 
__THROW
 
__©åibuã_dïªˇãd__
;

568 
	$öë6_›t_öô
 (*
__extbuf
, 
sockÀn_t
 
__exéí
Ë
__THROW
;

569 
	$öë6_›t_≠≥nd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

570 
uöt8_t
 
__ty≥
, 
sockÀn_t
 
__Àn
, uöt8_à
__Æign
,

571 **
__d©abuÂ
Ë
__THROW
;

572 
	$öë6_›t_föish
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
)

573 
__THROW
;

574 
	$öë6_›t_£t_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

575 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

576 
	$öë6_›t_√xt
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

577 
uöt8_t
 *
__ty≥p
, 
sockÀn_t
 *
__À≈
,

578 **
__d©abuÂ
Ë
__THROW
;

579 
	$öë6_›t_föd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

580 
uöt8_t
 
__ty≥
, 
sockÀn_t
 *
__À≈
,

581 **
__d©abuÂ
Ë
__THROW
;

582 
	$öë6_›t_gë_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

583 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

587 
sockÀn_t
 
	$öë6_πh_•a˚
 (
__ty≥
, 
__£gmíts
Ë
__THROW
;

588 *
	$öë6_πh_öô
 (*
__bp
, 
sockÀn_t
 
__bp_Àn
, 
__ty≥
,

589 
__£gmíts
Ë
__THROW
;

590 
	$öë6_πh_add
 (*
__bp
, c⁄° 
ö6_addr
 *
__addr
Ë
__THROW
;

591 
	$öë6_πh_ªvî£
 (c⁄° *
__ö
, *
__out
Ë
__THROW
;

592 
	$öë6_πh_£gmíts
 (c⁄° *
__bp
Ë
__THROW
;

593 
ö6_addr
 *
	$öë6_πh_gëaddr
 (c⁄° *
__bp
, 
__ödex
)

594 
__THROW
;

600 
	$gëùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

601 
ö_addr
 
__group
, 
uöt32_t
 *
__fmode
,

602 
uöt32_t
 *
__num§c
, 
ö_addr
 *
__¶i°
)

603 
__THROW
;

606 
	$£tùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

607 
ö_addr
 
__group
, 
uöt32_t
 
__fmode
,

608 
uöt32_t
 
__num§c
,

609 c⁄° 
ö_addr
 *
__¶i°
)

610 
__THROW
;

614 
	$gësour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

615 c⁄° 
sockaddr
 *
__group
,

616 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 *
__fmode
,

617 
uöt32_t
 *
__num§c
,

618 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

621 
	$£tsour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

622 c⁄° 
sockaddr
 *
__group
,

623 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 
__fmode
,

624 
uöt32_t
 
__num§c
,

625 c⁄° 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

628 
__END_DECLS


	@/usr/include/poll.h

1 
	~<sys/pﬁl.h
>

	@/usr/include/pthread.h

18 #i‚de‡
_PTHREAD_H


19 
	#_PTHREAD_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<ídün.h
>

23 
	~<sched.h
>

24 
	~<time.h
>

26 
	~<bôs/±hªadty≥s.h
>

27 
	~<bôs/£tjmp.h
>

28 
	~<bôs/w‹dsize.h
>

34 
	mPTHREAD_CREATE_JOINABLE
,

35 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

36 
	mPTHREAD_CREATE_DETACHED


37 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

44 
	mPTHREAD_MUTEX_TIMED_NP
,

45 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

46 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

47 
	mPTHREAD_MUTEX_ADAPTIVE_NP


48 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


50 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

51 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

52 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

53 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


55 #ifde‡
__USE_GNU


57 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


62 #ifde‡
__USE_XOPEN2K


66 
	mPTHREAD_MUTEX_STALLED
,

67 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

68 
	mPTHREAD_MUTEX_ROBUST
,

69 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


74 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


78 
	mPTHREAD_PRIO_NONE
,

79 
	mPTHREAD_PRIO_INHERIT
,

80 
	mPTHREAD_PRIO_PROTECT


86 #i‡
__PTHREAD_MUTEX_HAVE_ELISION
 == 1

87 
	#__PTHREAD_SPINS
 0, 0

	)

88 #ñi‡
__PTHREAD_MUTEX_HAVE_ELISION
 == 2

89 
	#__PTHREAD_SPINS
 { 0, 0 }

	)

91 
	#__PTHREAD_SPINS
 0

	)

94 #ifde‡
__PTHREAD_MUTEX_HAVE_PREV


95 
	#PTHREAD_MUTEX_INITIALIZER
 \

96 { { 0, 0, 0, 0, 0, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

97 #ifde‡
__USE_GNU


98 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

99 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

100 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

101 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

102 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

103 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

104 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

105 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

109 
	#PTHREAD_MUTEX_INITIALIZER
 \

110 { { 0, 0, 0, 0, 0, { 
__PTHREAD_SPINS
 } } }

	)

111 #ifde‡
__USE_GNU


112 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

113 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

114 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

115 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

116 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

117 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

124 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


127 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

128 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

129 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

130 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


136 #i‚de‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


137 #i‡
__WORDSIZE
 == 64

138 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

143 
	#PTHREAD_RWLOCK_INITIALIZER
 \

144 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }

	)

145 #ifde‡
__USE_GNU


146 #ifde‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


147 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

149 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

151 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


152 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

153 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

154 0, 0, 0, 0 } }

	)

156 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

157 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

158 0 } }

	)

168 
	mPTHREAD_INHERIT_SCHED
,

169 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

170 
	mPTHREAD_EXPLICIT_SCHED


171 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

178 
	mPTHREAD_SCOPE_SYSTEM
,

179 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

180 
	mPTHREAD_SCOPE_PROCESS


181 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

188 
	mPTHREAD_PROCESS_PRIVATE
,

189 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

190 
	mPTHREAD_PROCESS_SHARED


191 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

197 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

201 
	s_±hªad_˛ónup_buf„r


203 (*
	m__routöe
) (*);

204 *
	m__¨g
;

205 
	m__ˇn˚…y≥
;

206 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

212 
	mPTHREAD_CANCEL_ENABLE
,

213 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

214 
	mPTHREAD_CANCEL_DISABLE


215 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

219 
	mPTHREAD_CANCEL_DEFERRED
,

220 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

221 
	mPTHREAD_CANCEL_ASYNCHRONOUS


222 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

224 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

228 
	#PTHREAD_ONCE_INIT
 0

	)

231 #ifde‡
__USE_XOPEN2K


235 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

239 
__BEGIN_DECLS


244 
±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

245 c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

246 *(*
__°¨t_routöe
) (*),

247 *
__ª°ri˘
 
__¨g
Ë
__THROWNL
 
__n⁄nuŒ
 ((1, 3));

253 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

261 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

263 #ifde‡
__USE_GNU


266 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

274 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

275 c⁄° 
time•ec
 *
__ab°ime
);

282 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

286 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

289 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
)

290 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

298 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

301 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

302 
__THROW
 
	`__n⁄nuŒ
 ((1));

305 
	$±hªad_©å_gëdëach°©e
 (c⁄° 
±hªad_©å_t
 *
__©å
,

306 *
__dëach°©e
)

307 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

310 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

311 
__dëach°©e
)

312 
__THROW
 
	`__n⁄nuŒ
 ((1));

316 
	$±hªad_©å_gëgu¨dsize
 (c⁄° 
±hªad_©å_t
 *
__©å
,

317 
size_t
 *
__gu¨dsize
)

318 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

321 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

322 
size_t
 
__gu¨dsize
)

323 
__THROW
 
	`__n⁄nuŒ
 ((1));

327 
	$±hªad_©å_gësched∑øm
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

328 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

332 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

333 c⁄° 
sched_∑øm
 *
__ª°ri˘


334 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

337 
	$±hªad_©å_gëschedpﬁicy
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


338 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

339 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

342 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

343 
__THROW
 
	`__n⁄nuŒ
 ((1));

346 
	$±hªad_©å_gëöhîôsched
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


347 
__©å
, *
__ª°ri˘
 
__öhîô
)

348 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

351 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

352 
__öhîô
)

353 
__THROW
 
	`__n⁄nuŒ
 ((1));

357 
	$±hªad_©å_gësc›e
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

358 *
__ª°ri˘
 
__sc›e
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

362 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

363 
__THROW
 
	`__n⁄nuŒ
 ((1));

366 
	$±hªad_©å_gë°ackaddr
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


367 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

368 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

374 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

375 *
__°ackaddr
)

376 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

379 
	$±hªad_©å_gë°acksize
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


380 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

381 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

386 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

387 
size_t
 
__°acksize
)

388 
__THROW
 
	`__n⁄nuŒ
 ((1));

390 #ifde‡
__USE_XOPEN2K


392 
	$±hªad_©å_gë°ack
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

393 **
__ª°ri˘
 
__°ackaddr
,

394 
size_t
 *
__ª°ri˘
 
__°acksize
)

395 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

400 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

401 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

404 #ifde‡
__USE_GNU


407 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

408 
size_t
 
__˝u£tsize
,

409 c⁄° 
˝u_£t_t
 *
__˝u£t
)

410 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

414 
	$±hªad_©å_gëafföôy_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
,

415 
size_t
 
__˝u£tsize
,

416 
˝u_£t_t
 *
__˝u£t
)

417 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

420 
	$±hªad_gë©å_deÁu…_≈
 (
±hªad_©å_t
 *
__©å
)

421 
__THROW
 
	`__n⁄nuŒ
 ((1));

425 
	$±hªad_£èâr_deÁu…_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
)

426 
__THROW
 
	`__n⁄nuŒ
 ((1));

431 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

440 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

441 c⁄° 
sched_∑øm
 *
__∑øm
)

442 
__THROW
 
	`__n⁄nuŒ
 ((3));

445 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

446 *
__ª°ri˘
 
__pﬁicy
,

447 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

448 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

451 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

452 
__THROW
;

455 #ifde‡
__USE_GNU


457 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

458 
size_t
 
__buÊí
)

459 
__THROW
 
	`__n⁄nuŒ
 ((2));

462 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, c⁄° *
__«me
)

463 
__THROW
 
	`__n⁄nuŒ
 ((2));

467 #ifde‡
__USE_UNIX98


469 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

472 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

475 #ifde‡
__USE_GNU


480 
	$±hªad_yõld
 (Ë
__THROW
;

485 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

486 c⁄° 
˝u_£t_t
 *
__˝u£t
)

487 
__THROW
 
	`__n⁄nuŒ
 ((3));

490 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

491 
˝u_£t_t
 *
__˝u£t
)

492 
__THROW
 
	`__n⁄nuŒ
 ((3));

505 
	`±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

506 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

517 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

521 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

524 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

529 
	`±hªad_ã°ˇn˚l
 ();

538 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

539 
__mask_was_ßved
;

540 } 
__ˇn˚l_jmp_buf
[1];

541 *
__∑d
[4];

542 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

545 #i‚de‡
__˛ónup_f˘_©åibuã


546 
	#__˛ónup_f˘_©åibuã


	)

551 
	s__±hªad_˛ónup_‰ame


553 (*
__ˇn˚l_routöe
) (*);

554 *
__ˇn˚l_¨g
;

555 
__do_ô
;

556 
__ˇn˚l_ty≥
;

559 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


560 #ifde‡
__˝lu•lus


562 ˛as†
	c__±hªad_˛ónup_˛ass


564 (*
__ˇn˚l_routöe
) (*);

565 *
__ˇn˚l_¨g
;

566 
__do_ô
;

567 
__ˇn˚l_ty≥
;

569 
public
:

570 
	`__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

571 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

572 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

573 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

574 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

575 &
__ˇn˚l_ty≥
); 
	}
}

576 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

586 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

588 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

592 
	#±hªad_˛ónup_p›
(
execuã
) \

593 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

594 } 0)

	)

596 #ifde‡
__USE_GNU


600 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

602 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

603 
__˛‰ame
.
	`__de„r
 ()

	)

608 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

609 
__˛‰ame
.
	`__ª°‹e
 (); \

610 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

611 } 0)

	)

618 
__exã∫_ölöe
 

619 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

621 i‡(
__‰ame
->
__do_ô
)

622 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

623 
	}
}

632 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

634 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

635 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

636 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

637 .
__do_ô
 = 1 };

	)

641 
	#±hªad_˛ónup_p›
(
execuã
) \

642 
__˛‰ame
.
__do_ô
 = (
execuã
); \

643 } 0)

	)

645 #ifde‡
__USE_GNU


649 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

651 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

652 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

653 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

654 .
__do_ô
 = 1 }; \

655 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

656 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

661 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

662 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

663 
__˛‰ame
.
__do_ô
 = (
execuã
); \

664 } 0)

	)

675 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

677 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

678 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

679 *
__ˇn˚l_¨g
 = (
¨g
); \

680 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

681 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

682 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

684 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

685 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

689 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

690 dÿ{

	)

691 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

692 
__˛ónup_f˘_©åibuã
;

696 
	#±hªad_˛ónup_p›
(
execuã
) \

699 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

700 i‡(
execuã
) \

701 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

702 } 0)

	)

703 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

704 
__˛ónup_f˘_©åibuã
;

706 #ifde‡
__USE_GNU


710 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

712 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

713 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

714 *
__ˇn˚l_¨g
 = (
¨g
); \

715 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

716 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

717 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

719 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

720 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

724 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

725 dÿ{

	)

726 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

727 
__˛ónup_f˘_©åibuã
;

732 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

735 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

736 i‡(
execuã
) \

737 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

738 
	}
} 0)

	)

739 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

740 
__˛ónup_f˘_©åibuã
;

744 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

745 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

746 #i‚de‡
SHARED


747 
	`__©åibuã__
 ((
__wók__
))

753 
__jmp_buf_èg
;

754 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROWNL
;

760 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

761 c⁄° 
±hªad_muãx©å_t
 *
__muãx©å
)

762 
__THROW
 
	`__n⁄nuŒ
 ((1));

765 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

766 
__THROW
 
	`__n⁄nuŒ
 ((1));

769 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

770 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

773 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

774 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

776 #ifde‡
__USE_XOPEN2K


778 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

779 c⁄° 
time•ec
 *
__ª°ri˘


780 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

784 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

785 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

789 
	$±hªad_muãx_gë¥io˚ûög
 (c⁄° 
±hªad_muãx_t
 *

790 
__ª°ri˘
 
__muãx
,

791 *
__ª°ri˘
 
__¥io˚ûög
)

792 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

796 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

797 
__¥io˚ûög
,

798 *
__ª°ri˘
 
__ﬁd_˚ûög
)

799 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

802 #ifde‡
__USE_XOPEN2K8


804 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

805 
__THROW
 
	`__n⁄nuŒ
 ((1));

806 #ifde‡
__USE_GNU


807 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

808 
__THROW
 
	`__n⁄nuŒ
 ((1));

817 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

818 
__THROW
 
	`__n⁄nuŒ
 ((1));

821 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

822 
__THROW
 
	`__n⁄nuŒ
 ((1));

825 
	$±hªad_muãx©å_gëpsh¨ed
 (c⁄° 
±hªad_muãx©å_t
 *

826 
__ª°ri˘
 
__©å
,

827 *
__ª°ri˘
 
__psh¨ed
)

828 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

831 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

832 
__psh¨ed
)

833 
__THROW
 
	`__n⁄nuŒ
 ((1));

835 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


837 
	$±hªad_muãx©å_gëty≥
 (c⁄° 
±hªad_muãx©å_t
 *
__ª°ri˘


838 
__©å
, *
__ª°ri˘
 
__köd
)

839 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

844 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

845 
__THROW
 
	`__n⁄nuŒ
 ((1));

849 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (c⁄° 
±hªad_muãx©å_t
 *

850 
__ª°ri˘
 
__©å
,

851 *
__ª°ri˘
 
__¥Ÿocﬁ
)

852 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

856 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

857 
__¥Ÿocﬁ
)

858 
__THROW
 
	`__n⁄nuŒ
 ((1));

861 
	$±hªad_muãx©å_gë¥io˚ûög
 (c⁄° 
±hªad_muãx©å_t
 *

862 
__ª°ri˘
 
__©å
,

863 *
__ª°ri˘
 
__¥io˚ûög
)

864 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

867 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

868 
__¥io˚ûög
)

869 
__THROW
 
	`__n⁄nuŒ
 ((1));

871 #ifde‡
__USE_XOPEN2K


873 
	$±hªad_muãx©å_gërobu°
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

874 *
__robu°√ss
)

875 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

876 #ifde‡
__USE_GNU


877 
	$±hªad_muãx©å_gërobu°_≈
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

878 *
__robu°√ss
)

879 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

883 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

884 
__robu°√ss
)

885 
__THROW
 
	`__n⁄nuŒ
 ((1));

886 #ifde‡
__USE_GNU


887 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

888 
__robu°√ss
)

889 
__THROW
 
	`__n⁄nuŒ
 ((1));

894 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


899 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

900 c⁄° 
±hªad_rwlock©å_t
 *
__ª°ri˘


901 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

904 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

905 
__THROW
 
	`__n⁄nuŒ
 ((1));

908 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

909 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

912 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

913 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

915 #ifde‡
__USE_XOPEN2K


917 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

918 c⁄° 
time•ec
 *
__ª°ri˘


919 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

923 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

924 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

927 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

928 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

930 #ifde‡
__USE_XOPEN2K


932 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

933 c⁄° 
time•ec
 *
__ª°ri˘


934 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

938 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

939 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

945 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

946 
__THROW
 
	`__n⁄nuŒ
 ((1));

949 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

950 
__THROW
 
	`__n⁄nuŒ
 ((1));

953 
	$±hªad_rwlock©å_gëpsh¨ed
 (c⁄° 
±hªad_rwlock©å_t
 *

954 
__ª°ri˘
 
__©å
,

955 *
__ª°ri˘
 
__psh¨ed
)

956 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

959 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

960 
__psh¨ed
)

961 
__THROW
 
	`__n⁄nuŒ
 ((1));

964 
	$±hªad_rwlock©å_gëköd_≈
 (c⁄° 
±hªad_rwlock©å_t
 *

965 
__ª°ri˘
 
__©å
,

966 *
__ª°ri˘
 
__¥ef
)

967 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

970 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

971 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

979 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

980 c⁄° 
±hªad_c⁄d©å_t
 *
__ª°ri˘
 
__c⁄d_©å
)

981 
__THROW
 
	`__n⁄nuŒ
 ((1));

984 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

985 
__THROW
 
	`__n⁄nuŒ
 ((1));

988 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

989 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

992 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

993 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1000 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1001 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

1002 
	`__n⁄nuŒ
 ((1, 2));

1011 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1012 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

1013 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
)

1014 
	`__n⁄nuŒ
 ((1, 2, 3));

1019 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

1020 
__THROW
 
	`__n⁄nuŒ
 ((1));

1023 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

1024 
__THROW
 
	`__n⁄nuŒ
 ((1));

1027 
	$±hªad_c⁄d©å_gëpsh¨ed
 (c⁄° 
±hªad_c⁄d©å_t
 *

1028 
__ª°ri˘
 
__©å
,

1029 *
__ª°ri˘
 
__psh¨ed
)

1030 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1033 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1034 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1036 #ifde‡
__USE_XOPEN2K


1038 
	$±hªad_c⁄d©å_gë˛ock
 (c⁄° 
±hªad_c⁄d©å_t
 *

1039 
__ª°ri˘
 
__©å
,

1040 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1041 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1044 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1045 
__˛ockid_t
 
__˛ock_id
)

1046 
__THROW
 
	`__n⁄nuŒ
 ((1));

1050 #ifde‡
__USE_XOPEN2K


1055 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1056 
__THROW
 
	`__n⁄nuŒ
 ((1));

1059 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1060 
__THROW
 
	`__n⁄nuŒ
 ((1));

1063 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1064 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1067 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1068 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1071 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1072 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1079 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1080 c⁄° 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1081 
__©å
, 
__cou¡
)

1082 
__THROW
 
	`__n⁄nuŒ
 ((1));

1085 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1086 
__THROW
 
	`__n⁄nuŒ
 ((1));

1089 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1090 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1094 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1095 
__THROW
 
	`__n⁄nuŒ
 ((1));

1098 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1099 
__THROW
 
	`__n⁄nuŒ
 ((1));

1102 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (c⁄° 
±hªad_b¨rõøâr_t
 *

1103 
__ª°ri˘
 
__©å
,

1104 *
__ª°ri˘
 
__psh¨ed
)

1105 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1108 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1109 
__psh¨ed
)

1110 
__THROW
 
	`__n⁄nuŒ
 ((1));

1122 
	`±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1123 (*
__de°r_fun˘i⁄
) (*))

1124 
__THROW
 
	`__n⁄nuŒ
 ((1));

1127 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1130 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1133 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1134 c⁄° *
__poöãr
Ë
__THROW
 ;

1137 #ifde‡
__USE_XOPEN2K


1139 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1140 
__˛ockid_t
 *
__˛ock_id
)

1141 
__THROW
 
	`__n⁄nuŒ
 ((2));

1156 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1157 (*
__∑ª¡
) (),

1158 (*
__chûd
Ë()Ë
__THROW
;

1161 #ifde‡
__USE_EXTERN_INLINES


1163 
__exã∫_ölöe
 

1164 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1166  
__thªad1
 =
__thªad2
;

1167 
	}
}

1170 
	g__END_DECLS


	@/usr/include/pwd.h

22 #i‚def 
_PWD_H


23 
	#_PWD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 
	#__√ed_size_t


	)

32 
	~<°ddef.h
>

34 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


37 #i‚de‡
__gid_t_deföed


38 
__gid_t
 
	tgid_t
;

39 
	#__gid_t_deföed


	)

42 #i‚de‡
__uid_t_deföed


43 
__uid_t
 
	tuid_t
;

44 
	#__uid_t_deföed


	)

49 
	s∑sswd


51 *
	mpw_«me
;

52 *
	mpw_∑sswd
;

53 
__uid_t
 
	mpw_uid
;

54 
__gid_t
 
	mpw_gid
;

55 *
	mpw_gecos
;

56 *
	mpw_dú
;

57 *
	mpw_shñl
;

61 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_GNU


62 
	#__√ed_FILE


	)

63 
	~<°dio.h
>

67 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


72 
£çwít
 ();

78 
ídpwít
 ();

84 
∑sswd
 *
gëpwít
 ();

87 #ifdef 
__USE_SVID


94 
∑sswd
 *
fgëpwít
 (
FILE
 *
__°ªam
);

102 
puçwít
 (c⁄° 
∑sswd
 *
__ª°ri˘
 
__p
,

103 
FILE
 *
__ª°ri˘
 
__f
);

110 
∑sswd
 *
gëpwuid
 (
__uid_t
 
__uid
);

116 
∑sswd
 *
gëpw«m
 (c⁄° *
__«me
);

118 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


120 #ifde‡
__USE_MISC


123 
	#NSS_BUFLEN_PASSWD
 1024

	)

134 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


139 
gëpwít_r
 (
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

140 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

141 
∑sswd
 **
__ª°ri˘
 
__ªsu…
);

144 
gëpwuid_r
 (
__uid_t
 
__uid
,

145 
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

146 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

147 
∑sswd
 **
__ª°ri˘
 
__ªsu…
);

149 
gëpw«m_r
 (c⁄° *
__ª°ri˘
 
__«me
,

150 
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

151 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

152 
∑sswd
 **
__ª°ri˘
 
__ªsu…
);

155 #ifdef 
__USE_SVID


163 
fgëpwít_r
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

164 
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

165 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

166 
∑sswd
 **
__ª°ri˘
 
__ªsu…
);

171 #ifde‡
__USE_GNU


180 
gëpw
 (
__uid_t
 
__uid
, *
__buf„r
);

183 
	g__END_DECLS


	@/usr/include/setjmp.h

22 #i‚def 
_SETJMP_H


23 
	#_SETJMP_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/£tjmp.h
>

30 
	~<bôs/sig£t.h
>

34 
	s__jmp_buf_èg


40 
__jmp_buf
 
	m__jmpbuf
;

41 
	m__mask_was_ßved
;

42 
__sig£t_t
 
	m__ßved_mask
;

46 
__BEGIN_NAMESPACE_STD


48 
__jmp_buf_èg
 
	tjmp_buf
[1];

52 
	$£tjmp
 (
jmp_buf
 
__ív
Ë
__THROWNL
;

54 
__END_NAMESPACE_STD


59 
	$__sig£tjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__ßvemask
Ë
__THROWNL
;

63 
	$_£tjmp
 (
__jmp_buf_èg
 
__ív
[1]Ë
__THROWNL
;

67 
	#£tjmp
(
ív
Ë
	`_£tjmp
 (ív)

	)

70 
__BEGIN_NAMESPACE_STD


74 
	$l⁄gjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
)

75 
__THROWNL
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

77 
__END_NAMESPACE_STD


79 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


83 
	$_l⁄gjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
)

84 
__THROWNL
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

88 #ifdef 
__USE_POSIX


92 
__jmp_buf_èg
 
	tsigjmp_buf
[1];

96 
	#sig£tjmp
(
ív
, 
ßvemask
Ë
	`__sig£tjmp
 (ív, savemask)

	)

102 
	$sigl⁄gjmp
 (
sigjmp_buf
 
__ív
, 
__vÆ
)

103 
__THROWNL
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

108 #i‡
__USE_FORTIFY_LEVEL
 > 0

109 
	~<bôs/£tjmp2.h
>

112 
__END_DECLS


	@/usr/include/shadow.h

20 #i‚de‡
_SHADOW_H


21 
	#_SHADOW_H
 1

	)

23 
	~<„©uªs.h
>

25 
	~<∑ths.h
>

27 
	#__√ed_FILE


	)

28 
	~<°dio.h
>

29 
	#__√ed_size_t


	)

30 
	~<°ddef.h
>

33 
	#SHADOW
 
_PATH_SHADOW


	)

36 
__BEGIN_DECLS


39 
	s•wd


41 *
	m•_«mp
;

42 *
	m•_pwdp
;

43 
	m•_l°chg
;

44 
	m•_mö
;

45 
	m•_max
;

46 
	m•_w¨n
;

48 
	m•_öa˘
;

50 
	m•_expúe
;

52 
	m•_Êag
;

62 
£t•ít
 ();

70 
íd•ít
 ();

78 
•wd
 *
gë•ít
 ();

86 
•wd
 *
gë•«m
 (c⁄° *
__«me
);

94 
•wd
 *
sgë•ít
 (c⁄° *
__°rög
);

102 
•wd
 *
fgë•ít
 (
FILE
 *
__°ªam
);

110 
put•ít
 (c⁄° 
•wd
 *
__p
, 
FILE
 *
__°ªam
);

113 #ifde‡
__USE_MISC


120 
gë•ít_r
 (
•wd
 *
__ªsu…_buf
, *
__buf„r
,

121 
size_t
 
__buÊí
, 
•wd
 **
__ªsu…
);

123 
gë•«m_r
 (c⁄° *
__«me
, 
•wd
 *
__ªsu…_buf
,

124 *
__buf„r
, 
size_t
 
__buÊí
,

125 
•wd
 **
__ªsu…
);

127 
sgë•ít_r
 (c⁄° *
__°rög
, 
•wd
 *
__ªsu…_buf
,

128 *
__buf„r
, 
size_t
 
__buÊí
,

129 
•wd
 **
__ªsu…
);

131 
fgë•ít_r
 (
FILE
 *
__°ªam
, 
•wd
 *
__ªsu…_buf
,

132 *
__buf„r
, 
size_t
 
__buÊí
,

133 
•wd
 **
__ªsu…
);

141 
	$lckpwdf
 (Ë
__THROW
;

144 
	$ulckpwdf
 (Ë
__THROW
;

146 
__END_DECLS


	@/usr/include/signal.h

22 #i‚def 
_SIGNAL_H


24 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


25 
	#_SIGNAL_H


	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	~<bôs/sig£t.h
>

36 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


37 #i‚de‡
__sig_©omic_t_deföed


38 
	#__sig_©omic_t_deföed


	)

39 
__BEGIN_NAMESPACE_STD


40 
__sig_©omic_t
 
	tsig_©omic_t
;

41 
	g__END_NAMESPACE_STD


43 #unde‡
__√ed_sig_©omic_t


46 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

47 #i‚de‡
__sig£t_t_deföed


48 
	#__sig£t_t_deföed


	)

49 
__sig£t_t
 
	tsig£t_t
;

51 #unde‡
__√ed_sig£t_t


54 #ifde‡
_SIGNAL_H


56 
	~<bôs/ty≥s.h
>

57 
	~<bôs/signum.h
>

59 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


60 #i‚de‡
__pid_t_deföed


61 
__pid_t
 
	tpid_t
;

62 
	#__pid_t_deföed


	)

64 #ifde‡
__USE_XOPEN


66 #i‚de‡
__uid_t_deföed


67 
__uid_t
 
	tuid_t
;

68 
	#__uid_t_deföed


	)

72 #ifde‡
__USE_POSIX199309


74 
	#__√ed_time•ec


	)

75 
	~<time.h
>

78 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_XOPEN_EXTENDED


80 
	~<bôs/sigöfo.h
>

85 (*
	t__sigh™dÀr_t
) ();

90 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

91 
__THROW
;

92 #ifde‡
__USE_GNU


93 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

94 
__THROW
;

100 
__BEGIN_NAMESPACE_STD


101 #ifde‡
__USE_BSD


102 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

103 
__THROW
;

106 #ifde‡
__REDIRECT_NTH


107 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

108 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

109 
__sysv_sig«l
);

111 
	#sig«l
 
__sysv_sig«l


	)

114 
__END_NAMESPACE_STD


116 #ifde‡
__USE_XOPEN


119 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

120 
__THROW
;

126 #ifde‡
__USE_POSIX


127 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

130 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


134 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

137 
__BEGIN_NAMESPACE_STD


139 
	$øi£
 (
__sig
Ë
__THROW
;

140 
__END_NAMESPACE_STD


142 #ifde‡
__USE_SVID


144 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

145 
__THROW
;

146 
	$gsig«l
 (
__sig
Ë
__THROW
;

149 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K


151 
	`psig«l
 (
__sig
, c⁄° *
__s
);

154 #ifde‡
__USE_XOPEN2K


156 
	`psigöfo
 (c⁄° 
sigöfo_t
 *
__pöfo
, c⁄° *
__s
);

167 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

169 #ifde‡
__USE_XOPEN


170 #ifde‡
__GNUC__


171 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

174 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

179 #ifde‡
__USE_BSD


186 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

189 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

192 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

195 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

199 #ifde‡
__USE_MISC


200 
	#NSIG
 
_NSIG


	)

203 #ifde‡
__USE_GNU


204 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

208 #ifde‡
__USE_BSD


209 
__sigh™dÀr_t
 
	tsig_t
;

212 #ifde‡
__USE_POSIX


215 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

218 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

221 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

224 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

227 
	$sigismembî
 (c⁄° 
sig£t_t
 *
__£t
, 
__signo
)

228 
__THROW
 
	`__n⁄nuŒ
 ((1));

230 #ifde‡
__USE_GNU


232 
	$sigi£m±y£t
 (c⁄° 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

235 
	$sig™d£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

236 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

239 
	$sig‹£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

240 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

245 
	~<bôs/siga˘i⁄.h
>

248 
	$sig¥ocmask
 (
__how
, c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

249 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

256 
	$sigsu•íd
 (c⁄° 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

259 
	$siga˘i⁄
 (
__sig
, c⁄° 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

260 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

263 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

270 
	$sigwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

271 
	`__n⁄nuŒ
 ((1, 2));

273 #ifde‡
__USE_POSIX199309


278 
	$sigwaôöfo
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

279 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

286 
	$sigtimedwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

287 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

288 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
)

289 
	`__n⁄nuŒ
 ((1));

293 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, c⁄° 
sigvÆ
 
__vÆ
)

294 
__THROW
;

299 #ifde‡
__USE_BSD


303 c⁄° *c⁄° 
_sys_sigli°
[
_NSIG
];

304 c⁄° *c⁄° 
sys_sigli°
[
_NSIG
];

307 
	ssigvec


309 
__sigh™dÀr_t
 
sv_h™dÀr
;

310 
sv_mask
;

312 
sv_Êags
;

313 
	#sv_⁄°ack
 
sv_Êags


	)

317 
	#SV_ONSTACK
 (1 << 0)

	)

318 
	#SV_INTERRUPT
 (1 << 1)

	)

319 
	#SV_RESETHAND
 (1 << 2)

	)

327 
	$sigvec
 (
__sig
, c⁄° 
sigvec
 *
__vec
,

328 
sigvec
 *
__ovec
Ë
__THROW
;

332 
	~<bôs/sigc⁄ãxt.h
>

335 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

340 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


341 
	#__√ed_size_t


	)

342 
	~<°ddef.h
>

347 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

349 
	~<bôs/sig°ack.h
>

350 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


352 
	~<sys/uc⁄ãxt.h
>

358 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

359 
__THROW
 
__©åibuã_dïªˇãd__
;

363 
	$sigÆt°ack
 (c⁄° 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

364 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

368 #ifde‡
__USE_XOPEN_EXTENDED


372 
	$sighﬁd
 (
__sig
Ë
__THROW
;

375 
	$sigªl£
 (
__sig
Ë
__THROW
;

378 
	$sigign‹e
 (
__sig
Ë
__THROW
;

381 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

384 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


387 
	~<bôs/±hªadty≥s.h
>

388 
	~<bôs/sigthªad.h
>

395 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

397 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

401 
__END_DECLS


	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


25 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


26 
	#_STDIO_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	~<bôs/ty≥s.h
>

36 
	#__√ed_FILE


	)

37 
	#__√ed___FILE


	)

41 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


44 
	g_IO_FILE
;

46 
__BEGIN_NAMESPACE_STD


48 
_IO_FILE
 
	tFILE
;

49 
	g__END_NAMESPACE_STD


50 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

51 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

52 || 
deföed
 
__USE_POSIX2


53 
	$__USING_NAMESPACE_STD
(
FILE
)

56 
	#__FILE_deföed
 1

	)

58 #unde‡
__√ed_FILE


61 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


64 
_IO_FILE
 
	t__FILE
;

66 
	#____FILE_deföed
 1

	)

68 #unde‡
__√ed___FILE


71 #ifdef 
_STDIO_H


72 
	#_STDIO_USES_IOSTREAM


	)

74 
	~<libio.h
>

76 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


77 #ifde‡
__GNUC__


78 #i‚de‡
_VA_LIST_DEFINED


79 
_G_va_li°
 
	tva_li°
;

80 
	#_VA_LIST_DEFINED


	)

83 
	~<°d¨g.h
>

87 #ifde‡
__USE_XOPEN2K8


88 #i‚de‡
__off_t_deföed


89 #i‚de‡
__USE_FILE_OFFSET64


90 
__off_t
 
	toff_t
;

92 
__off64_t
 
	toff_t
;

94 
	#__off_t_deföed


	)

96 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


97 
__off64_t
 
	toff64_t
;

98 
	#__off64_t_deföed


	)

101 #i‚de‡
__ssize_t_deföed


102 
__ssize_t
 
	tssize_t
;

103 
	#__ssize_t_deföed


	)

108 
__BEGIN_NAMESPACE_STD


109 #i‚de‡
__USE_FILE_OFFSET64


110 
_G_Âos_t
 
	tÂos_t
;

112 
_G_Âos64_t
 
	tÂos_t
;

114 
__END_NAMESPACE_STD


115 #ifde‡
__USE_LARGEFILE64


116 
_G_Âos64_t
 
	tÂos64_t
;

120 
	#_IOFBF
 0

	)

121 
	#_IOLBF
 1

	)

122 
	#_IONBF
 2

	)

126 #i‚de‡
BUFSIZ


127 
	#BUFSIZ
 
_IO_BUFSIZ


	)

133 #i‚de‡
EOF


134 
	#EOF
 (-1)

	)

140 
	#SEEK_SET
 0

	)

141 
	#SEEK_CUR
 1

	)

142 
	#SEEK_END
 2

	)

143 #ifde‡
__USE_GNU


144 
	#SEEK_DATA
 3

	)

145 
	#SEEK_HOLE
 4

	)

149 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


151 
	#P_tmpdú
 "/tmp"

	)

164 
	~<bôs/°dio_lim.h
>

168 
_IO_FILE
 *
°dö
;

169 
_IO_FILE
 *
°dout
;

170 
_IO_FILE
 *
°dîr
;

172 
	#°dö
 
°dö


	)

173 
	#°dout
 
°dout


	)

174 
	#°dîr
 
°dîr


	)

176 
__BEGIN_NAMESPACE_STD


178 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

180 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

181 
__END_NAMESPACE_STD


183 #ifde‡
__USE_ATFILE


185 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

186 c⁄° *
__√w
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


194 #i‚de‡
__USE_FILE_OFFSET64


195 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

197 #ifde‡
__REDIRECT


198 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

200 
	#tmpfûe
 
tmpfûe64


	)

204 #ifde‡
__USE_LARGEFILE64


205 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

209 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

210 
__END_NAMESPACE_STD


212 #ifde‡
__USE_MISC


215 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

219 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


227 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

228 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

232 
__BEGIN_NAMESPACE_STD


237 
	`f˛o£
 (
FILE
 *
__°ªam
);

242 
	`fÊush
 (
FILE
 *
__°ªam
);

243 
__END_NAMESPACE_STD


245 #ifde‡
__USE_MISC


252 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

255 #ifde‡
__USE_GNU


262 
	`f˛o£Æl
 ();

266 
__BEGIN_NAMESPACE_STD


267 #i‚de‡
__USE_FILE_OFFSET64


272 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

273 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

278 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

279 c⁄° *
__ª°ri˘
 
__modes
,

280 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

282 #ifde‡
__REDIRECT


283 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

284 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

285 
__wur
;

286 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

287 c⁄° *
__ª°ri˘
 
__modes
,

288 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

289 
__wur
;

291 
	#f›í
 
f›í64


	)

292 
	#‰e›í
 
‰e›í64


	)

295 
__END_NAMESPACE_STD


296 #ifde‡
__USE_LARGEFILE64


297 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

298 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

299 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

300 c⁄° *
__ª°ri˘
 
__modes
,

301 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

304 #ifdef 
__USE_POSIX


306 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

309 #ifdef 
__USE_GNU


312 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

313 c⁄° *
__ª°ri˘
 
__modes
,

314 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

317 #ifde‡
__USE_XOPEN2K8


319 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

320 
__THROW
 
__wur
;

325 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

329 
__BEGIN_NAMESPACE_STD


332 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

336 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

337 
__modes
, 
size_t
 
__n
Ë
__THROW
;

338 
__END_NAMESPACE_STD


340 #ifdef 
__USE_BSD


343 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

344 
size_t
 
__size
Ë
__THROW
;

347 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

351 
__BEGIN_NAMESPACE_STD


356 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

357 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

362 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

364 
	$•rötf
 (*
__ª°ri˘
 
__s
,

365 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

371 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

372 
_G_va_li°
 
__¨g
);

377 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

379 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

380 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

381 
__END_NAMESPACE_STD


383 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


384 
__BEGIN_NAMESPACE_C99


386 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

387 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

388 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

390 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

391 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

392 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

393 
__END_NAMESPACE_C99


396 #ifde‡
__USE_GNU


399 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

400 
_G_va_li°
 
__¨g
)

401 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

402 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

403 c⁄° *
__ª°ri˘
 
__fmt
, ...)

404 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

405 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

406 c⁄° *
__ª°ri˘
 
__fmt
, ...)

407 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

410 #ifde‡
__USE_XOPEN2K8


412 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

413 
_G_va_li°
 
__¨g
)

414 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

415 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

416 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

420 
__BEGIN_NAMESPACE_STD


425 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

426 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

431 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

433 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

434 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

436 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

437 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

438 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

439 #ifde‡
__REDIRECT


443 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

444 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

445 
__isoc99_fsˇnf
Ë
__wur
;

446 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

447 
__isoc99_sˇnf
Ë
__wur
;

448 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

449 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

450 
__isoc99_ssˇnf
);

452 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

453 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

454 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

455 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

456 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

457 
	#fsˇnf
 
__isoc99_fsˇnf


	)

458 
	#sˇnf
 
__isoc99_sˇnf


	)

459 
	#ssˇnf
 
__isoc99_ssˇnf


	)

463 
__END_NAMESPACE_STD


465 #ifdef 
__USE_ISOC99


466 
__BEGIN_NAMESPACE_C99


471 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

472 
_G_va_li°
 
__¨g
)

473 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

479 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

480 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

483 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

484 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

485 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

487 #i‡!
deföed
 
__USE_GNU
 \

488 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

489 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

490 #ifde‡
__REDIRECT


494 
	`__REDIRECT
 (
vfsˇnf
,

495 (
FILE
 *
__ª°ri˘
 
__s
,

496 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

497 
__isoc99_vfsˇnf
)

498 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

499 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

500 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

501 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

502 
	`__REDIRECT_NTH
 (
vssˇnf
,

503 (c⁄° *
__ª°ri˘
 
__s
,

504 c⁄° *
__ª°ri˘
 
__f‹m©
,

505 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

506 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

508 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

509 c⁄° *
__ª°ri˘
 
__f‹m©
,

510 
_G_va_li°
 
__¨g
Ë
__wur
;

511 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

512 
_G_va_li°
 
__¨g
Ë
__wur
;

513 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

514 c⁄° *
__ª°ri˘
 
__f‹m©
,

515 
_G_va_li°
 
__¨g
Ë
__THROW
;

516 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

517 
	#vsˇnf
 
__isoc99_vsˇnf


	)

518 
	#vssˇnf
 
__isoc99_vssˇnf


	)

522 
__END_NAMESPACE_C99


526 
__BEGIN_NAMESPACE_STD


531 
	`fgëc
 (
FILE
 *
__°ªam
);

532 
	`gëc
 (
FILE
 *
__°ªam
);

538 
	`gëch¨
 ();

539 
__END_NAMESPACE_STD


543 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

545 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


550 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

551 
	`gëch¨_u∆ocked
 ();

554 #ifde‡
__USE_MISC


561 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

565 
__BEGIN_NAMESPACE_STD


573 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

574 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

580 
	`putch¨
 (
__c
);

581 
__END_NAMESPACE_STD


585 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

587 #ifde‡
__USE_MISC


594 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

597 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


602 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

603 
	`putch¨_u∆ocked
 (
__c
);

607 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

608 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

610 
	`gëw
 (
FILE
 *
__°ªam
);

613 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

617 
__BEGIN_NAMESPACE_STD


622 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

623 
__wur
;

625 #i‡!
deföed
 
__USE_ISOC11
 \

626 || (
deföed
 
__˝lu•lus
 && __cplusplus <= 201103L)

638 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

640 
__END_NAMESPACE_STD


642 #ifde‡
__USE_GNU


649 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

650 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

654 #ifdef 
__USE_XOPEN2K8


665 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

666 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

667 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

668 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

669 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

670 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

678 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

679 
size_t
 *
__ª°ri˘
 
__n
,

680 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

684 
__BEGIN_NAMESPACE_STD


689 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

695 
	`puts
 (c⁄° *
__s
);

702 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

709 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

710 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

715 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

716 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

717 
__END_NAMESPACE_STD


719 #ifde‡
__USE_GNU


726 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

727 
FILE
 *
__ª°ri˘
 
__°ªam
);

730 #ifde‡
__USE_MISC


737 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

738 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

739 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

740 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

744 
__BEGIN_NAMESPACE_STD


749 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

754 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

759 
	`ªwöd
 (
FILE
 *
__°ªam
);

760 
__END_NAMESPACE_STD


767 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


768 #i‚de‡
__USE_FILE_OFFSET64


773 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

778 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

780 #ifde‡
__REDIRECT


781 
	`__REDIRECT
 (
f£eko
,

782 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

783 
f£eko64
);

784 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

786 
	#f£eko
 
f£eko64


	)

787 
	#·ñlo
 
·ñlo64


	)

792 
__BEGIN_NAMESPACE_STD


793 #i‚de‡
__USE_FILE_OFFSET64


798 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

803 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

805 #ifde‡
__REDIRECT


806 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

807 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

808 
	`__REDIRECT
 (
f£ços
,

809 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

811 
	#fgëpos
 
fgëpos64


	)

812 
	#f£ços
 
f£ços64


	)

815 
__END_NAMESPACE_STD


817 #ifde‡
__USE_LARGEFILE64


818 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

819 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

820 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

821 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

824 
__BEGIN_NAMESPACE_STD


826 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

828 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

830 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

831 
__END_NAMESPACE_STD


833 #ifde‡
__USE_MISC


835 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

836 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

837 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

841 
__BEGIN_NAMESPACE_STD


846 
	`≥º‹
 (c⁄° *
__s
);

847 
__END_NAMESPACE_STD


853 
	~<bôs/sys_îæi°.h
>

856 #ifdef 
__USE_POSIX


858 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

861 #ifde‡
__USE_MISC


863 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

867 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

868 
deföed
 
__USE_MISC
)

873 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

879 
	`p˛o£
 (
FILE
 *
__°ªam
);

883 #ifdef 
__USE_POSIX


885 *
	$˘îmid
 (*
__s
Ë
__THROW
;

889 #ifde‡
__USE_XOPEN


891 *
	`cu£rid
 (*
__s
);

895 #ifdef 
__USE_GNU


896 
ob°ack
;

899 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

900 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

901 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

902 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

903 c⁄° *
__ª°ri˘
 
__f‹m©
,

904 
_G_va_li°
 
__¨gs
)

905 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

909 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


913 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

917 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

920 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

923 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


927 
	#__√ed_gë›t


	)

928 
	~<gë›t.h
>

933 #ifde‡
__USE_EXTERN_INLINES


934 
	~<bôs/°dio.h
>

936 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


937 
	~<bôs/°dio2.h
>

939 #ifde‡
__LDBL_COMPAT


940 
	~<bôs/°dio-ldbl.h
>

943 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

34 
	g__BEGIN_DECLS


36 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


37 
	#_STDLIB_H
 1

	)

39 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


41 
	~<bôs/waôÊags.h
>

42 
	~<bôs/waô°©us.h
>

44 #ifde‡
__USE_BSD


49 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


50 
	#__WAIT_INT
(
°©us
) \

51 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

52 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

54 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

62 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


63 
	#__WAIT_STATUS
 *

	)

64 
	#__WAIT_STATUS_DEFN
 *

	)

69 
waô
 *
	m__u±r
;

70 *
	m__ùå
;

71 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

72 
	#__WAIT_STATUS_DEFN
 *

	)

77 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

78 
	#__WAIT_STATUS
 *

	)

79 
	#__WAIT_STATUS_DEFN
 *

	)

84 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

85 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

90 #ifde‡
__WIFCONTINUED


91 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

95 
__BEGIN_NAMESPACE_STD


99 
	mquŸ
;

100 
	mªm
;

101 } 
	tdiv_t
;

104 #i‚de‡
__ldiv_t_deföed


107 
	mquŸ
;

108 
	mªm
;

109 } 
	tldiv_t
;

110 
	#__ldiv_t_deföed
 1

	)

112 
	g__END_NAMESPACE_STD


114 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


115 
__BEGIN_NAMESPACE_C99


117 
__exãnsi⁄__
 struct

119 
	mquŸ
;

120 
	mªm
;

121 } 
	tŒdiv_t
;

122 
	#__Œdiv_t_deföed
 1

	)

123 
	g__END_NAMESPACE_C99


128 
	#RAND_MAX
 2147483647

	)

133 
	#EXIT_FAILURE
 1

	)

134 
	#EXIT_SUCCESS
 0

	)

138 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

139 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

142 
__BEGIN_NAMESPACE_STD


144 
	$©of
 (c⁄° *
__≈å
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

147 
	$©oi
 (c⁄° *
__≈å
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

150 
	$©ﬁ
 (c⁄° *
__≈å
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

152 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_MISC


155 
__BEGIN_NAMESPACE_C99


157 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

158 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

159 
__END_NAMESPACE_C99


162 
__BEGIN_NAMESPACE_STD


164 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

167 
__END_NAMESPACE_STD


169 #ifdef 
__USE_ISOC99


170 
__BEGIN_NAMESPACE_C99


172 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

173 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

175 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

176 **
__ª°ri˘
 
__íd±r
)

177 
__THROW
 
	`__n⁄nuŒ
 ((1));

178 
__END_NAMESPACE_C99


181 
__BEGIN_NAMESPACE_STD


183 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

184 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

185 
__THROW
 
	`__n⁄nuŒ
 ((1));

187 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

190 
__END_NAMESPACE_STD


192 #ifde‡
__USE_BSD


194 
__exãnsi⁄__


195 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

196 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

197 
__THROW
 
	`__n⁄nuŒ
 ((1));

199 
__exãnsi⁄__


200 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

205 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_MISC


206 
__BEGIN_NAMESPACE_C99


208 
__exãnsi⁄__


209 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

210 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

211 
__THROW
 
	`__n⁄nuŒ
 ((1));

213 
__exãnsi⁄__


214 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

215 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1));

217 
__END_NAMESPACE_C99


221 #ifde‡
__USE_GNU


235 
	~<xloˇÀ.h
>

239 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

240 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

241 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

243 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

244 **
__ª°ri˘
 
__íd±r
,

245 
__ba£
, 
__loˇÀ_t
 
__loc
)

246 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

248 
__exãnsi⁄__


249 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

250 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

251 
__loˇÀ_t
 
__loc
)

252 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

254 
__exãnsi⁄__


255 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

256 **
__ª°ri˘
 
__íd±r
,

257 
__ba£
, 
__loˇÀ_t
 
__loc
)

258 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

260 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

261 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

262 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

264 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

265 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

266 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

268 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

269 **
__ª°ri˘
 
__íd±r
,

270 
__loˇÀ_t
 
__loc
)

271 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

275 #ifde‡
__USE_EXTERN_INLINES


276 
__BEGIN_NAMESPACE_STD


277 
__exã∫_ölöe
 

278 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

280  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

281 
	}
}

282 
__exã∫_ölöe
 

283 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

285  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

286 
	}
}

287 
	g__END_NAMESPACE_STD


289 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


290 
__BEGIN_NAMESPACE_C99


291 
__exãnsi⁄__
 
__exã∫_ölöe
 

292 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

294  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

295 
	}
}

296 
	g__END_NAMESPACE_C99


301 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


305 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

308 
	$a64l
 (c⁄° *
__s
)

309 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

313 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


314 
	~<sys/ty≥s.h
>

321 
	$øndom
 (Ë
__THROW
;

324 
	$§™dom
 (
__£ed
Ë
__THROW
;

330 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

331 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

335 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

338 #ifde‡
__USE_MISC


343 
	søndom_d©a


345 
öt32_t
 *
Âå
;

346 
öt32_t
 *
Ωå
;

347 
öt32_t
 *
°©e
;

348 
ønd_ty≥
;

349 
ønd_deg
;

350 
ønd_£p
;

351 
öt32_t
 *
íd_±r
;

354 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

355 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

357 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

358 
__THROW
 
	`__n⁄nuŒ
 ((2));

360 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

361 
size_t
 
__°©ñí
,

362 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

363 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

365 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

366 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

367 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

372 
__BEGIN_NAMESPACE_STD


374 
	$ønd
 (Ë
__THROW
;

376 
	$§™d
 (
__£ed
Ë
__THROW
;

377 
__END_NAMESPACE_STD


379 #ifde‡
__USE_POSIX


381 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

385 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


389 
	$dønd48
 (Ë
__THROW
;

390 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

393 
	$Ã™d48
 (Ë
__THROW
;

394 
	$ƒ™d48
 (
__xsubi
[3])

395 
__THROW
 
	`__n⁄nuŒ
 ((1));

398 
	$mønd48
 (Ë
__THROW
;

399 
	$jønd48
 (
__xsubi
[3])

400 
__THROW
 
	`__n⁄nuŒ
 ((1));

403 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

404 *
	$£ed48
 (
__£ed16v
[3])

405 
__THROW
 
	`__n⁄nuŒ
 ((1));

406 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

408 #ifde‡
__USE_MISC


412 
	sdønd48_d©a


414 
__x
[3];

415 
__ﬁd_x
[3];

416 
__c
;

417 
__öô
;

418 
__exãnsi⁄__
 
__a
;

423 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

424 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

425 
	$î™d48_r
 (
__xsubi
[3],

426 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

427 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

431 *
__ª°ri˘
 
__ªsu…
)

432 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

433 
	$ƒ™d48_r
 (
__xsubi
[3],

434 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

435 *
__ª°ri˘
 
__ªsu…
)

436 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

439 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

442 
	$jønd48_r
 (
__xsubi
[3],

443 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

444 *
__ª°ri˘
 
__ªsu…
)

445 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

448 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

449 
__THROW
 
	`__n⁄nuŒ
 ((2));

451 
	$£ed48_r
 (
__£ed16v
[3],

452 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$lc⁄g48_r
 (
__∑øm
[7],

455 
dønd48_d©a
 *
__buf„r
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

462 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


463 
	#__mÆloc_™d_ˇŒoc_deföed


	)

464 
__BEGIN_NAMESPACE_STD


466 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

468 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

469 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

470 
__END_NAMESPACE_STD


473 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


474 
__BEGIN_NAMESPACE_STD


480 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

481 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

483 
	$‰ì
 (*
__±r
Ë
__THROW
;

484 
__END_NAMESPACE_STD


486 #ifdef 
__USE_MISC


488 
	$c‰ì
 (*
__±r
Ë
__THROW
;

491 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


492 
	~<Æloˇ.h
>

495 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

496 || 
deföed
 
__USE_BSD


498 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

501 #ifde‡
__USE_XOPEN2K


503 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

504 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

507 #ifde‡
__USE_ISOC11


509 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

510 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

513 
__BEGIN_NAMESPACE_STD


515 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

519 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

521 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


523 #ifde‡
__˝lu•lus


524 "C++" 
	`©_quick_exô
 ((*
__func
) ())

525 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

527 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

530 
__END_NAMESPACE_STD


532 #ifdef 
__USE_MISC


535 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

536 
__THROW
 
	`__n⁄nuŒ
 ((1));

539 
__BEGIN_NAMESPACE_STD


543 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

545 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


549 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

551 
__END_NAMESPACE_STD


553 #ifde‡
__USE_ISOC99


554 
__BEGIN_NAMESPACE_C99


557 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

558 
__END_NAMESPACE_C99


562 
__BEGIN_NAMESPACE_STD


564 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

565 
__END_NAMESPACE_STD


567 #ifde‡
__USE_GNU


570 *
	$£cuª_gëív
 (c⁄° *
__«me
)

571 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

574 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


578 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

581 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


584 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

585 
__THROW
 
	`__n⁄nuŒ
 ((2));

588 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 #ifdef 
__USE_MISC


595 
	$˛óªnv
 (Ë
__THROW
;

599 #i‡
deföed
 
__USE_MISC
 \

600 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

609 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 \

610 || 
deföed
 
__USE_XOPEN2K8


619 #i‚de‡
__USE_FILE_OFFSET64


620 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

622 #ifde‡
__REDIRECT


623 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

624 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

626 
	#mk°emp
 
mk°emp64


	)

629 #ifde‡
__USE_LARGEFILE64


630 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

634 #ifde‡
__USE_MISC


641 #i‚de‡
__USE_FILE_OFFSET64


642 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

644 #ifde‡
__REDIRECT


645 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

646 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

648 
	#mk°emps
 
mk°emps64


	)

651 #ifde‡
__USE_LARGEFILE64


652 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

653 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

657 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


663 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

666 #ifde‡
__USE_GNU


673 #i‚de‡
__USE_FILE_OFFSET64


674 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

676 #ifde‡
__REDIRECT


677 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

678 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

680 
	#mko°emp
 
mko°emp64


	)

683 #ifde‡
__USE_LARGEFILE64


684 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

693 #i‚de‡
__USE_FILE_OFFSET64


694 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

695 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

697 #ifde‡
__REDIRECT


698 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

699 
__Êags
), 
mko°emps64
)

700 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

702 
	#mko°emps
 
mko°emps64


	)

705 #ifde‡
__USE_LARGEFILE64


706 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

707 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

712 
__BEGIN_NAMESPACE_STD


717 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

718 
__END_NAMESPACE_STD


721 #ifdef 
__USE_GNU


724 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

725 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

728 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


734 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

735 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

740 #i‚de‡
__COMPAR_FN_T


741 
	#__COMPAR_FN_T


	)

742 (*
	t__com∑r_‚_t
) (const *, const *);

744 #ifdef 
__USE_GNU


745 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

748 #ifde‡
__USE_GNU


749 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

752 
__BEGIN_NAMESPACE_STD


755 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

756 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

757 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

759 #ifde‡
__USE_EXTERN_INLINES


760 
	~<bôs/°dlib-b£¨ch.h
>

765 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

766 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

767 #ifde‡
__USE_GNU


768 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

769 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

770 
	`__n⁄nuŒ
 ((1, 4));

775 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

776 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

777 
__END_NAMESPACE_STD


779 #ifde‡
__USE_ISOC99


780 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

781 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

785 
__BEGIN_NAMESPACE_STD


789 
div_t
 
	$div
 (
__numî
, 
__díom
)

790 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

791 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

792 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

793 
__END_NAMESPACE_STD


795 #ifde‡
__USE_ISOC99


796 
__BEGIN_NAMESPACE_C99


797 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

798 
__díom
)

799 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

800 
__END_NAMESPACE_C99


804 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

805 || 
deföed
 
__USE_SVID


812 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

813 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

818 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

819 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

824 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

825 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

828 #ifde‡
__USE_MISC


830 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

831 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

832 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

833 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

834 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

835 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

836 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

837 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

842 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

843 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

844 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

845 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

846 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

847 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

849 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

850 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

851 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

852 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

853 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

854 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

855 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

856 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

860 
__BEGIN_NAMESPACE_STD


863 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

866 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

867 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

870 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

874 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

875 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

877 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

878 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

879 
__THROW
;

880 
__END_NAMESPACE_STD


883 #ifde‡
__USE_SVID


888 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

892 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


899 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

900 *c⁄° *
__ª°ri˘
 
__tokís
,

901 **
__ª°ri˘
 
__vÆuï
)

902 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

906 #ifde‡
__USE_XOPEN


908 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

914 #ifde‡
__USE_XOPEN2KXSI


916 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

919 #ifde‡
__USE_XOPEN


924 
	$gø¡±
 (
__fd
Ë
__THROW
;

928 
	$u∆ock±
 (
__fd
Ë
__THROW
;

933 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

936 #ifde‡
__USE_GNU


940 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

941 
__THROW
 
	`__n⁄nuŒ
 ((2));

944 
	`gë±
 ();

947 #ifde‡
__USE_BSD


951 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

952 
__THROW
 
	`__n⁄nuŒ
 ((1));

955 
	~<bôs/°dlib-Êﬂt.h
>

958 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


959 
	~<bôs/°dlib.h
>

961 #ifde‡
__LDBL_COMPAT


962 
	~<bôs/°dlib-ldbl.h
>

966 #unde‡
__√ed_mÆloc_™d_ˇŒoc


968 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


30 
	#__√ed_size_t


	)

31 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

39 #i‡
deföed
 
__˝lu•lus
 && (__˝lu•lu†>199711L || 
__GNUC_PREREQ
 (4, 4))

40 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

44 
__BEGIN_NAMESPACE_STD


46 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

47 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

50 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

51 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

52 
__END_NAMESPACE_STD


57 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


58 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

59 
__c
, 
size_t
 
__n
)

60 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

64 
__BEGIN_NAMESPACE_STD


66 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

69 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

70 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

73 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


76 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

77 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

78 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

79 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

81 #ifde‡
__OPTIMIZE__


82 
__exã∫_Æways_ölöe
 *

83 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


85  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

88 
__exã∫_Æways_ölöe
 const *

89 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


91  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

94 
	}
}

96 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

97 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

99 
__END_NAMESPACE_STD


101 #ifde‡
__USE_GNU


104 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


105 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

106 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

107 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

108 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

110 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

111 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

115 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


116 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

117 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

118 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

119 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

121 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

122 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

127 
__BEGIN_NAMESPACE_STD


129 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

132 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

133 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

134 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

137 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

138 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

140 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

141 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

144 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

147 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

151 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

154 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

155 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

156 
__THROW
 
	`__n⁄nuŒ
 ((2));

157 
__END_NAMESPACE_STD


159 #ifde‡
__USE_XOPEN2K8


163 
	~<xloˇÀ.h
>

166 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

167 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

169 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

170 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

173 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

174 || 
deföed
 
__USE_XOPEN2K8


176 *
	$°rdup
 (c⁄° *
__s
)

177 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

183 #i‡
deföed
 
__USE_XOPEN2K8


184 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

185 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

188 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


190 
	#°rdu∑
(
s
) \

191 (
__exãnsi⁄__
 \

193 c⁄° *
__ﬁd
 = (
s
); \

194 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

195 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

196 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

197 
	}
}))

	)

200 
	#°∫du∑
(
s
, 
n
) \

201 (
__exãnsi⁄__
 \

203 c⁄° *
__ﬁd
 = (
s
); \

204 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

205 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

206 
__√w
[
__Àn
] = '\0'; \

207 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

208 }))

	)

211 
	g__BEGIN_NAMESPACE_STD


213 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


216 *
°rchr
 (*
__s
, 
__c
)

217 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

218 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

219 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

221 #ifde‡
__OPTIMIZE__


222 
__exã∫_Æways_ölöe
 *

223 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


225  
__buûtö_°rchr
 (
__s
, 
__c
);

228 
__exã∫_Æways_ölöe
 const *

229 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


231  
__buûtö_°rchr
 (
__s
, 
__c
);

236 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

237 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

240 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


243 *
	`°ºchr
 (*
__s
, 
__c
)

244 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

245 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

246 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

248 #ifde‡
__OPTIMIZE__


249 
__exã∫_Æways_ölöe
 *

250 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


252  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

255 
__exã∫_Æways_ölöe
 const *

256 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


258  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

261 
	}
}

263 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

264 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

266 
__END_NAMESPACE_STD


268 #ifde‡
__USE_GNU


271 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


272 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

273 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

274 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

275 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

277 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

278 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

282 
__BEGIN_NAMESPACE_STD


285 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

286 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

289 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

290 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

292 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


295 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

296 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

297 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

298 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

300 #ifde‡
__OPTIMIZE__


301 
__exã∫_Æways_ölöe
 *

302 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


304  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

307 
__exã∫_Æways_ölöe
 const *

308 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


310  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

313 
	}
}

315 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

316 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

319 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


322 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

323 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

324 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

325 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

327 #ifde‡
__OPTIMIZE__


328 
__exã∫_Æways_ölöe
 *

329 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


331  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

334 
__exã∫_Æways_ölöe
 const *

335 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


337  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

340 
	}
}

342 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

343 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

348 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

349 
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
__END_NAMESPACE_STD


354 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

355 c⁄° *
__ª°ri˘
 
__dñim
,

356 **
__ª°ri˘
 
__ßve_±r
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

358 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


359 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

360 **
__ª°ri˘
 
__ßve_±r
)

361 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

364 #ifde‡
__USE_GNU


366 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


367 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

368 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

370 c⁄° *
__√edÀ
)

371 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

374 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

378 #ifde‡
__USE_GNU


382 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

383 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

384 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

388 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

389 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

391 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

392 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

397 
__BEGIN_NAMESPACE_STD


399 
size_t
 
	$°æí
 (c⁄° *
__s
)

400 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

401 
__END_NAMESPACE_STD


403 #ifdef 
__USE_XOPEN2K8


406 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

407 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

411 
__BEGIN_NAMESPACE_STD


413 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

414 
__END_NAMESPACE_STD


415 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


423 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


426 #ifde‡
__REDIRECT_NTH


427 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

428 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

429 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

431 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

433 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

438 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

443 #ifde‡
__USE_XOPEN2K8


445 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

451 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

453 #ifde‡
__USE_BSD


455 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

462 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

463 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

466 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


469 *
	`ödex
 (*
__s
, 
__c
)

470 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

471 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

472 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

474 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


475 
__exã∫_Æways_ölöe
 *

476 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


478  
	`__buûtö_ödex
 (
__s
, 
__c
);

481 
__exã∫_Æways_ölöe
 const *

482 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


484  
	`__buûtö_ödex
 (
__s
, 
__c
);

487 
	}
}

489 *
	$ödex
 (c⁄° *
__s
, 
__c
)

490 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


497 *
	`rödex
 (*
__s
, 
__c
)

498 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

499 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

500 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

502 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


503 
__exã∫_Æways_ölöe
 *

504 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


506  
	`__buûtö_rödex
 (
__s
, 
__c
);

509 
__exã∫_Æways_ölöe
 const *

510 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


512  
	`__buûtö_rödex
 (
__s
, 
__c
);

515 
	}
}

517 *
	$rödex
 (c⁄° *
__s
, 
__c
)

518 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

523 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

527 #ifdef 
__USE_GNU


528 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

530 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

534 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

535 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

538 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

539 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

542 #ifdef 
__USE_GNU


545 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

546 
__loˇÀ_t
 
__loc
)

547 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

549 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

550 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

551 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

554 #ifdef 
__USE_BSD


557 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

558 c⁄° *
__ª°ri˘
 
__dñim
)

559 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

562 #ifdef 
__USE_XOPEN2K8


564 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

567 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

568 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

569 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

574 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

575 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

576 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

577 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

578 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

579 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

582 #ifdef 
__USE_GNU


584 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

585 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

588 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

593 #i‚de‡
ba£«me


598 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


599 "C++" *
	$ba£«me
 (*
__fûíame
)

600 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

601 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

602 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

604 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

610 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

611 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

612 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


632 
	~<bôs/°rög.h
>

635 
	~<bôs/°rög2.h
>

638 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


640 
	~<bôs/°rög3.h
>

644 
__END_DECLS


	@/usr/include/strings.h

18 #i‚def 
_STRINGS_H


19 
	#_STRINGS_H
 1

	)

24 #i‡!
deföed
 
_STRING_H
 || !deföed 
__USE_BSD


26 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 
	~<°ddef.h
>

35 #i‡
deföed
 
__˝lu•lus
 && (__˝lu•lu†>199711L || 
__GNUC_PREREQ
 (4, 4))

36 
	#__CORRECT_ISO_CPP_STRINGS_H_PROTO


	)

39 
	g__BEGIN_DECLS


41 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


43 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

44 
__THROW
 
__©åibuã_puª__
;

47 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
Ë
__THROW
;

50 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
;

53 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


56 *
	`ödex
 (*
__s
, 
__c
)

57 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

58 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

59 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

61 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRING_H_PROTO


62 
__exã∫_Æways_ölöe
 *

63 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


65  
	`__buûtö_ödex
 (
__s
, 
__c
);

68 
__exã∫_Æways_ölöe
 const *

69 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


71  
	`__buûtö_ödex
 (
__s
, 
__c
);

74 
	}
}

76 *
	$ödex
 (c⁄° *
__s
, 
__c
)

77 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

81 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


84 *
	`rödex
 (*
__s
, 
__c
)

85 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

86 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

87 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

89 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRING_H_PROTO


90 
__exã∫_Æways_ölöe
 *

91 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


93  
	`__buûtö_rödex
 (
__s
, 
__c
);

96 
__exã∫_Æways_ölöe
 const *

97 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


99  
	`__buûtö_rödex
 (
__s
, 
__c
);

102 
	}
}

104 *
	$rödex
 (c⁄° *
__s
, 
__c
)

105 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

109 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8
 || deföed 
__USE_XOPEN2K8XSI


112 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((const));

116 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

117 
__THROW
 
__©åibuã_puª__
;

120 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
;

123 #ifdef 
__USE_XOPEN2K8


127 
	~<xloˇÀ.h
>

131 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__loc
)

132 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

134 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

135 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

136 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

139 
__END_DECLS


	@/usr/include/stropts.h

18 #i‚de‡
_STROPTS_H


19 
	#_STROPTS_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<bôs/ty≥s.h
>

23 
	~<bôs/xtôy≥s.h
>

25 #i‚de‡
__gid_t_deföed


26 
__gid_t
 
	tgid_t
;

27 
	#__gid_t_deföed


	)

30 #i‚de‡
__uid_t_deföed


31 
__uid_t
 
	tuid_t
;

32 
	#__uid_t_deföed


	)

35 
__t_sˇœr_t
 
	tt_sˇœr_t
;

36 
__t_usˇœr_t
 
	tt_usˇœr_t
;

39 
	~<bôs/°r›ts.h
>

42 
__BEGIN_DECLS


45 
	$iß°ªam
 (
__fûdes
Ë
__THROW
;

51 
	`gëmsg
 (
__fûdes
, 
°rbuf
 *
__ª°ri˘
 
__˘Õå
,

52 
°rbuf
 *
__ª°ri˘
 
__d©≠å
,

53 *
__ª°ri˘
 
__Êag•
);

60 
	`gëpmsg
 (
__fûdes
, 
°rbuf
 *
__ª°ri˘
 
__˘Õå
,

61 
°rbuf
 *
__ª°ri˘
 
__d©≠å
,

62 *
__ª°ri˘
 
__b™dp
, *__ª°ri˘ 
__Êag•
);

67 
	$io˘l
 (
__fd
, 
__ªque°
, ...Ë
__THROW
;

73 
	`putmsg
 (
__fûdes
, c⁄° 
°rbuf
 *
__˘Õå
,

74 c⁄° 
°rbuf
 *
__d©≠å
, 
__Êags
);

80 
	`puçmsg
 (
__fûdes
, c⁄° 
°rbuf
 *
__˘Õå
,

81 c⁄° 
°rbuf
 *
__d©≠å
, 
__b™d
, 
__Êags
);

85 
	$Áâach
 (
__fûdes
, c⁄° *
__∑th
Ë
__THROW
;

88 
	$fdëach
 (c⁄° *
__∑th
Ë
__THROW
;

90 
__END_DECLS


	@/usr/include/syslog.h

1 
	~<sys/sy¶og.h
>

	@/usr/include/termios.h

22 #i‚def 
_TERMIOS_H


23 
	#_TERMIOS_H
 1

	)

25 
	~<„©uªs.h
>

26 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


28 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__pid_t_deföed


30 
__pid_t
 
	tpid_t
;

31 
	#__pid_t_deföed


	)

35 
	g__BEGIN_DECLS


39 
	~<bôs/ãrmios.h
>

41 #ifde‡
__USE_BSD


44 
	#CCEQ
(
vÆ
, 
c
Ë((cË=(vÆË&& (vÆË!
_POSIX_VDISABLE
)

	)

48 
•ìd_t
 
	$cfgëo•ìd
 (c⁄° 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

51 
•ìd_t
 
	$cfgëi•ìd
 (c⁄° 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

54 
	$cf£to•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

57 
	$cf£ti•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

59 #ifdef 
__USE_BSD


61 
	$cf£t•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

66 
	$tcgë©å
 (
__fd
, 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

70 
	$tc£èâr
 (
__fd
, 
__›ti⁄Æ_a˘i⁄s
,

71 c⁄° 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

74 #ifdef 
__USE_BSD


76 
	$cfmakîaw
 (
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

80 
	$tc£ndbªak
 (
__fd
, 
__duøti⁄
Ë
__THROW
;

86 
	`tcdøö
 (
__fd
);

90 
	$tcÊush
 (
__fd
, 
__queue_£À˘‹
Ë
__THROW
;

94 
	$tcÊow
 (
__fd
, 
__a˘i⁄
Ë
__THROW
;

97 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


99 
__pid_t
 
	$tcgësid
 (
__fd
Ë
__THROW
;

103 #ifde‡
__USE_BSD


104 
	~<sys/âydeÁu…s.h
>

107 
__END_DECLS


	@/usr/include/time.h

22 #i‚def 
_TIME_H


24 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

25 ! 
deföed
 
	g__√ed_time•ec
)

26 
	#_TIME_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


33 #ifdef 
_TIME_H


35 
	#__√ed_size_t


	)

36 
	#__√ed_NULL


	)

37 
	~<°ddef.h
>

41 
	~<bôs/time.h
>

44 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


45 #i‚de‡
CLK_TCK


46 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

52 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

53 
	#__˛ock_t_deföed
 1

	)

55 
	~<bôs/ty≥s.h
>

57 
__BEGIN_NAMESPACE_STD


59 
__˛ock_t
 
	t˛ock_t
;

60 
	g__END_NAMESPACE_STD


61 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


62 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

66 #unde‡
__√ed_˛ock_t


68 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

69 
	#__time_t_deföed
 1

	)

71 
	~<bôs/ty≥s.h
>

73 
__BEGIN_NAMESPACE_STD


75 
__time_t
 
	ttime_t
;

76 
__END_NAMESPACE_STD


77 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


78 
	$__USING_NAMESPACE_STD
(
time_t
)

82 #unde‡
__√ed_time_t


84 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

85 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

86 
	#__˛ockid_t_deföed
 1

	)

88 
	~<bôs/ty≥s.h
>

91 
__˛ockid_t
 
	t˛ockid_t
;

94 #unde‡
__˛ockid_time_t


96 #i‡!
deföed
 
__timî_t_deföed
 && \

97 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

98 
	#__timî_t_deföed
 1

	)

100 
	~<bôs/ty≥s.h
>

103 
__timî_t
 
	ttimî_t
;

106 #unde‡
__√ed_timî_t


109 #i‡(!
deföed
 
__time•ec_deföed
 \

110 && ((
deföed
 
_TIME_H
 \

111 && (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
 \

112 || 
deföed
 
__USE_ISOC11
)) \

113 || 
deföed
 
__√ed_time•ec
))

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
__sysˇŒ_¶⁄g_t
 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 c⁄° *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 c⁄° *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 #ifde‡
__USE_ISOC11


182 
	#TIME_UTC
 1

	)

186 
__BEGIN_NAMESPACE_STD


189 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

192 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

195 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

196 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

199 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

205 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

206 c⁄° *
__ª°ri˘
 
__f‹m©
,

207 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

208 
__END_NAMESPACE_STD


210 #ifde‡
__USE_XOPEN


213 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

214 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

215 
__THROW
;

218 #ifde‡
__USE_XOPEN2K8


221 
	~<xloˇÀ.h
>

223 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

224 c⁄° *
__ª°ri˘
 
__f‹m©
,

225 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

229 #ifde‡
__USE_GNU


230 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

231 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

232 
__loˇÀ_t
 
__loc
Ë
__THROW
;

236 
__BEGIN_NAMESPACE_STD


239 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

243 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

244 
__END_NAMESPACE_STD


246 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


249 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

250 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

254 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

255 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

258 
__BEGIN_NAMESPACE_STD


261 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

264 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

265 
__END_NAMESPACE_STD


267 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


272 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

273 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

277 *
__ª°ri˘
 
__buf
Ë
__THROW
;

282 *
__tz«me
[2];

283 
__daylight
;

284 
__timez⁄e
;

287 #ifdef 
__USE_POSIX


289 *
tz«me
[2];

293 
	$tz£t
 (Ë
__THROW
;

296 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


297 
daylight
;

298 
timez⁄e
;

301 #ifde‡
__USE_SVID


304 
	$°ime
 (c⁄° 
time_t
 *
__whí
Ë
__THROW
;

310 
	#__i¶óp
(
yór
) \

311 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

314 #ifde‡
__USE_MISC


319 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

322 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

325 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

329 #ifde‡
__USE_POSIX199309


334 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

335 
time•ec
 *
__ªmaöög
);

339 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

342 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

345 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

346 
__THROW
;

348 #ifde‡
__USE_XOPEN2K


353 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

354 c⁄° 
time•ec
 *
__ªq
,

355 
time•ec
 *
__ªm
);

358 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

363 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

364 
sigevít
 *
__ª°ri˘
 
__evp
,

365 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

368 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

371 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

372 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

373 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

376 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

377 
__THROW
;

380 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

384 #ifde‡
__USE_ISOC11


386 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

387 
__THROW
 
	`__n⁄nuŒ
 ((1));

391 #ifde‡
__USE_XOPEN_EXTENDED


403 
gëd©e_îr
;

412 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

415 #ifde‡
__USE_GNU


426 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

427 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

430 
__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

71 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

75 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

79 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

83 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

86 #ifde‡
__USE_XOPEN2K8


87 
	#_XOPEN_VERSION
 700

	)

88 #ñi‡
deföed
 
__USE_XOPEN2K


89 
	#_XOPEN_VERSION
 600

	)

90 #ñi‡
deföed
 
__USE_UNIX98


91 
	#_XOPEN_VERSION
 500

	)

93 
	#_XOPEN_VERSION
 4

	)

97 
	#_XOPEN_XCU_VERSION
 4

	)

100 
	#_XOPEN_XPG2
 1

	)

101 
	#_XOPEN_XPG3
 1

	)

102 
	#_XOPEN_XPG4
 1

	)

105 
	#_XOPEN_UNIX
 1

	)

108 
	#_XOPEN_CRYPT
 1

	)

112 
	#_XOPEN_ENH_I18N
 1

	)

115 
	#_XOPEN_LEGACY
 1

	)

202 
	~<bôs/posix_›t.h
>

205 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


206 
	~<bôs/ívú⁄míts.h
>

210 
	#STDIN_FILENO
 0

	)

211 
	#STDOUT_FILENO
 1

	)

212 
	#STDERR_FILENO
 2

	)

217 
	~<bôs/ty≥s.h
>

219 #i‚def 
__ssize_t_deföed


220 
__ssize_t
 
	tssize_t
;

221 
	#__ssize_t_deföed


	)

224 
	#__√ed_size_t


	)

225 
	#__√ed_NULL


	)

226 
	~<°ddef.h
>

228 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


231 #i‚de‡
__gid_t_deföed


232 
__gid_t
 
	tgid_t
;

233 
	#__gid_t_deföed


	)

236 #i‚de‡
__uid_t_deföed


237 
__uid_t
 
	tuid_t
;

238 
	#__uid_t_deföed


	)

241 #i‚de‡
__off_t_deföed


242 #i‚de‡
__USE_FILE_OFFSET64


243 
__off_t
 
	toff_t
;

245 
__off64_t
 
	toff_t
;

247 
	#__off_t_deföed


	)

249 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


250 
__off64_t
 
	toff64_t
;

251 
	#__off64_t_deföed


	)

254 #i‚de‡
__u£c⁄ds_t_deföed


255 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

256 
	#__u£c⁄ds_t_deföed


	)

259 #i‚de‡
__pid_t_deföed


260 
__pid_t
 
	tpid_t
;

261 
	#__pid_t_deföed


	)

265 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


266 #i‚de‡
__öçå_t_deföed


267 
__öçå_t
 
	töçå_t
;

268 
	#__öçå_t_deföed


	)

272 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


273 #i‚de‡
__sockÀn_t_deföed


274 
__sockÀn_t
 
	tsockÀn_t
;

275 
	#__sockÀn_t_deföed


	)

281 
	#R_OK
 4

	)

282 
	#W_OK
 2

	)

283 
	#X_OK
 1

	)

284 
	#F_OK
 0

	)

287 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

289 #ifde‡
__USE_GNU


292 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1));

300 #ifde‡
__USE_ATFILE


304 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

305 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

310 #i‚def 
_STDIO_H


311 
	#SEEK_SET
 0

	)

312 
	#SEEK_CUR
 1

	)

313 
	#SEEK_END
 2

	)

314 #ifde‡
__USE_GNU


315 
	#SEEK_DATA
 3

	)

316 
	#SEEK_HOLE
 4

	)

320 #i‡
deföed
 
__USE_BSD
 && !deföed 
L_SET


322 
	#L_SET
 
SEEK_SET


	)

323 
	#L_INCR
 
SEEK_CUR


	)

324 
	#L_XTND
 
SEEK_END


	)

333 #i‚de‡
__USE_FILE_OFFSET64


334 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

336 #ifde‡
__REDIRECT_NTH


337 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

338 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

339 
l£ek64
);

341 
	#l£ek
 
l£ek64


	)

344 #ifde‡
__USE_LARGEFILE64


345 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

346 
__THROW
;

353 
	`˛o£
 (
__fd
);

360 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

366 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur
;

368 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


369 #i‚de‡
__USE_FILE_OFFSET64


376 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

377 
__off_t
 
__off£t
Ë
__wur
;

384 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

385 
__off_t
 
__off£t
Ë
__wur
;

387 #ifde‡
__REDIRECT


388 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

389 
__off64_t
 
__off£t
),

390 
¥ód64
Ë
__wur
;

391 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

392 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

393 
pwrôe64
Ë
__wur
;

395 
	#¥ód
 
¥ód64


	)

396 
	#pwrôe
 
pwrôe64


	)

400 #ifde‡
__USE_LARGEFILE64


404 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

405 
__off64_t
 
__off£t
Ë
__wur
;

408 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

409 
__off64_t
 
__off£t
Ë
__wur
;

417 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

419 #ifde‡
__USE_GNU


422 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

432 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

444 
	`¶ìp
 (
__£c⁄ds
);

446 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

447 || 
deföed
 
__USE_BSD


452 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

453 
__THROW
;

460 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

469 
	`∑u£
 ();

473 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

474 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

476 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


478 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

483 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

484 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

488 #ifde‡
__USE_ATFILE


491 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

492 
__gid_t
 
__group
, 
__Êag
)

493 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

497 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

499 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


501 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

511 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

513 #ifdef 
__USE_GNU


517 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

520 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

521 || 
deföed
 
__USE_BSD


525 *
	$gëwd
 (*
__buf
)

526 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

531 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

534 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

536 #ifde‡
__USE_GNU


539 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

543 **
__ívú⁄
;

544 #ifde‡
__USE_GNU


545 **
ívú⁄
;

551 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

552 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

554 #ifde‡
__USE_XOPEN2K8


557 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

558 
__THROW
 
	`__n⁄nuŒ
 ((2));

563 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

564 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

568 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

569 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

573 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

574 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

578 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

579 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

585 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

587 #ifde‡
__USE_GNU


590 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

591 *c⁄° 
__ívp
[])

592 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

596 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


598 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

603 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

609 
	~<bôs/c⁄‚ame.h
>

612 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

613 
__THROW
 
	`__n⁄nuŒ
 ((1));

616 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

619 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

621 #ifdef 
__USE_POSIX2


623 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

628 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

631 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

634 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

637 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

638 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


639 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

646 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

648 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


660 
	$£çgΩ
 (Ë
__THROW
;

667 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

669 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


671 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

675 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

678 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

681 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

684 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

689 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

691 #ifdef 
__USE_GNU


693 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

700 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

702 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


705 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

708 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


710 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

717 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

719 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


722 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

725 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


727 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

730 #ifde‡
__USE_GNU


733 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

734 
__THROW
;

738 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

739 
__THROW
;

743 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

744 
__THROW
 
__wur
;

748 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

749 
__THROW
 
__wur
;

756 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

758 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

759 || 
deföed
 
__USE_BSD


764 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

770 *
	$ây«me
 (
__fd
Ë
__THROW
;

774 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

775 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

779 
	$ißây
 (
__fd
Ë
__THROW
;

781 #i‡
deföed
 
__USE_BSD
 \

782 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

785 
	$ây¶Ÿ
 (Ë
__THROW
;

790 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

791 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

793 #ifde‡
__USE_ATFILE


796 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

797 c⁄° *
__to
, 
__Êags
)

798 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

801 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


803 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

804 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

809 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

810 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

811 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

814 #ifde‡
__USE_ATFILE


816 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

817 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

820 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

821 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

822 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

826 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

828 #ifde‡
__USE_ATFILE


830 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

831 
__THROW
 
	`__n⁄nuŒ
 ((2));

835 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

839 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

842 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

849 *
	`gëlogö
 ();

850 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


857 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

860 #ifdef 
__USE_BSD


862 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

866 #ifdef 
__USE_POSIX2


870 
	#__√ed_gë›t


	)

871 
	~<gë›t.h
>

875 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


879 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

883 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

886 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

887 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

891 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

897 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

898 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

899 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

900 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

906 
	$vh™gup
 (Ë
__THROW
;

909 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

917 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

918 
size_t
 
__off£t
, 
__sˇÀ
)

919 
__THROW
 
	`__n⁄nuŒ
 ((1));

925 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

929 *
	$gëu£rshñl
 (Ë
__THROW
;

930 
	$ídu£rshñl
 (Ë
__THROW
;

931 
	$£tu£rshñl
 (Ë
__THROW
;

937 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

941 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

944 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

948 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

956 
	`fsync
 (
__fd
);

959 #ifde‡
__USE_GNU


962 
	$syncfs
 (
__fd
Ë
__THROW
;

966 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


969 
	`gëho°id
 ();

972 
	$sync
 (Ë
__THROW
;

975 #i‡
deföed
 
__USE_BSD
 || !deföed 
__USE_XOPEN2K


978 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

983 
	$gëdèbÀsize
 (Ë
__THROW
;

989 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


992 #i‚de‡
__USE_FILE_OFFSET64


993 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

994 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

996 #ifde‡
__REDIRECT_NTH


997 
	`__REDIRECT_NTH
 (
åunˇã
,

998 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

999 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1001 
	#åunˇã
 
åunˇã64


	)

1004 #ifde‡
__USE_LARGEFILE64


1005 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1006 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1011 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_POSIX199309
 \

1012 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1015 #i‚de‡
__USE_FILE_OFFSET64


1016 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1018 #ifde‡
__REDIRECT_NTH


1019 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1020 
·runˇã64
Ë
__wur
;

1022 
	#·runˇã
 
·runˇã64


	)

1025 #ifde‡
__USE_LARGEFILE64


1026 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1032 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1033 || 
deföed
 
__USE_MISC


1037 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1043 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1047 #ifde‡
__USE_MISC


1058 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1063 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1075 
	#F_ULOCK
 0

	)

1076 
	#F_LOCK
 1

	)

1077 
	#F_TLOCK
 2

	)

1078 
	#F_TEST
 3

	)

1080 #i‚de‡
__USE_FILE_OFFSET64


1081 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1083 #ifde‡
__REDIRECT


1084 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1085 
lockf64
Ë
__wur
;

1087 
	#lockf
 
lockf64


	)

1090 #ifde‡
__USE_LARGEFILE64


1091 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1096 #ifde‡
__USE_GNU


1101 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1102 (
__exãnsi⁄__
 \

1103 ({ 
__ªsu…
; \

1104 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1105 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1106 
__ªsu…
; 
	}
}))

	)

1109 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1112 
fd©async
 (
__fûdes
);

1118 #ifdef 
__USE_XOPEN


1120 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1121 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1125 
	$í¸y±
 (*
__glibc_block
, 
__edÊag
)

1126 
__THROW
 
	`__n⁄nuŒ
 ((1));

1133 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1134 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1140 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1142 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1147 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1148 
	~<bôs/uni°d.h
>

1151 
__END_DECLS


	@/usr/include/utime.h

22 #i‚def 
_UTIME_H


23 
	#_UTIME_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


32 
	#__√ed_time_t


	)

33 
	~<time.h
>

37 
	sutimbuf


39 
__time_t
 
	ma˘ime
;

40 
__time_t
 
	mmodtime
;

45 
	$utime
 (c⁄° *
__fûe
,

46 c⁄° 
utimbuf
 *
__fûe_times
)

47 
__THROW
 
	`__n⁄nuŒ
 ((1));

49 
__END_DECLS


	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_BSD


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_BSD
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

62 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


63 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

64 
	#htﬁe16
(
x
Ë(x)

	)

65 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

66 
	#À16toh
(
x
Ë(x)

	)

68 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

69 
	#htﬁe32
(
x
Ë(x)

	)

70 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

71 
	#À32toh
(
x
Ë(x)

	)

73 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

74 
	#htﬁe64
(
x
Ë(x)

	)

75 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

76 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

101 #unde‡
__USE_ISOC11


102 #unde‡
__USE_ISOC99


103 #unde‡
__USE_ISOC95


104 #unde‡
__USE_ISOCXX11


105 #unde‡
__USE_POSIX


106 #unde‡
__USE_POSIX2


107 #unde‡
__USE_POSIX199309


108 #unde‡
__USE_POSIX199506


109 #unde‡
__USE_XOPEN


110 #unde‡
__USE_XOPEN_EXTENDED


111 #unde‡
__USE_UNIX98


112 #unde‡
__USE_XOPEN2K


113 #unde‡
__USE_XOPEN2KXSI


114 #unde‡
__USE_XOPEN2K8


115 #unde‡
__USE_XOPEN2K8XSI


116 #unde‡
__USE_LARGEFILE


117 #unde‡
__USE_LARGEFILE64


118 #unde‡
__USE_FILE_OFFSET64


119 #unde‡
__USE_BSD


120 #unde‡
__USE_SVID


121 #unde‡
__USE_MISC


122 #unde‡
__USE_ATFILE


123 #unde‡
__USE_GNU


124 #unde‡
__USE_REENTRANT


125 #unde‡
__USE_FORTIFY_LEVEL


126 #unde‡
__KERNEL_STRICT_NAMES


130 #i‚de‡
_LOOSE_KERNEL_NAMES


131 
	#__KERNEL_STRICT_NAMES


	)

141 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


142 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

143 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

145 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

150 #ifde‡
_GNU_SOURCE


151 #unde‡
_ISOC95_SOURCE


152 
	#_ISOC95_SOURCE
 1

	)

153 #unde‡
_ISOC99_SOURCE


154 
	#_ISOC99_SOURCE
 1

	)

155 #unde‡
_ISOC11_SOURCE


156 
	#_ISOC11_SOURCE
 1

	)

157 #unde‡
_POSIX_SOURCE


158 
	#_POSIX_SOURCE
 1

	)

159 #unde‡
_POSIX_C_SOURCE


160 
	#_POSIX_C_SOURCE
 200809L

	)

161 #unde‡
_XOPEN_SOURCE


162 
	#_XOPEN_SOURCE
 700

	)

163 #unde‡
_XOPEN_SOURCE_EXTENDED


164 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

165 #unde‡
_LARGEFILE64_SOURCE


166 
	#_LARGEFILE64_SOURCE
 1

	)

167 #unde‡
_DEFAULT_SOURCE


168 
	#_DEFAULT_SOURCE
 1

	)

169 #unde‡
_BSD_SOURCE


170 
	#_BSD_SOURCE
 1

	)

171 #unde‡
_SVID_SOURCE


172 
	#_SVID_SOURCE
 1

	)

173 #unde‡
_ATFILE_SOURCE


174 
	#_ATFILE_SOURCE
 1

	)

179 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

180 || (!
deföed
 
	g__STRICT_ANSI__
 \

181 && !
deföed
 
	g_ISOC99_SOURCE
 \

182 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

183 && !
deföed
 
	g_XOPEN_SOURCE
 \

184 && !
deföed
 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
))

185 #unde‡
_DEFAULT_SOURCE


186 
	#_DEFAULT_SOURCE
 1

	)

187 #unde‡
_BSD_SOURCE


188 
	#_BSD_SOURCE
 1

	)

189 #unde‡
_SVID_SOURCE


190 
	#_SVID_SOURCE
 1

	)

194 #i‡(
deföed
 
_ISOC11_SOURCE
 \

195 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

196 
	#__USE_ISOC11
 1

	)

200 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

201 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

202 
	#__USE_ISOC99
 1

	)

206 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

207 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

208 
	#__USE_ISOC95
 1

	)

215 #i‡((
deföed
 
__˝lu•lus
 && __cplusplus >= 201103L) \

216 || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
)

217 
	#__USE_ISOCXX11
 1

	)

223 #ifde‡
_DEFAULT_SOURCE


224 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


225 
	#__USE_POSIX_IMPLICITLY
 1

	)

227 #unde‡
_POSIX_SOURCE


228 
	#_POSIX_SOURCE
 1

	)

229 #unde‡
_POSIX_C_SOURCE


230 
	#_POSIX_C_SOURCE
 200809L

	)

232 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

233 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

234 
	#_POSIX_SOURCE
 1

	)

235 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

236 
	#_POSIX_C_SOURCE
 2

	)

237 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

238 
	#_POSIX_C_SOURCE
 199506L

	)

239 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

240 
	#_POSIX_C_SOURCE
 200112L

	)

242 
	#_POSIX_C_SOURCE
 200809L

	)

244 
	#__USE_POSIX_IMPLICITLY
 1

	)

247 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


248 
	#__USE_POSIX
 1

	)

251 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


252 
	#__USE_POSIX2
 1

	)

255 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

256 
	#__USE_POSIX199309
 1

	)

259 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

260 
	#__USE_POSIX199506
 1

	)

263 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

264 
	#__USE_XOPEN2K
 1

	)

265 #unde‡
__USE_ISOC95


266 
	#__USE_ISOC95
 1

	)

267 #unde‡
__USE_ISOC99


268 
	#__USE_ISOC99
 1

	)

271 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

272 
	#__USE_XOPEN2K8
 1

	)

273 #unde‡
_ATFILE_SOURCE


274 
	#_ATFILE_SOURCE
 1

	)

277 #ifdef 
_XOPEN_SOURCE


278 
	#__USE_XOPEN
 1

	)

279 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

280 
	#__USE_XOPEN_EXTENDED
 1

	)

281 
	#__USE_UNIX98
 1

	)

282 #unde‡
_LARGEFILE_SOURCE


283 
	#_LARGEFILE_SOURCE
 1

	)

284 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

285 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

286 
	#__USE_XOPEN2K8
 1

	)

287 
	#__USE_XOPEN2K8XSI
 1

	)

289 
	#__USE_XOPEN2K
 1

	)

290 
	#__USE_XOPEN2KXSI
 1

	)

291 #unde‡
__USE_ISOC95


292 
	#__USE_ISOC95
 1

	)

293 #unde‡
__USE_ISOC99


294 
	#__USE_ISOC99
 1

	)

297 #ifde‡
_XOPEN_SOURCE_EXTENDED


298 
	#__USE_XOPEN_EXTENDED
 1

	)

303 #ifde‡
_LARGEFILE_SOURCE


304 
	#__USE_LARGEFILE
 1

	)

307 #ifde‡
_LARGEFILE64_SOURCE


308 
	#__USE_LARGEFILE64
 1

	)

311 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

312 
	#__USE_FILE_OFFSET64
 1

	)

315 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


316 
	#__USE_MISC
 1

	)

319 #ifdef 
_BSD_SOURCE


320 
	#__USE_BSD
 1

	)

323 #ifdef 
_SVID_SOURCE


324 
	#__USE_SVID
 1

	)

327 #ifdef 
_ATFILE_SOURCE


328 
	#__USE_ATFILE
 1

	)

331 #ifdef 
_GNU_SOURCE


332 
	#__USE_GNU
 1

	)

335 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


336 
	#__USE_REENTRANT
 1

	)

339 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

340 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

341 #i‡
_FORTIFY_SOURCE
 > 1

342 
	#__USE_FORTIFY_LEVEL
 2

	)

344 
	#__USE_FORTIFY_LEVEL
 1

	)

347 
	#__USE_FORTIFY_LEVEL
 0

	)

352 
	~<°dc-¥edef.h
>

360 #unde‡
__GNU_LIBRARY__


361 
	#__GNU_LIBRARY__
 6

	)

365 
	#__GLIBC__
 2

	)

366 
	#__GLIBC_MINOR__
 19

	)

368 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

369 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

372 #i‚de‡
__ASSEMBLER__


373 #i‚de‡
_SYS_CDEFS_H


374 
	~<sys/cdefs.h
>

379 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


380 
	#__USE_LARGEFILE
 1

	)

381 
	#__USE_LARGEFILE64
 1

	)

387 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

388 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

389 && 
deföed
 
	g__exã∫_ölöe


390 
	#__USE_EXTERN_INLINES
 1

	)

398 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

19 #i‚de‡
_GETOPT_H


21 #i‚de‡
__√ed_gë›t


22 
	#_GETOPT_H
 1

	)

32 #i‡!
deföed
 
__GNU_LIBRARY__


33 
	~<˘y≥.h
>

36 #i‚de‡
__THROW


37 #i‚de‡
__GNUC_PREREQ


38 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

40 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

41 
	#__THROW
 
	`throw
 ()

	)

43 
	#__THROW


	)

47 #ifdef 
__˝lu•lus


57 *
›èrg
;

71 
›töd
;

76 
›ãº
;

80 
›t›t
;

82 #i‚de‡
__√ed_gë›t


104 
	s›ti⁄


106 c⁄° *
	g«me
;

109 
	ghas_¨g
;

110 *
	gÊag
;

111 
	gvÆ
;

116 
	#no_¨gumít
 0

	)

117 
	#ªquúed_¨gumít
 1

	)

118 
	#›ti⁄Æ_¨gumít
 2

	)

146 #ifde‡
__GNU_LIBRARY__


150 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

151 
__THROW
;

153 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

154 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


158 #ifde‡
__REDIRECT


159 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

160 c⁄° *
__sh‹t›ts
),

161 
__posix_gë›t
);

163 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

164 c⁄° *
__sh‹t›ts
Ë
__THROW
;

165 
	#gë›t
 
__posix_gë›t


	)

169 
gë›t
 ();

172 #i‚de‡
__√ed_gë›t


173 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

174 c⁄° *
__sh‹t›ts
,

175 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

176 
__THROW
;

177 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

178 c⁄° *
__sh‹t›ts
,

179 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

180 
__THROW
;

184 #ifdef 
__˝lu•lus


189 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

28 #i‚de‡
_IO_STDIO_H


29 
	#_IO_STDIO_H


	)

31 
	~<_G_c⁄fig.h
>

33 
	#_IO_Âos_t
 
_G_Âos_t


	)

34 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

35 
	#_IO_size_t
 
size_t


	)

36 
	#_IO_ssize_t
 
__ssize_t


	)

37 
	#_IO_off_t
 
__off_t


	)

38 
	#_IO_off64_t
 
__off64_t


	)

39 
	#_IO_pid_t
 
__pid_t


	)

40 
	#_IO_uid_t
 
__uid_t


	)

41 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

42 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

43 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

44 
	#_IO_va_li°
 
_G_va_li°


	)

45 
	#_IO_wöt_t
 
wöt_t


	)

48 
	#__√ed___va_li°


	)

49 
	~<°d¨g.h
>

50 #ifde‡
__GNUC_VA_LIST


51 #unde‡
_IO_va_li°


52 
	#_IO_va_li°
 
__gnuc_va_li°


	)

55 #i‚de‡
__P


56 
	~<sys/cdefs.h
>

59 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

61 #i‚de‡
EOF


62 
	#EOF
 (-1)

	)

64 #i‚de‡
NULL


65 #i‡
deföed
 
__GNUG__
 && \

66 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

67 
	#NULL
 (
__nuŒ
)

	)

69 #i‡!
deföed
(
__˝lu•lus
)

70 
	#NULL
 ((*)0)

	)

72 
	#NULL
 (0)

	)

77 
	#_IOS_INPUT
 1

	)

78 
	#_IOS_OUTPUT
 2

	)

79 
	#_IOS_ATEND
 4

	)

80 
	#_IOS_APPEND
 8

	)

81 
	#_IOS_TRUNC
 16

	)

82 
	#_IOS_NOCREATE
 32

	)

83 
	#_IOS_NOREPLACE
 64

	)

84 
	#_IOS_BIN
 128

	)

92 
	#_IO_MAGIC
 0xFBAD0000

	)

93 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

94 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

95 
	#_IO_USER_BUF
 1

	)

96 
	#_IO_UNBUFFERED
 2

	)

97 
	#_IO_NO_READS
 4

	)

98 
	#_IO_NO_WRITES
 8

	)

99 
	#_IO_EOF_SEEN
 0x10

	)

100 
	#_IO_ERR_SEEN
 0x20

	)

101 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

102 
	#_IO_LINKED
 0x80

	)

103 
	#_IO_IN_BACKUP
 0x100

	)

104 
	#_IO_LINE_BUF
 0x200

	)

105 
	#_IO_TIED_PUT_GET
 0x400

	)

106 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

107 
	#_IO_IS_APPENDING
 0x1000

	)

108 
	#_IO_IS_FILEBUF
 0x2000

	)

109 
	#_IO_BAD_SEEN
 0x4000

	)

110 
	#_IO_USER_LOCK
 0x8000

	)

112 
	#_IO_FLAGS2_MMAP
 1

	)

113 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

114 #ifde‡
_LIBC


115 
	#_IO_FLAGS2_FORTIFY
 4

	)

117 
	#_IO_FLAGS2_USER_WBUF
 8

	)

118 #ifde‡
_LIBC


119 
	#_IO_FLAGS2_SCANF_STD
 16

	)

120 
	#_IO_FLAGS2_NOCLOSE
 32

	)

121 
	#_IO_FLAGS2_CLOEXEC
 64

	)

125 
	#_IO_SKIPWS
 01

	)

126 
	#_IO_LEFT
 02

	)

127 
	#_IO_RIGHT
 04

	)

128 
	#_IO_INTERNAL
 010

	)

129 
	#_IO_DEC
 020

	)

130 
	#_IO_OCT
 040

	)

131 
	#_IO_HEX
 0100

	)

132 
	#_IO_SHOWBASE
 0200

	)

133 
	#_IO_SHOWPOINT
 0400

	)

134 
	#_IO_UPPERCASE
 01000

	)

135 
	#_IO_SHOWPOS
 02000

	)

136 
	#_IO_SCIENTIFIC
 04000

	)

137 
	#_IO_FIXED
 010000

	)

138 
	#_IO_UNITBUF
 020000

	)

139 
	#_IO_STDIO
 040000

	)

140 
	#_IO_DONT_CLOSE
 0100000

	)

141 
	#_IO_BOOLALPHA
 0200000

	)

144 
_IO_jump_t
; 
	g_IO_FILE
;

147 #ifde‡
_IO_MTSAFE_IO


148 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

149 
	~<bôs/°dio-lock.h
>

154 
	t_IO_lock_t
;

160 
	s_IO_m¨kî
 {

161 
_IO_m¨kî
 *
	m_√xt
;

162 
_IO_FILE
 *
	m_sbuf
;

166 
	m_pos
;

168 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

169 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

170 
	mpublic
:

171 
°ªamm¨kî
(
°ªambuf
 *
sb
);

172 ~
°ªamm¨kî
();

173 
ßvög
(Ë{  
	m_•os
 == -2; }

174 
dñè
(
°ªamm¨kî
&);

175 
dñè
();

180 
	e__codecvt_ªsu…


182 
	m__codecvt_ok
,

183 
	m__codecvt_∑πül
,

184 
	m__codecvt_îr‹
,

185 
	m__codecvt_noc⁄v


188 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


191 
	s_IO_codecvt


193 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

194 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

195 
	m__mb°©e_t
 *,

196 c⁄° 
	mwch¨_t
 *,

197 c⁄° 
	mwch¨_t
 *,

198 c⁄° 
	mwch¨_t
 **, *,

200 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

201 
	m__mb°©e_t
 *, *,

203 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

204 
	m__mb°©e_t
 *,

206 c⁄° **, 
	mwch¨_t
 *,

207 
	mwch¨_t
 *, wchar_t **);

208 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

209 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

210 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

211 c⁄° *, c⁄° *, 
	m_IO_size_t
);

212 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

214 
_IO_ic⁄v_t
 
	m__cd_ö
;

215 
_IO_ic⁄v_t
 
	m__cd_out
;

219 
	s_IO_wide_d©a


221 
wch¨_t
 *
	m_IO_ªad_±r
;

222 
wch¨_t
 *
	m_IO_ªad_íd
;

223 
wch¨_t
 *
	m_IO_ªad_ba£
;

224 
wch¨_t
 *
	m_IO_wrôe_ba£
;

225 
wch¨_t
 *
	m_IO_wrôe_±r
;

226 
wch¨_t
 *
	m_IO_wrôe_íd
;

227 
wch¨_t
 *
	m_IO_buf_ba£
;

228 
wch¨_t
 *
	m_IO_buf_íd
;

230 
wch¨_t
 *
	m_IO_ßve_ba£
;

231 
wch¨_t
 *
	m_IO_backup_ba£
;

233 
wch¨_t
 *
	m_IO_ßve_íd
;

235 
__mb°©e_t
 
	m_IO_°©e
;

236 
__mb°©e_t
 
	m_IO_œ°_°©e
;

237 
_IO_codecvt
 
	m_codecvt
;

239 
wch¨_t
 
	m_sh‹tbuf
[1];

241 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

245 
	s_IO_FILE
 {

246 
	m_Êags
;

247 
	#_IO_fûe_Êags
 
_Êags


	)

251 * 
	m_IO_ªad_±r
;

252 * 
	m_IO_ªad_íd
;

253 * 
	m_IO_ªad_ba£
;

254 * 
	m_IO_wrôe_ba£
;

255 * 
	m_IO_wrôe_±r
;

256 * 
	m_IO_wrôe_íd
;

257 * 
	m_IO_buf_ba£
;

258 * 
	m_IO_buf_íd
;

260 *
	m_IO_ßve_ba£
;

261 *
	m_IO_backup_ba£
;

262 *
	m_IO_ßve_íd
;

264 
_IO_m¨kî
 *
	m_m¨kîs
;

266 
_IO_FILE
 *
	m_chaö
;

268 
	m_fûío
;

270 
	m_blksize
;

272 
	m_Êags2
;

274 
_IO_off_t
 
	m_ﬁd_off£t
;

276 
	#__HAVE_COLUMN


	)

278 
	m_cur_cﬁumn
;

279 sig√d 
	m_vèbÀ_off£t
;

280 
	m_sh‹tbuf
[1];

284 
_IO_lock_t
 *
	m_lock
;

285 #ifde‡
_IO_USE_OLD_IO_FILE


288 
	s_IO_FILE_com∂ëe


290 
_IO_FILE
 
	m_fûe
;

292 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

293 
_IO_off64_t
 
	m_off£t
;

294 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


296 
_IO_codecvt
 *
	m_codecvt
;

297 
_IO_wide_d©a
 *
	m_wide_d©a
;

298 
_IO_FILE
 *
	m_‰ìªs_li°
;

299 *
	m_‰ìªs_buf
;

300 
size_t
 
	m_‰ìªs_size
;

302 *
	m__∑d1
;

303 *
	m__∑d2
;

304 *
	m__∑d3
;

305 *
	m__∑d4
;

306 
size_t
 
	m__∑d5
;

308 
	m_mode
;

310 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

314 #i‚de‡
__˝lu•lus


315 
_IO_FILE
 
	t_IO_FILE
;

318 
	g_IO_FILE_∂us
;

320 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

321 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

322 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

323 #i‚de‡
_LIBC


324 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

325 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

326 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

328 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

329 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

330 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

338 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

346 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, c⁄° *
	t__buf
,

347 
	tsize_t
 
	t__n
);

355 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

358 
	t__io_˛o£_‚
 (*
	t__cookõ
);

361 #ifde‡
_GNU_SOURCE


363 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

364 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

365 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

366 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

371 
__io_ªad_‚
 *
	mªad
;

372 
__io_wrôe_‚
 *
	mwrôe
;

373 
__io_£ek_‚
 *
	m£ek
;

374 
__io_˛o£_‚
 *
	m˛o£
;

375 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

376 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

378 
	g_IO_cookõ_fûe
;

381 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

382 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

386 #ifde‡
__˝lu•lus


390 
__undîÊow
 (
_IO_FILE
 *);

391 
__uÊow
 (
_IO_FILE
 *);

392 
__ovîÊow
 (
_IO_FILE
 *, );

393 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


394 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

395 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

396 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

399 #i‡ 
__GNUC__
 >= 3

400 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

402 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

405 
	#_IO_gëc_u∆ocked
(
_Â
) \

406 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

407 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

408 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

409 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

410 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

411 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

412 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

413 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

414 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

415 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

417 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


418 
	#_IO_gëwc_u∆ocked
(
_Â
) \

419 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

420 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

421 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

422 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

423 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

424 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

425 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

426 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

427 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

428 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

431 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

432 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

434 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

435 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

436 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

437 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

439 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

442 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

443 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

445 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

446 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

447 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

449 #ifde‡
_IO_MTSAFE_IO


450 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

451 
	#_IO_Êockfûe
(
_Â
) \

452 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

453 
	#_IO_fu∆ockfûe
(
_Â
) \

454 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

456 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

457 
	#_IO_Êockfûe
(
_Â
Ë

	)

458 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

459 
	#_IO_·rylockfûe
(
_Â
Ë

	)

460 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

461 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

464 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

465 
_IO_va_li°
, *
__ª°ri˘
);

466 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

467 
_IO_va_li°
);

468 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

469 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

471 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

472 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

474 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

476 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


477 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

478 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

479 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

480 #i‡
__GNUC__
 >= 2

483 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


484 
	~<shlib-com∑t.h
>

485 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

486 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

487 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

488 c⁄° 
_IO_°dö_u£d
;

489 
wók_exã∫
 (
_IO_°dö_u£d
);

492 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


493 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

497 
	#_IO_fwide
(
__Â
, 
__mode
) \

498 ({ 
__ªsu…
 = (
__mode
); \

499 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

501 i‡((
__Â
)->
_mode
 == 0) \

503 (
__Â
)->
_mode
 = -1; \

504 
__ªsu…
 = (
__Â
)->
_mode
; \

506 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

507 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

509 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

510 
__ªsu…
; })

	)

513 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

514 
_IO_va_li°
, *
__ª°ri˘
);

515 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

516 
_IO_va_li°
);

517 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

518 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

521 #ifde‡
__LDBL_COMPAT


522 
	~<bôs/libio-ldbl.h
>

525 #ifde‡
__˝lu•lus


	@/usr/include/paths.h

32 #i‚de‡
_PATHS_H_


33 
	#_PATHS_H_


	)

36 
	#_PATH_DEFPATH
 "/u§/bö:/bö"

	)

38 
	#_PATH_STDPATH
 \

39 "/u§/bö:/bö:/u§/sbö:/sbö"

	)

41 
	#_PATH_BSHELL
 "/bö/sh"

	)

42 
	#_PATH_CONSOLE
 "/dev/c⁄sﬁe"

	)

43 
	#_PATH_CSHELL
 "/bö/csh"

	)

44 
	#_PATH_DEVDB
 "/v¨/run/dev.db"

	)

45 
	#_PATH_DEVNULL
 "/dev/nuŒ"

	)

46 
	#_PATH_DRUM
 "/dev/drum"

	)

47 
	#_PATH_GSHADOW
 "/ëc/gshadow"

	)

48 
	#_PATH_KLOG
 "/¥oc/kmsg"

	)

49 
	#_PATH_KMEM
 "/dev/kmem"

	)

50 
	#_PATH_LASTLOG
 "/v¨/log/œ°log"

	)

51 
	#_PATH_MAILDIR
 "/v¨/maû"

	)

52 
	#_PATH_MAN
 "/u§/sh¨e/m™"

	)

53 
	#_PATH_MEM
 "/dev/mem"

	)

54 
	#_PATH_MNTTAB
 "/ëc/f°ab"

	)

55 
	#_PATH_MOUNTED
 "/ëc/mèb"

	)

56 
	#_PATH_NOLOGIN
 "/ëc/nﬁogö"

	)

57 
	#_PATH_PRESERVE
 "/v¨/lib"

	)

58 
	#_PATH_RWHODIR
 "/v¨/•oﬁ/rwho"

	)

59 
	#_PATH_SENDMAIL
 "/u§/sbö/£ndmaû"

	)

60 
	#_PATH_SHADOW
 "/ëc/shadow"

	)

61 
	#_PATH_SHELLS
 "/ëc/shñls"

	)

62 
	#_PATH_TTY
 "/dev/ây"

	)

63 
	#_PATH_UNIX
 "/boŸ/vmlöux"

	)

64 
	#_PATH_UTMP
 "/v¨/run/utmp"

	)

65 
	#_PATH_VI
 "/u§/bö/vi"

	)

66 
	#_PATH_WTMP
 "/v¨/log/wtmp"

	)

69 
	#_PATH_DEV
 "/dev/"

	)

70 
	#_PATH_TMP
 "/tmp/"

	)

71 
	#_PATH_VARDB
 "/v¨/lib/misc/"

	)

72 
	#_PATH_VARRUN
 "/v¨/run/"

	)

73 
	#_PATH_VARTMP
 "/v¨/tmp/"

	)

	@/usr/include/rpc/netdb.h

36 #i‚de‡
_RPC_NETDB_H


37 
	#_RPC_NETDB_H
 1

	)

39 
	~<„©uªs.h
>

41 
	#__√ed_size_t


	)

42 
	~<°ddef.h
>

44 
__BEGIN_DECLS


46 
	sΩ˚¡


48 *
	mr_«me
;

49 **
	mr_Æü£s
;

50 
	mr_numbî
;

53 
	$£åp˚¡
 (
__°ay›í
Ë
__THROW
;

54 
	$ídΩ˚¡
 (Ë
__THROW
;

55 
Ω˚¡
 *
	$gëΩcby«me
 (c⁄° *
__«me
Ë
__THROW
;

56 
Ω˚¡
 *
	$gëΩcbynumbî
 (
__numbî
Ë
__THROW
;

57 
Ω˚¡
 *
	$gëΩ˚¡
 (Ë
__THROW
;

59 #ifde‡
__USE_MISC


60 
	$gëΩcby«me_r
 (c⁄° *
__«me
, 
Ω˚¡
 *
__ªsu…_buf
,

61 *
__buf„r
, 
size_t
 
__buÊí
,

62 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

64 
	$gëΩcbynumbî_r
 (
__numbî
, 
Ω˚¡
 *
__ªsu…_buf
,

65 *
__buf„r
, 
size_t
 
__buÊí
,

66 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

68 
	$gëΩ˚¡_r
 (
Ω˚¡
 *
__ªsu…_buf
, *
__buf„r
,

69 
size_t
 
__buÊí
, 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

72 
__END_DECLS


	@/usr/include/sched.h

19 #i‚def 
_SCHED_H


20 
	#_SCHED_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/ty≥s.h
>

27 
	#__√ed_size_t


	)

28 
	~<°ddef.h
>

30 
	#__√ed_time_t


	)

31 
	#__√ed_time•ec


	)

32 
	~<time.h
>

34 #i‚de‡
__pid_t_deföed


35 
__pid_t
 
	tpid_t
;

36 
	#__pid_t_deföed


	)

41 
	~<bôs/sched.h
>

43 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

46 
__BEGIN_DECLS


49 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, c⁄° 
sched_∑øm
 *
__∑øm
)

50 
__THROW
;

53 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

56 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

57 c⁄° 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

60 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

63 
	$sched_yõld
 (Ë
__THROW
;

66 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

69 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

72 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

75 #ifde‡
__USE_GNU


77 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

78 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

79 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

80 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

81 
˝u£ç
)

	)

82 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

83 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

85 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

86 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

87 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

88 
˝u£ç
)

	)

89 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

90 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

92 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

93 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

94 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

95 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

97 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

98 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

99 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

100 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

101 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

102 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

103 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

104 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

105 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

106 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

107 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

108 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

110 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

111 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

112 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

116 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

117 c⁄° 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

120 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

121 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

124 
__END_DECLS


	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/wch¨.h
>

27 
	~<bôs/w‹dsize.h
>

34 #i‚de‡
__öt8_t_deföed


35 
	#__öt8_t_deföed


	)

36 sig√d 
	töt8_t
;

37 
	töt16_t
;

38 
	töt32_t
;

39 #i‡
__WORDSIZE
 == 64

40 
	töt64_t
;

42 
__exãnsi⁄__


43 
	töt64_t
;

48 
	tuöt8_t
;

49 
	tuöt16_t
;

50 #i‚de‡
__uöt32_t_deföed


51 
	tuöt32_t
;

52 
	#__uöt32_t_deföed


	)

54 #i‡
__WORDSIZE
 == 64

55 
	tuöt64_t
;

57 
__exãnsi⁄__


58 
	tuöt64_t
;

65 sig√d 
	töt_Àa°8_t
;

66 
	töt_Àa°16_t
;

67 
	töt_Àa°32_t
;

68 #i‡
__WORDSIZE
 == 64

69 
	töt_Àa°64_t
;

71 
__exãnsi⁄__


72 
	töt_Àa°64_t
;

76 
	tuöt_Àa°8_t
;

77 
	tuöt_Àa°16_t
;

78 
	tuöt_Àa°32_t
;

79 #i‡
__WORDSIZE
 == 64

80 
	tuöt_Àa°64_t
;

82 
__exãnsi⁄__


83 
	tuöt_Àa°64_t
;

90 sig√d 
	töt_Á°8_t
;

91 #i‡
__WORDSIZE
 == 64

92 
	töt_Á°16_t
;

93 
	töt_Á°32_t
;

94 
	töt_Á°64_t
;

96 
	töt_Á°16_t
;

97 
	töt_Á°32_t
;

98 
__exãnsi⁄__


99 
	töt_Á°64_t
;

103 
	tuöt_Á°8_t
;

104 #i‡
__WORDSIZE
 == 64

105 
	tuöt_Á°16_t
;

106 
	tuöt_Á°32_t
;

107 
	tuöt_Á°64_t
;

109 
	tuöt_Á°16_t
;

110 
	tuöt_Á°32_t
;

111 
__exãnsi⁄__


112 
	tuöt_Á°64_t
;

117 #i‡
__WORDSIZE
 == 64

118 #i‚de‡
__öçå_t_deföed


119 
	töçå_t
;

120 
	#__öçå_t_deföed


	)

122 
	tuöçå_t
;

124 #i‚de‡
__öçå_t_deföed


125 
	töçå_t
;

126 
	#__öçå_t_deföed


	)

128 
	tuöçå_t
;

133 #i‡
__WORDSIZE
 == 64

134 
	tötmax_t
;

135 
	tuötmax_t
;

137 
__exãnsi⁄__


138 
	tötmax_t
;

139 
__exãnsi⁄__


140 
	tuötmax_t
;

144 #i‡
__WORDSIZE
 == 64

145 
	#__INT64_C
(
c
Ë¯## 
L


	)

146 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

148 
	#__INT64_C
(
c
Ë¯## 
LL


	)

149 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

155 
	#INT8_MIN
 (-128)

	)

156 
	#INT16_MIN
 (-32767-1)

	)

157 
	#INT32_MIN
 (-2147483647-1)

	)

158 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

160 
	#INT8_MAX
 (127)

	)

161 
	#INT16_MAX
 (32767)

	)

162 
	#INT32_MAX
 (2147483647)

	)

163 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

166 
	#UINT8_MAX
 (255)

	)

167 
	#UINT16_MAX
 (65535)

	)

168 
	#UINT32_MAX
 (4294967295U)

	)

169 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

173 
	#INT_LEAST8_MIN
 (-128)

	)

174 
	#INT_LEAST16_MIN
 (-32767-1)

	)

175 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

176 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

178 
	#INT_LEAST8_MAX
 (127)

	)

179 
	#INT_LEAST16_MAX
 (32767)

	)

180 
	#INT_LEAST32_MAX
 (2147483647)

	)

181 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

184 
	#UINT_LEAST8_MAX
 (255)

	)

185 
	#UINT_LEAST16_MAX
 (65535)

	)

186 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

187 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

191 
	#INT_FAST8_MIN
 (-128)

	)

192 #i‡
__WORDSIZE
 == 64

193 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

194 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

196 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

197 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

199 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

201 
	#INT_FAST8_MAX
 (127)

	)

202 #i‡
__WORDSIZE
 == 64

203 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

204 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

206 
	#INT_FAST16_MAX
 (2147483647)

	)

207 
	#INT_FAST32_MAX
 (2147483647)

	)

209 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

212 
	#UINT_FAST8_MAX
 (255)

	)

213 #i‡
__WORDSIZE
 == 64

214 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

215 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

217 
	#UINT_FAST16_MAX
 (4294967295U)

	)

218 
	#UINT_FAST32_MAX
 (4294967295U)

	)

220 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

224 #i‡
__WORDSIZE
 == 64

225 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

226 
	#INTPTR_MAX
 (9223372036854775807L)

	)

227 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

229 
	#INTPTR_MIN
 (-2147483647-1)

	)

230 
	#INTPTR_MAX
 (2147483647)

	)

231 
	#UINTPTR_MAX
 (4294967295U)

	)

236 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

238 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

241 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

247 #i‡
__WORDSIZE
 == 64

248 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

249 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

251 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

252 
	#PTRDIFF_MAX
 (2147483647)

	)

256 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

257 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

260 #i‡
__WORDSIZE
 == 64

261 
	#SIZE_MAX
 (18446744073709551615UL)

	)

263 
	#SIZE_MAX
 (4294967295U)

	)

267 #i‚de‡
WCHAR_MIN


269 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

270 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

274 
	#WINT_MIN
 (0u)

	)

275 
	#WINT_MAX
 (4294967295u)

	)

278 
	#INT8_C
(
c
Ë
	)
c

279 
	#INT16_C
(
c
Ë
	)
c

280 
	#INT32_C
(
c
Ë
	)
c

281 #i‡
__WORDSIZE
 == 64

282 
	#INT64_C
(
c
Ë¯## 
L


	)

284 
	#INT64_C
(
c
Ë¯## 
LL


	)

288 
	#UINT8_C
(
c
Ë
	)
c

289 
	#UINT16_C
(
c
Ë
	)
c

290 
	#UINT32_C
(
c
Ë¯## 
U


	)

291 #i‡
__WORDSIZE
 == 64

292 
	#UINT64_C
(
c
Ë¯## 
UL


	)

294 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

298 #i‡
__WORDSIZE
 == 64

299 
	#INTMAX_C
(
c
Ë¯## 
L


	)

300 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

302 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

303 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/xlocale.h

20 #i‚de‡
_XLOCALE_H


21 
	#_XLOCALE_H
 1

	)

27 
	s__loˇÀ_°ru˘


30 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

33 c⁄° *
	m__˘y≥_b
;

34 c⁄° *
	m__˘y≥_tﬁowî
;

35 c⁄° *
	m__˘y≥_touµî
;

38 c⁄° *
	m__«mes
[13];

39 } *
	t__loˇÀ_t
;

42 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

23 
__off_t
 
	m__pos
;

24 
__mb°©e_t
 
	m__°©e
;

25 } 
	t_G_Âos_t
;

28 
__off64_t
 
	m__pos
;

29 
__mb°©e_t
 
	m__°©e
;

30 } 
	t_G_Âos64_t
;

31 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


32 
	~<gc⁄v.h
>

35 
__gc⁄v_öfo
 
	m__cd
;

38 
__gc⁄v_öfo
 
	m__cd
;

39 
__gc⁄v_°ï_d©a
 
	m__d©a
;

40 } 
	m__comböed
;

41 } 
	t_G_ic⁄v_t
;

46 
	#_G_va_li°
 
__gnuc_va_li°


	)

48 
	#_G_HAVE_MMAP
 1

	)

49 
	#_G_HAVE_MREMAP
 1

	)

51 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

54 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

56 
	#_G_BUFSIZ
 8192

	)

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

54 
	#__STDC_ISO_10646__
 201103L

	)

57 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/gconv.h

22 #i‚de‡
_GCONV_H


23 
	#_GCONV_H
 1

	)

25 
	~<„©uªs.h
>

26 
	#__√ed_mb°©e_t


	)

27 
	#__√ed_wöt_t


	)

28 
	~<wch¨.h
>

29 
	#__√ed_size_t


	)

30 
	#__√ed_wch¨_t


	)

31 
	~<°ddef.h
>

34 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

39 
	m__GCONV_OK
 = 0,

40 
	m__GCONV_NOCONV
,

41 
	m__GCONV_NODB
,

42 
	m__GCONV_NOMEM
,

44 
	m__GCONV_EMPTY_INPUT
,

45 
	m__GCONV_FULL_OUTPUT
,

46 
	m__GCONV_ILLEGAL_INPUT
,

47 
	m__GCONV_INCOMPLETE_INPUT
,

49 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

50 
	m__GCONV_INTERNAL_ERROR


57 
	m__GCONV_IS_LAST
 = 0x0001,

58 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

59 
	m__GCONV_SWAP
 = 0x0004

64 
	g__gc⁄v_°ï
;

65 
	g__gc⁄v_°ï_d©a
;

66 
	g__gc⁄v_lﬂded_obje˘
;

67 
	g__gc⁄v_å™s_d©a
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

85 
	t__gc⁄v_°ï_d©a
 *, *,

89 
	tsize_t
 *);

92 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
) (*, const *,

97 (*
	t__gc⁄v_å™s_quîy_f˘
) (const *, const ***,

98 
	tsize_t
 *);

101 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

102 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

104 
	s__gc⁄v_å™s_d©a


107 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

108 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

109 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

110 *
__d©a
;

111 
__gc⁄v_å™s_d©a
 *
__√xt
;

116 
	s__gc⁄v_°ï


118 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

119 c⁄° *
__mod«me
;

121 
__cou¡î
;

123 *
__‰om_«me
;

124 *
__to_«me
;

126 
__gc⁄v_f˘
 
__f˘
;

127 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

128 
__gc⁄v_öô_f˘
 
__öô_f˘
;

129 
__gc⁄v_íd_f˘
 
__íd_f˘
;

133 
__mö_√eded_‰om
;

134 
__max_√eded_‰om
;

135 
__mö_√eded_to
;

136 
__max_√eded_to
;

139 
__°©eful
;

141 *
__d©a
;

146 
	s__gc⁄v_°ï_d©a


148 *
__outbuf
;

149 *
__outbu„nd
;

153 
__Êags
;

157 
__övoˇti⁄_cou¡î
;

161 
__öã∫Æ_u£
;

163 
__mb°©e_t
 *
__°©ï
;

164 
__mb°©e_t
 
__°©e
;

168 
__gc⁄v_å™s_d©a
 *
__å™s
;

173 
	s__gc⁄v_öfo


175 
size_t
 
__n°ïs
;

176 
__gc⁄v_°ï
 *
__°ïs
;

177 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

178 } *
	t__gc⁄v_t
;

	@/usr/include/wchar.h

23 #i‚de‡
_WCHAR_H


25 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


26 
	#_WCHAR_H
 1

	)

27 
	~<„©uªs.h
>

30 #ifde‡
_WCHAR_H


32 
	#__√ed___FILE


	)

33 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_FILE


	)

36 
	~<°dio.h
>

38 
	#__√ed___va_li°


	)

39 
	~<°d¨g.h
>

41 
	~<bôs/wch¨.h
>

44 
	#__√ed_size_t


	)

45 
	#__√ed_wch¨_t


	)

46 
	#__√ed_NULL


	)

48 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


49 #unde‡
__√ed_wöt_t


50 
	#__√ed_wöt_t


	)

51 
	~<°ddef.h
>

55 #i‚de‡
_WINT_T


60 
	#_WINT_T


	)

61 
	twöt_t
;

65 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

66 && 
deföed
 
__WINT_TYPE__


67 
__BEGIN_NAMESPACE_STD


68 
__WINT_TYPE__
 
	twöt_t
;

69 
	g__END_NAMESPACE_STD


74 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

75 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

79 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
____mb°©e_t_deföed


80 
	#____mb°©e_t_deföed
 1

	)

84 
	m__cou¡
;

87 #ifde‡
__WINT_TYPE__


88 
__WINT_TYPE__
 
	m__wch
;

90 
wöt_t
 
	m__wch
;

92 
	m__wchb
[4];

93 } 
	m__vÆue
;

94 } 
	t__mb°©e_t
;

96 #unde‡
__√ed_mb°©e_t


101 #ifde‡
_WCHAR_H


103 #i‚de‡
__mb°©e_t_deföed


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 
	#__mb°©e_t_deföed
 1

	)

111 #ifde‡
__USE_GNU


112 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

115 #i‚de‡
WCHAR_MIN


117 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

118 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

121 #i‚de‡
WEOF


122 
	#WEOF
 (0xffffffffu)

	)

127 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


128 
	~<w˘y≥.h
>

132 
__BEGIN_DECLS


134 
__BEGIN_NAMESPACE_STD


137 
tm
;

138 
__END_NAMESPACE_STD


142 
	$__USING_NAMESPACE_STD
(
tm
)

145 
__BEGIN_NAMESPACE_STD


147 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

150 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

151 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

152 
__THROW
;

155 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

158 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

159 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

160 
__THROW
;

163 
	$wcscmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
)

164 
__THROW
 
__©åibuã_puª__
;

166 
	$wc¢cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

167 
__THROW
 
__©åibuã_puª__
;

168 
__END_NAMESPACE_STD


170 #ifde‡
__USE_XOPEN2K8


172 
	$wcsˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

175 
	$wc¢ˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

176 
size_t
 
__n
Ë
__THROW
;

180 
	~<xloˇÀ.h
>

182 
	$wcsˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

183 
__loˇÀ_t
 
__loc
Ë
__THROW
;

185 
	$wc¢ˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

186 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


192 
	$wcscﬁl
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

196 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

197 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

198 
__END_NAMESPACE_STD


200 #ifde‡
__USE_XOPEN2K8


206 
	$wcscﬁl_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

207 
__loˇÀ_t
 
__loc
Ë
__THROW
;

212 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

213 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

216 
wch¨_t
 *
	$wcsdup
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

219 
__BEGIN_NAMESPACE_STD


221 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


222 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

223 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 "C++" c⁄° 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

227 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

228 
__THROW
 
__©åibuã_puª__
;

231 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


232 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

233 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 "C++" c⁄° 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

237 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

238 
__THROW
 
__©åibuã_puª__
;

240 
__END_NAMESPACE_STD


242 #ifde‡
__USE_GNU


245 
wch¨_t
 *
	$wcsch∫ul
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__wc
)

246 
__THROW
 
__©åibuã_puª__
;

249 
__BEGIN_NAMESPACE_STD


252 
size_t
 
	$wcsc•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ªje˘
)

253 
__THROW
 
__©åibuã_puª__
;

256 
size_t
 
	$wcs•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

257 
__THROW
 
__©åibuã_puª__
;

259 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


260 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

262 "C++" c⁄° 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
,

263 c⁄° 
wch¨_t
 *
__ac˚±
)

264 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

266 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

267 
__THROW
 
__©åibuã_puª__
;

270 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


271 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

273 "C++" c⁄° 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
,

274 c⁄° 
wch¨_t
 *
__√edÀ
)

275 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

277 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

278 
__THROW
 
__©åibuã_puª__
;

282 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

283 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

284 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

287 
size_t
 
	$wc¶í
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

288 
__END_NAMESPACE_STD


290 #ifde‡
__USE_XOPEN


292 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


293 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

295 "C++" c⁄° 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
,

296 c⁄° 
wch¨_t
 *
__√edÀ
)

297 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

299 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

300 
__THROW
 
__©åibuã_puª__
;

304 #ifde‡
__USE_XOPEN2K8


306 
size_t
 
	$wc¢Àn
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

307 
__THROW
 
__©åibuã_puª__
;

311 
__BEGIN_NAMESPACE_STD


313 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


314 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

316 "C++" c⁄° 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
,

317 
size_t
 
__n
)

318 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

320 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

321 
__THROW
 
__©åibuã_puª__
;

325 
	$wmemcmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

326 
__THROW
 
__©åibuã_puª__
;

329 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

330 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

334 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

335 
__THROW
;

338 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

339 
__END_NAMESPACE_STD


341 #ifde‡
__USE_GNU


344 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

345 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

346 
__THROW
;

350 
__BEGIN_NAMESPACE_STD


353 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

357 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

361 
	$mbsöô
 (c⁄° 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

365 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

366 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

367 
mb°©e_t
 *
__ª°ri˘
 
__p
Ë
__THROW
;

370 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

371 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

374 
size_t
 
	$__mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

375 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

376 
size_t
 
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

377 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

378 
__END_NAMESPACE_STD


380 #ifde‡
__USE_EXTERN_INLINES


386 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

387 
__exã∫_ölöe
 
wöt_t


388 
	`__NTH
 (
	$btowc
 (
__c
))

389 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

390 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

392 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

393 
__exã∫_ölöe
 

394 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

395 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

396 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

398 
__exã∫_ölöe
 
size_t


399 
__NTH
 (
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

400 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

401 {  (
__ps
 !
NULL


402 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

405 
__BEGIN_NAMESPACE_STD


408 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

409 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

410 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

414 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

415 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

416 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

417 
__END_NAMESPACE_STD


420 #ifdef 
__USE_XOPEN2K8


423 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

424 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

425 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

429 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

430 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

431 
size_t
 
__nwc
, size_à
__Àn
,

432 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

437 #ifde‡
__USE_XOPEN


439 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

443 
	$wcswidth
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

447 
__BEGIN_NAMESPACE_STD


450 
	$wc°od
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

451 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

452 
__END_NAMESPACE_STD


454 #ifde‡
__USE_ISOC99


455 
__BEGIN_NAMESPACE_C99


457 
	$wc°of
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

458 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

459 
	$wc°ﬁd
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

460 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

461 
__END_NAMESPACE_C99


465 
__BEGIN_NAMESPACE_STD


468 
	$wc°ﬁ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

469 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

473 
	$wc°oul
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

474 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

475 
__THROW
;

476 
__END_NAMESPACE_STD


478 #ifde‡
__USE_ISOC99


479 
__BEGIN_NAMESPACE_C99


482 
__exãnsi⁄__


483 
	$wc°ﬁl
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

484 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

485 
__THROW
;

489 
__exãnsi⁄__


490 
	$wc°ouŒ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

491 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

492 
__ba£
Ë
__THROW
;

493 
__END_NAMESPACE_C99


496 #ifde‡
__USE_GNU


499 
__exãnsi⁄__


500 
	$wc°oq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

501 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

502 
__THROW
;

506 
__exãnsi⁄__


507 
	$wc°ouq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

508 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

509 
__ba£
Ë
__THROW
;

512 #ifde‡
__USE_GNU


526 
	~<xloˇÀ.h
>

530 
	$wc°ﬁ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

531 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

532 
__loˇÀ_t
 
__loc
Ë
__THROW
;

534 
	$wc°oul_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

535 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

536 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

538 
__exãnsi⁄__


539 
	$wc°ﬁl_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

540 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

541 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

543 
__exãnsi⁄__


544 
	$wc°ouŒ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

545 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

546 
__ba£
, 
__loˇÀ_t
 
__loc
)

547 
__THROW
;

549 
	$wc°od_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

550 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

551 
__THROW
;

553 
	$wc°of_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

554 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

555 
__THROW
;

557 
	$wc°ﬁd_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

558 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

559 
__loˇÀ_t
 
__loc
Ë
__THROW
;

563 #ifde‡
__USE_XOPEN2K8


566 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

567 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

571 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

572 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

573 
__THROW
;

580 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

583 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


584 
__BEGIN_NAMESPACE_STD


587 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

594 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

595 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

601 
	`w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

605 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

606 
__THROW
 ;

612 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

613 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

614 
__gnuc_va_li°
 
__¨g
)

620 
	`vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

621 
__gnuc_va_li°
 
__¨g
)

625 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

626 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

627 
__gnuc_va_li°
 
__¨g
)

628 
__THROW
 ;

635 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

636 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

642 
	`wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
	$swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

646 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

647 
__THROW
 ;

649 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

650 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

651 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

652 #ifde‡
__REDIRECT


656 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

657 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

658 
__isoc99_fwsˇnf
)

660 
	`__REDIRECT
 (
wsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

661 
__isoc99_wsˇnf
)

663 
	`__REDIRECT_NTH
 (
swsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

664 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

665 ...), 
__isoc99_swsˇnf
)

668 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

669 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

670 
	`__isoc99_wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

671 
	$__isoc99_swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

672 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

673 
__THROW
;

674 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

675 
	#wsˇnf
 
__isoc99_wsˇnf


	)

676 
	#swsˇnf
 
__isoc99_swsˇnf


	)

680 
__END_NAMESPACE_STD


683 #ifde‡
__USE_ISOC99


684 
__BEGIN_NAMESPACE_C99


689 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

690 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

691 
__gnuc_va_li°
 
__¨g
)

697 
	`vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

698 
__gnuc_va_li°
 
__¨g
)

701 
	$vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

702 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

703 
__gnuc_va_li°
 
__¨g
)

704 
__THROW
 ;

706 #i‡!
deföed
 
__USE_GNU
 \

707 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

708 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

709 #ifde‡
__REDIRECT


710 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

711 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

712 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

714 
	`__REDIRECT
 (
vwsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

715 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

717 
	`__REDIRECT_NTH
 (
vswsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

718 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

719 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

722 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

723 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

724 
__gnuc_va_li°
 
__¨g
);

725 
	`__isoc99_vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

726 
__gnuc_va_li°
 
__¨g
);

727 
	$__isoc99_vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

728 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

729 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

730 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

731 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

732 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

736 
__END_NAMESPACE_C99


740 
__BEGIN_NAMESPACE_STD


745 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

746 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

752 
wöt_t
 
	`gëwch¨
 ();

759 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

760 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

766 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

774 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

775 
__FILE
 *
__ª°ri˘
 
__°ªam
);

781 
	`Âutws
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

782 
__FILE
 *
__ª°ri˘
 
__°ªam
);

789 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

790 
__END_NAMESPACE_STD


793 #ifde‡
__USE_GNU


801 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

802 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

810 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

818 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

827 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

828 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

837 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

838 
__FILE
 *
__ª°ri˘
 
__°ªam
);

846 
	`Âutws_u∆ocked
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

847 
__FILE
 *
__ª°ri˘
 
__°ªam
);

851 
__BEGIN_NAMESPACE_C99


855 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

856 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

857 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

858 
__END_NAMESPACE_C99


860 #ifde‡
__USE_GNU


861 
	~<xloˇÀ.h
>

865 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

866 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

867 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

868 
__loˇÀ_t
 
__loc
Ë
__THROW
;

877 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


878 
	#__√ed_iswxxx


	)

879 
	~<w˘y≥.h
>

883 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


884 
	~<bôs/wch¨2.h
>

887 #ifde‡
__LDBL_COMPAT


888 
	~<bôs/wch¨-ldbl.h
>

891 
__END_DECLS


899 #unde‡
__√ed_mb°©e_t


900 #unde‡
__√ed_wöt_t


	@/usr/include/wctype.h

23 #i‚de‡
_WCTYPE_H


25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 #i‚de‡
__√ed_iswxxx


29 
	#_WCTYPE_H
 1

	)

32 
	#__√ed_wöt_t


	)

33 
	~<wch¨.h
>

37 #i‚de‡
WEOF


38 
	#WEOF
 (0xffffffffu)

	)

41 #unde‡
__√ed_iswxxx


46 #i‚de‡
__iswxxx_deföed


47 
	#__iswxxx_deföed
 1

	)

49 
__BEGIN_NAMESPACE_C99


52 
	tw˘y≥_t
;

53 
	g__END_NAMESPACE_C99


55 #i‚de‡
_ISwbô


60 
	~<ídün.h
>

61 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


62 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

64 
	#_ISwbô
(
bô
) \

65 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

66 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

67 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

68 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

73 
	m__ISwuµî
 = 0,

74 
	m__ISwlowî
 = 1,

75 
	m__ISwÆpha
 = 2,

76 
	m__ISwdigô
 = 3,

77 
	m__ISwxdigô
 = 4,

78 
	m__ISw•a˚
 = 5,

79 
	m__ISw¥öt
 = 6,

80 
	m__ISwgøph
 = 7,

81 
	m__ISwbœnk
 = 8,

82 
	m__ISw˙ål
 = 9,

83 
	m__ISwpun˘
 = 10,

84 
	m__ISwÆnum
 = 11,

86 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

87 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

88 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

89 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

90 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

91 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

92 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

93 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

94 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

95 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

96 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

97 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

102 
__BEGIN_DECLS


104 
__BEGIN_NAMESPACE_C99


111 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

117 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

120 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

124 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

128 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

133 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

136 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

141 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

146 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

151 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

156 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

161 #ifde‡
__USE_ISOC99


162 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

171 
w˘y≥_t
 
	$w˘y≥
 (c⁄° *
__¥›îty
Ë
__THROW
;

175 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

176 
__END_NAMESPACE_C99


183 
__BEGIN_NAMESPACE_C99


186 c⁄° 
	t__öt32_t
 *
	tw˘øns_t
;

187 
__END_NAMESPACE_C99


188 #ifde‡
__USE_GNU


189 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

192 
__BEGIN_NAMESPACE_C99


194 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

197 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
__END_NAMESPACE_C99


200 
__END_DECLS


207 #ifde‡
_WCTYPE_H


213 
__BEGIN_DECLS


215 
__BEGIN_NAMESPACE_C99


218 
w˘øns_t
 
	$w˘øns
 (c⁄° *
__¥›îty
Ë
__THROW
;

221 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

222 
__END_NAMESPACE_C99


224 #ifde‡
__USE_XOPEN2K8


226 
	~<xloˇÀ.h
>

230 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

236 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

239 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

243 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

247 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

252 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

255 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

260 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

265 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

270 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

275 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

280 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

284 
w˘y≥_t
 
	$w˘y≥_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

285 
__THROW
;

289 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

290 
__THROW
;

298 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

301 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

305 
w˘øns_t
 
	$w˘øns_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

306 
__THROW
;

309 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

310 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

314 
__END_DECLS


	@
1
.
1
/usr/include
289
4859
advio/catgetmsg.c
advio/devzero.c
advio/mcopy.c
advio/nonblockw.c
advio/pendlock.c
call/call.c
call/call.h
call/escape.c
call/loop.poll.c
call/main.c
call/put.c
call/take.c
call/takeput.c
calld/calld.h
calld/childdial.c
calld/cliargs.c
calld/client.c
calld/ctlstr.c
calld/debug.c
calld/devfile.c
calld/dialfile.c
calld/expectstr.c
calld/lock.c
calld/loop.c
calld/main.c
calld/request.c
calld/sendstr.c
calld/sigchld.c
calld/sysfile.c
calld/ttydial.c
calld/ttyopen.c
daemons/init.c
daemons/lockfile.c
daemons/reread.c
daemons/reread2.c
daemons/single.c
datafiles/getpwnam.c
db/apue_db.h
db/db.c
db/t4.c
environ/cmd1.c
environ/cmd2.c
environ/doatexit.c
environ/getrlimit.c
environ/hello1.c
environ/opendata.c
environ/testjmp.c
exercises/asyncsocket.c
exercises/getlogin.c
exercises/getpw44bsd.c
exercises/getpwsvr4.c
exercises/goodexit.c
exercises/openmax.c
exercises/prtime.c
exercises/sizepipe.c
exercises/sleep.c
exercises/sleepus_poll.c
exercises/sleepus_select.c
file/access.c
file/cdpwd.c
file/changemod.c
file/devrdev.c
file/fileflags.c
file/filetype.c
file/ftw4.c
file/hello.c
file/hole.c
file/longpath.c
file/ls1.c
file/mycd.c
file/seek.c
file/testerror.c
file/uidgid.c
file/umask.c
file/unlink.c
file/zap.c
include/apue.h
ipc/add2.c
ipc/add2stdio.c
ipc/fifo1.c
ipc/myuclc.c
ipc/pipe1.c
ipc/pipe2.c
ipc/pipe4.c
ipc/popen1.c
ipc/popen2.c
ipc/spipe4.c
ipc/tellwait.c
ipc/tshm.c
ipp/ipp.h
ipp/print.c
ipp/print.h
ipp/printd.c
ipp/util.c
lib/bsd_ptyopen.c
lib/bufargs.c
lib/cliconn.c
lib/clrfl.c
lib/daemonize.c
lib/error.c
lib/errorlog.c
lib/linux_ptyopen.c
lib/lockreg.c
lib/locktest.c
lib/nspipe.c
lib/openmax.c
lib/pathalloc.c
lib/popen.c
lib/prexit.c
lib/prmask.c
lib/ptyfork.c
lib/readn.c
lib/recvfd.c
lib/semaph.c
lib/senderr.c
lib/sendfd.c
lib/servaccept.c
lib/servlisten.c
lib/setfl.c
lib/signal.c
lib/signalintr.c
lib/sleep.c
lib/sleepus.c
lib/spipe.c
lib/tellwait.c
lib/ttymodes.c
lib/writen.c
lock/deadlock.c
lock/mandatory.c
mycat/fgetsfputs.c
mycat/getcputc.c
mycat/mycat.c
open.fe/main.c
open.fe/open.c
open.fe/open.h
open/open.c
open/open.h
opend.fe/cliargs.c
opend.fe/main.c
opend.fe/opend.h
opend.fe/request.c
opend/client.c
opend/loop.poll.c
opend/loop.select.c
opend/main.c
opend/opend.h
opend/request.c
proc/echoall.c
proc/echoarg.c
proc/exec1.c
proc/exec2.c
proc/fork1.c
proc/fork2.c
proc/pracct.c
proc/pruids.c
proc/shell1.c
proc/shell2.c
proc/system.c
proc/systest1.c
proc/systest2.c
proc/systest3.c
proc/tellwait1.c
proc/tellwait2.c
proc/test1.c
proc/times1.c
proc/vfork1.c
proc/vfork3.c
proc/wait1.c
proc/zombie.c
pty/driver.c
pty/loop.c
pty/main.c
sess/orphan3.c
signals/abort.c
signals/child.c
signals/critical.c
signals/mask.c
signals/read1.c
signals/read2.c
signals/reenter.c
signals/setops.c
signals/sigtstp.c
signals/sigusr.c
signals/sleep1.c
signals/sleep2.c
signals/suspend1.c
signals/suspend2.c
signals/system.c
signals/tsleep2.c
sockets/bindunix.c
sockets/bo.c
sockets/clconn.c
sockets/cliconn.c
sockets/findsvc.c
sockets/initsrv1.c
sockets/initsrv2.c
sockets/recvfd.c
sockets/recvfd2.c
sockets/ruptime-dg.c
sockets/ruptime.c
sockets/ruptimed-dg.c
sockets/ruptimed-fd.c
sockets/ruptimed.c
sockets/sendfd.c
sockets/sendfd2.c
sockets/servaccept.c
sockets/servlisten.c
sockets/spipe.c
stdio/buf.c
stdio/tempfiles.c
stdio/tempnam.c
streams/cliconn.c
streams/isastream.c
streams/ptyopen.c
streams/recvfd.c
streams/sendfd.c
streams/servaccept.c
streams/servlisten.c
streams/spipe.c
streams/strlist.c
streams/t_isastream.c
termios/csize.c
termios/ctermid.c
termios/getpass.c
termios/isatty.c
termios/settty.c
termios/t_getpass.c
termios/t_isatty.c
termios/t_raw.c
termios/t_ttyname.c
termios/ttyname.c
termios/winch.c
threadctl/atfork.c
threadctl/detach.c
threadctl/getenv1.c
threadctl/getenv2.c
threadctl/getenv3.c
threadctl/suspend.c
threadctl/timeout.c
threads/badexit2.c
threads/cleanup.c
threads/condvar.c
threads/exitstatus.c
threads/mutex1.c
threads/mutex2.c
threads/mutex3.c
threads/rwlock.c
threads/threadid.c
/usr/include/arpa/inet.h
/usr/include/ctype.h
/usr/include/dirent.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/grp.h
/usr/include/inttypes.h
/usr/include/limits.h
/usr/include/netdb.h
/usr/include/netinet/in.h
/usr/include/poll.h
/usr/include/pthread.h
/usr/include/pwd.h
/usr/include/setjmp.h
/usr/include/shadow.h
/usr/include/signal.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/strings.h
/usr/include/stropts.h
/usr/include/syslog.h
/usr/include/termios.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/utime.h
/usr/include/alloca.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/paths.h
/usr/include/rpc/netdb.h
/usr/include/sched.h
/usr/include/stdint.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/stdc-predef.h
/usr/include/gconv.h
/usr/include/wchar.h
/usr/include/wctype.h
