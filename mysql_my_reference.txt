SHOW COLUMNS FROM president LIKE '%name';

SELECT NOW(), USER(), VERSION(), DATABASE()\G

SELECT score.name, grade_event.date, score.score, grade_event.category
FROM score INNER JOIN grade_event
ON score.event_id = grade_event.event_id
WHERE grade_event.date = '2008-09-23';


# Create member table for U.S. Historical League

DROP TABLE IF EXISTS member;
#@ _CREATE_TABLE_
CREATE TABLE member
(
  member_id  INT UNSIGNED NOT NULL AUTO_INCREMENT,
  PRIMARY KEY (member_id),
  last_name  VARCHAR(20) NOT NULL,
  first_name VARCHAR(20) NOT NULL,
  suffix     VARCHAR(5) NULL,
  expiration DATE NULL,
  email      VARCHAR(100) NULL,
  street     VARCHAR(50) NULL,
  city       VARCHAR(50) NULL,
  state      VARCHAR(2) NULL,
  zip        VARCHAR(10) NULL,
  phone      VARCHAR(20) NULL,
  interests  VARCHAR(255) NULL
);
#@ _CREATE_TABLE_


CREATE TABLE student
(
name VARCHAR(20) NOT NULL,
sex ENUM('F','M') NOT NULL,
student_id INT UNSIGNED NOT NULL AUTO_INCREMENT,
PRIMARY KEY (student_id)
) ENGINE = InnoDB;

DESCRIBE student 'sex';

If you omit the ENGINE clause, MySQL picks a default engine, which usually is
MyISAM.“ISAM” stands for “indexed sequential access method. we’re explicitly using the
InnoDB storage engine instead. InnoDB offers something called “referential integrity”
through the use of foreign keys.


CREATE TABLE score
(
student_id INT UNSIGNED NOT NULL,
event_id INT UNSIGNED NOT NULL,
score INT NOT NULL,
PRIMARY KEY (event_id, student_id),
INDEX (student_id),
FOREIGN KEY (event_id) REFERENCES grade_event (event_id),
FOREIGN KEY (student_id) REFERENCES student (student_id)
) ENGINE = InnoDB;


INSERT INTO student VALUES('Avery','F',NULL),('Nathan','M',NULL);
INSERT INTO student (name,sex) VALUES('Abby','F'),('Joseph','M');
INSERT INTO member SET last_name='Stein',first_name='Waldo';
mysql> source insert_president.sql;
mysql --local-infile sampdb
mysql> LOAD DATA LOCAL INFILE 'member.txt' INTO TABLE member;



Column names are not case sensitive in MySQL, so the following queries all retrieve
the same information:

# All are same
SELECT name, student_id FROM student;
SELECT NAME, STUDENT_ID FROM student;
SELECT nAmE, sTuDeNt_Id FROM student;

On the other hand, database and table names might be case sensitive. It depends on the
filesystem used on the server host and on how MySQL is configured.Windows filenames
are not case sensitive, so a server running on Windows does not treat database and table
names as case sensitive. On Unix systems, filenames generally are case sensitive, so a server
would treat database and table names as case sensitive.An exception to this occurs under
Mac OS X, which offers both HFS+ and UFS filesystems: HFS+ is the default, and it uses
case-insensitive filenames.
If you want to have MySQL treat database and table names as not case sensitive, you
can configure the server that way. See Section 11.2.5,“Operating System Constraints on
Database Object Names.”


mysql> SELECT last_name, first_name, birth, state FROM president
-> WHERE birth < '1750-1-1' AND (state='VA' OR state='MA');
+------------+------------+------------+-------+
| last_name | first_name | birth | state |
+------------+------------+------------+-------+
| Washington | George | 1732-02-22 | VA |
| Adams | John | 1735-10-30 | MA |
| Jefferson | Thomas | 1743-04-13 | VA |
+------------+------------+------------+-------+
Expressions in WHERE clauses can use arithmetic operators (Table 1.1), comparison operators
(Table 1.2), and logical operators (Table 1.3).You can also use parentheses to group
parts of an expression.



Suppose that you want to find “presidents born in Virginia and presidents born in
Massachusetts.”That condition is phrased using “and,” which seems to imply that you’d
write the statement as follows:
mysql> SELECT last_name, first_name, state FROM president
-> WHERE state='VA' AND state='MA';
Empty set (0.36 sec)

you don’t
necessarily want to transcribe their descriptions into SQL using the same logical operators.
For the example just described, the proper English equivalent for the query is “Select
presidents who were born either in Virginia or in Massachusetts.”
You might find it easier to use the IN() operator when formulating queries like this,
where you’re looking for any of several values.The preceding query can be rewritten using
IN() like this:
SELECT last_name, first_name, state FROM president
WHERE state IN('VA','MA');
IN() is especially convenient when you’re comparing a column to a large number of
values.



SELECT NULL < 0, NULL = 0, NULL <> 0, NULL > 0;


mysql> SELECT last_name, first_name, suffix
-> FROM president WHERE suffix IS NOT NULL;

#Both are same
SELECT last_name, first_name FROM president WHERE death <=> NULL;
SELECT last_name, first_name FROM president WHERE death IS NULL;

mysql> SELECT last_name, first_name, state FROM president
-> ORDER BY state DESC, last_name ASC;

mysql> SELECT last_name, first_name, birth FROM president
-> ORDER BY birth DESC LIMIT 5;

mysql> SELECT last_name, first_name, birth FROM president
-> ORDER BY birth DESC LIMIT 10, 5;

SELECT last_name, first_name FROM president
-> ORDER BY RAND() LIMIT 1;




