

Ch-5: Python Basics
---------------------------

1) python manage.py shell

2) Docstring """ ...  """
	- Access by using __doc__ 
	-  PEP 257 style

3) Dot operator is pointing

4) Classes, Functions, Sub-functions

5) Regular Expression


Ch-6: Your First Django Application
----------------------------------------

1) django-admin startproject <project name>

2) python manage.py startapp <app_name>

3) settings.py to include INSTALLED_APPS list
	<app_name>.apps.PagesConfig

4) HttpResponse from <app_name>/views.py
	// django.shortcuts import render for rendering data and template
	- from django.http import HttpResponse
	- def inedx(request) function
	- return HttpResponse('<H1>Dineshkumar Page!!!</H1>')

5) Create <project_name>/<apps>/urls.py to include urlpatterns
	// django.conf.urls import url for including type of urls
	- import views (from . import views)
	- urlpatterns = [
			url(r'^$', views.index, name="Index"),
		]

6) Modify <project_name>/urls.py
	// import include from django.conf.urls
	- urlpatterns = [
		url('^', include('pages.urls')) // Includes all the details after domain name
		// Try import pages and include('urls')
		// Try without include() function
		]
	
7) python manage.py migrate

Ch-7 : Creating the Pages Model
----------------------------------------

1) Data model is the data object - Mapping app's data to database without SQL querry

2) App's model created in <app_name>/models.py
	- from django.db import models
	- inherit models.Model in the app's model

3) Define the fields for the model
	- field type and options
	- title		= models.CharField(max_length=60)
	- perma_link	= models.TextFieldmax_length=12, unique=True)
	- update_date	= models.DateTimeField('Last Updated')
	- bodytext	= models.TextField('Page Content', blank=True)

4) Model to be accessed from admin in the app and register it
	- <app_name>/admin.py
	- import admin "from django.contrib import admin"
	- import app model "Eg. from .models import Page"
	- admin.site.register(Page)

5) Create Migrations
	- App migrations "python manage.py makemigrations pages"
	- project migrations "python manage.py migrate"

Notes: If this doesn't work and Django complains that it cann't find your pages
app, this is almost certainly because you forgot to add the app to
your INSTALLED_APPS.

6) Admin Interface 
	- Backend site manager to moderate user generated comments
	- Post to your blog
	- Trusted site admin (Add, Delete and Edit site content)
	- Update the press release
	- Built in admin interface to add content to our page

	- Crate an admin user to login (python manage.py createsuperuser)
	- URL "/admin/" list your registered models
7) __str__ function defined inside Model to return human readable details.
Note: If there is no __str__ method, then the Object Type (Page object) will be returned.

8) Define administrator class for Page models to improve admin interface
	- PageAdmin class to inherit (admin.ModelAdmin)
		- list_display = ('title','update_date') // What to display
		- ordering = ('title',)		// Sorting by the attribute
		- search_fields = ('title',)	// Search the model objects by name
	- register page model with PageAdmin class "Eg. admin.site.register(Page, PageAdmin)"

Ch - 8: Django Templates
-----------------------------

1) HTML site template, Django template tag
2) TEMPLATES settings in settings.py
	- DIR : [os.path.join(BASE_DIR, "<project_name>/template")]
	- APPS_DIR : True
3) STATIC FILES
	- STATIC_URL = "/static/"
	- STATIC_FILES_DIR = [os.path.join(BASE_DIR, 'mfdw_site/static'),]
	- Separating static files from Template to easier to scale the application
4) include all the templates and static files
5) <app_name>/views.py
	- from django.shortcuts import render
	- return render(request, "base.html")

6) DRY (Don't Repeat Yourself) principle to extend the page
	- Do not repeat the same information in all of our templates
	- Define replacable blocks in the parent template
		- {% block <name> %} {% endblock <name> %}
	- Define child template inside app
		app_name/templates/app_name/template_name.html
		- inner app_name folder for namespacing your templates to retrive right template
		- Extend the parent template "{% extends "base.html" %}"
		- Define block contents to replace parent block content
	- static files are separated to improve scalability

6) Extend template
	- Do not repeat yourself (DRY) to define replacable blocks
	- Child template to inherit (extends, adds to) from site template
	- Replace the content of parent template with the unique content by child tamplate
	- Modify <project_name>/template/base.html to have a replacable blocks
		- Define Set of django block tags
		{% block <name> %} {% endblock <name> %}
	- Create child template
		- Create template inside <app_name>/templates/<app_name>/pages.html
		- Namespacing your folder to by defining inner <app_name> folder
	- Fill the child template
		- {% extends "base.html" %}
		- Define bock to replace the content
	- Change views.py file to rended new child template
		- render('pages/page.html')
	- Template extension allows you to focus only on differences (We can reason easily, why we are using this)
	  This will reduce number of lines in the projects to improve mainenance.

Ch - 9 : Improving your view and Adding Navigation
---------------------------------------------------------

1) Modify URL to capture page links
	- Change the urlpatterns to capture 'page' request
	- url(r'([^/]*)', views.index, name='index'),

2) How django works with the models and database
	- python manage.py shell
	  from pages.models import Page
	  pg = Page.objects.get(permalink='/')
	  pgs = Page.objects.all()
	  pg.title to get the date
		

3) Modify our template to display our content
3.1) Rewrite our index view to select the correct page
	- pass the page as a parameter "pagename" in the view function
	- Define dictionary variable "context"
	- render with request, template, context

3.2) Testing the view
	- 'assert False' before rendering the html file

3.3) Improve the page template
	- Include the "context variables" in the template file
	- Django automatically "autoescape" HTML before rendering for preventing attacker to inject the code
	- Include <page last updated> and set the page title

4) Turn the placeholder menu into a navigation menu
	- Pass all the objects in the context dictionary
	- In the page.html, we displayed all the list by looping
	- <nav id=> is the tag to display side navigation
	
5) More tags and filters
	- from django.shortcuts import get_object_or_404
	- Debug is True, then the 404 will not be displayed
	- runserver with --insecure option
	- Define "404.html" template in the site location and it extends "site" template 

Ch - 10: Creating a Contact Form
-----------------------------------

1) HTML forms are the primary means of collecting information from website visitors and users 
	Eg. Google's simple search box to large, multi-page submissions
2) design forms from scratch
	- If you have a special application in mind, then write from scratch
	- create the HTML form elements in templates, use Django views to validate and manage the input data
	- It is not recommended

3) Django "form" class takes care of most of the form processing and validation for you

	Steps:
	-------
4) Create a "contact" form in Pages
	- pages/forms.py file creation
		# Form class is same as Django Model class
		from django import forms

		class ContactForm(forms.Form):
			subject = forms.CharField(max_length=100)
			email = forms.EmailField(required=False,label='Your e-mail address')
			message = forms.CharField(widget=forms.Textarea)

5) Add our form to the list of URLs in pages app
	- edit pages/urls.py
	- urlpatterns = [ url('^contact$', views.contact, name="contact" ),
				.... url('([^/]*)')
			]
	-

6) Add navigation to our site template
	- Link our contact form in base.html <site template>
	- <li><a href="/contact">Contact Us</a></li> after the "sidenav" bloc

7) Create a template for the contact form
	- create contact.html in templates/pages
	- extends pages/pages.html {% extends "pages/pages.html" %}
	- "title and content" block is overriden here
	- If "submitted" is True, then send the "successful" message
		- {% if %}
		- {% else %} , {% endif %}
	- Otherwise, load the contact form in the Table
		- "as_table" field render the form field as table rows
		- "Submit" button will not be there and need to mention it in the table &nbsp , <input >
	- {% csrf_token %} to avoid CSRF (Cross Site Request Forgery) in the POST request

8) Create a view to manage the contact form
	- Create a "contact" function in views.py
	- if request is POST, then the form data 
		- form data validated
		- form data cleaned
		- send the email based on the form data
		- HttpRedirect to another URL
		- Change flag variable "submitted" to True
	- If request is GET, then
		- Form will be loaded from templates
		- Request is having "submitted" parameter, then the "Thanks" message displayed

Ch - 11 : Build a more complex Form:
----------------------------------------------

1) Get users info (sales, survey and personal info) and store it in the database.
	- Creating forms from Django model (ModelForm)
	- Customers (new / existing) request for quotation

	Procedure
	-------------
1. Create the quotes app
	- Django app should do one thing (python manage.py startapp quotes)

2. Create the Quote model and add it to the database
	- from django.db import models
	  from django.contrib.auth.models import User
	- Define two tuples STATUS_CHOICES, PRIORITY_CHOICES (tuple of two elements)
		- It will translate into a drop-down list of options in both the admin
		  and on the website.
		- This could also be entered as a list of tuples, however, best-practice 
		  is to use tuples as they are immutable (can't be changed).
	- class QuoteModel(models.Model)
	- CharFiled, EmailField, URLField, TextField, FileField, DecimalField, ForeignKey
		- FileField has the "upload_to" attribute to upload the files in the specific folder
		- ForeignKey to link the User Model
	- def __str__(self):
		return str(self.id)

3. Add the Quote model to the Django admin
	- quotes/admin.py
	- from .models import QuoteModel
	- from django.contrib import admin
	- Define model admin class (QuoteAdmin)
		class QuoteAdmin(admin.ModelAdmin)
			list_display
			list_filter
			readonly_fields
			fieldsets
	- admin.site.register(QuoteModel, QuoteAdmin)
	
4. Create the QuoteForm, which is the ModelForm for collecting the quote request information from the user
	- from django import forms
	  from django.forms import ModelForm
	  from .models import Quote
	- class QuoteForm(ModelForm):
		required_css_class = 'required'
		class Meta:
			model = QuotesModel
			fields = [
				'name', 'position', 'company', 'address',
				'phone', 'email', 'web', 'description',
				'sitestatus', 'priority', 'jobfile'
			]

5. Add a new view to manage the form
	- from django.shortcuts import render
	- from django.http import HttpResponseRedirect
	- from .models import QuotesModel
	- from .forms import QuoteForm
	- from pages.models import Page

	def quote_req(request):
	    submitted = False
	    if request.method == 'POST':
		form = QuoteForm(request.POST, request.FILES)
		if form.is_valid():
		    form.save()
		return HttpResponseRedirect('/quotes?submitted=True')
	    else:
		form = QuoteForm()
		if 'submitted' in request.GET:
		    submitted = True
	    return render(request, 'quotes/quotes.html', {'form': form, 'page_list': Page.objects.all(), 'submitted': submitted})

6. Create the form template
	- Inheriting from the site's base template
	- major difference the HTML form has to be a multi-part form, so we can upload the file with the form
	- 

	{% extends "base.html" %}

	{% block title %}Quote Request{% endblock title %}

	{% block sidenav %}
	{% for page in page_list %}
	<li><a href="{{ page.permalink }}">{{ page.title }}</a></li>
	{% endfor %}
	{% endblock sidenav %}

	{% block content %}
	<h1>Quote Request</h1>

	{% if submitted %}
		<p class="success">
		Your quote was submitted successfully. Thank
		you.
		</p>

	{% else %}
	<form action="" enctype="multipart/form-data"
			   method="post" novalidate>
		<table>
			{{ form.as_table }}
			<tr>
				<td>&nbsp;</td>
				<td><input type="submit" value="Submit"></td>

			</tr>
		</table>
		{% csrf_token %}
	</form>
	{% endif %}
	{% endblock content %}

	
7. Add our new view and form to our urls.py and update the site
template to link to the quote form
	- url(r'^quotes', include('quotes.urls')) in <project_name>/urls.py
	- Create urls.py file inside quotes
	  from django.conf.urls import url
	  from . import views
	  urlpatterns = [
		url(r'^$', views.quote_req, name='quote-request'),
	  ]
	- Add the hyperlink in <project_name>/base.html
		<li><a href="/quote">Get a Quote</a></li>

Ch - 12 Django's Generic Views
-------------------------------

- view is a piece of code that accepts a request and returns a response.

- function-based and class-based views are different style of implementation with their own trade offs

- Class based views advantages
	- Ability to implement HTTP methods like GET and POST as class
	  methods, instead of conditional branching in function-based views;
	- Extending and adding functionality to basic classes with inheritance;
	- Allowing the use of mixins and other object-oriented techniques; and
	- Abstracting common idioms and patterns into generic views to make
	  view development easier for common cases.

- Class-based views aid rapid application development

- Generic views are available for common case
	- All generic views extends from View class
	- Two base views TemplateView, RedirectView
	- Number of generic views to make view development easier
		- DetailView, ListView
		- number of generic editing views and generic date views provided by Django
	- TemplateView returns the "named template with a context"
	- RedirectViews redirect to the URL
	- Implement class-based views
		- Inheritence 
		- Use the generic view classes
			- TemplateView.as_view(template_name="pages/pages.html")
			- blank page template is returned
- View Records with ListView
	- from django.views.generic import ListView
	- class QuoteList(ListView):		// Inherit ListView
	    model = QuoesModel			// Model to list
	    context_object_name = "all_quotes"	// QuerySet passed to the template

- update the URLs in our quotes app
	- from .views import QuoteList
	  urlpatterns = [ url(r'^$', views.quote_req, name='quote-request'),
                url(r'^show', QuoteList.as_view(), name="show-quotes")
              ]

- Django's generic views makes some assumptions
	- Template for the generic view is going to be the "model name" 
	  with "_list.html" appended (Eg. quotesmodel_list.html)
	- \quotes\templates\quotes\quote_list.html

		{% extends "quotes/quotes.html" %}

		{% block title %}All Quotes{% endblock title %}

		{% block content %}
		<h1>All Quotes</h1>

		<ul>
			{% for quote in all_quotes %}
			<li>{{ quote.name }}</li>
			{% endfor %}
		</ul>

		{% endblock content %}

- You are Agile Now!
	- It might not seem like it, but this iterative approach to development-getting a simple
	  piece of code working and then building on it to create the outcome you want-is the
	  basis of agile software development.
	- While there are many different methodologies built upon this concept (Scrum, for
 	  example), they all share the same basic principle.
	- If you get into the habit of asking yourself "what is the minimum amount of code I
	  need to write to demonstrate this works?" you are well on your way to becoming a
	  professional programmer.

- Improving the Quote List Template
	- eplacing the simple list we used to test the template with a table and rendering 
	  each quote record as a row in the table
	- New Django template tags and filters while we build the template
	- <table style="border-collapse:collapse"> to avoid CSS formatting
	- The format string "m-d-y"
	- Additional filter is added to set the default to the word "pending"
	- default filter (--) to substitute, when the quote price is zero
	- cycle is a built-in template tag that alternates between all the values listed inside the tag
	- Django's generic views make passing in context information very easy by defining a special method called get_context_data
	- "get_context_data" merges all context data from any parent classes of the current class
	- we are simply adding the page_list QuerySet to the context dictionary
	- Add the quote list page, update your base template
	
- Viewing a single record with DetailView
	- Create the new detail view - QuoteView;
		- in \quotes\views.py
		- from django.views.generic import ListView, DetailView
		- Define "QuoteView" class by inheriting "DetailView"
	- Add a new URLconf that will display the detail view;
		- The group (?P<pk>[0-9]+) is what is called a named group 
		  (see Chapter 5 for more on named groups in regular expressions)
	- Create the detail view template;
	- Add some CSS so the detail view matches our site template; and
	- Modify the quote list template to link to the detail view.
